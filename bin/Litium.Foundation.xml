<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Litium.Foundation</name>
    </assembly>
    <members>
        <member name="T:Litium.Foundation.Accounts.Account">
            <summary>
            Base class for users and groups.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Accounts.Account.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Accounts.Account.Delete(Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes the user/group from the system.
            </summary> 
        </member>
        <member name="M:Litium.Foundation.Accounts.Account.Refresh">
            <summary>
            Refreshes this account.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Accounts.Account.SetCentralAdministration(System.Boolean,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Set whether the account is accessible through the central administration GUI.
            </summary>
            <param name="centralAdministration">Whether the account is accessible through the central administration GUI.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.Account.SetDisplayName(System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Set display name.
            </summary>
            <param name="displayName">Display name.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.Account.SetEnabled(System.Boolean,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Set enabled.
            </summary>
            <param name="enabled">Wheter to enable the account.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.Account.SetPath(System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Set path ("." or null for local Foundation account)
            </summary>
            <param name="path">Path ("." or null for local Foundation account).</param>
            <param name="token">Security token.</param>
        </member>
        <member name="P:Litium.Foundation.Accounts.Account.CentralAdministration">
            <summary>
            Whether the account is to be administred via the central gui or not.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.Account.DisplayName">
            <summary>
            Display name.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.Account.Enabled">
            <summary>
            Returns whether the account is enabled or not.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.Account.ID">
            <summary>
            ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.Account.Path">
            <summary>
            Directory path ("." or null for local Foundation account).
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.Account.Type">
            <summary>
            Account type.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Accounts.AccountSettings">
            <summary>
            Contains information about the account tier.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Accounts.AccountSettings.#ctor(Litium.Foundation.Configuration.AccountSettingsConfig)">
            <summary>
            Constructor (does not enable Directory integration).
            </summary>
        </member>
        <member name="M:Litium.Foundation.Accounts.AccountSettings.#ctor(Litium.Foundation.Accounts.AccountTypes,System.String,System.Int32,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="accountTypes">Account type to use.</param>
            <param name="directoryServerName">Name or IP-number of LDAP-server (AD or Novell E-Directory).</param>
            <param name="directorySyncInterval">Active Directory synchronization interval in minutes, or -1 to disable.</param>
            <param name="directorySyncAccountName">Name of Active Directory account to use in synchronization, or null to disable synchronization.</param>
            <param name="directorySyncAccountPassword">Password of Active Directory account to use in synchronization, or null to disable synchronization.</param>
            <param name="enableAutomaticDirectoryAccountCreation">Whether to enable automatic Active Directory account creation.</param>
            <param name="enforceMiniumuOneGroupMembership">Whether to allow creation of users that does not belong to foundation groups.</param>
            <param name="hierarchicalGroupMembership">Wheter to only look on direct group memberships or include hierachical memberships too.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.AccountSettings.#ctor(Litium.Foundation.Accounts.AccountTypes,System.String,System.Int32,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="accountTypes">Account type to use.</param>
            <param name="directoryServerName">Name or IP-number of LDAP-server (AD or Novell E-Directory).</param>
            <param name="directorySyncInterval">Active Directory synchronization interval in minutes, or -1 to disable.</param>
            <param name="directorySyncAccountName">Name of Active Directory account to use in synchronization, or null to disable synchronization.</param>
            <param name="directorySyncAccountPassword">Password of Active Directory account to use in synchronization, or null to disable synchronization.</param>
            <param name="enableAutomaticDirectoryAccountCreation">Whether to enable automatic Active Directory account creation.</param>
            <param name="enforceMiniumuOneGroupMembership">Whether to allow creation of users that does not belong to foundation groups.</param>
            <param name="hierarchicalGroupMembership">Wheter to only look on direct group memberships or include hierachical memberships too.</param>
            <param name="passwordLockoutCount">Useraccoutn is locked after x</param>
            <param name="passwordExpireDays">User have to change password each x days</param>
            <param name="passwordLengthRule">Use length rule for password</param>
            <param name="passwordComplexityRule">Use complexity rules for passwords</param>
            <param name="systemLoginGui">Let system login to application or not</param>
        </member>
        <member name="P:Litium.Foundation.Accounts.AccountSettings.AccountTypes">
            <summary>
            Account types to use.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.AccountSettings.DirectoryServerName">
            <summary>
            Name of Directory LDAP-server, or null to disable LDAP-accounts.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.AccountSettings.DirectorySyncAccountName">
            <summary>
            Name of Directory account to use in sync, or null to disable Directory synchronization.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.AccountSettings.DirectorySyncAccountPassword">
            <summary>
            Password of Directory account to use in sync, or null to disable Directory synchronization.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.AccountSettings.DirectorySyncInterval">
            <summary>
            Directory synchronization interval in minutes, or -1 to disable.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.AccountSettings.EnableAutomaticDirectoryAccountCreation">
            <summary>
            Whether to enable automatic directory account creation.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.AccountSettings.EnforceMinimumOneGroupMembership">
            <summary>
            Whether to allow user that do not belong to any foundtion group.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.AccountSettings.HierarchicalGroupMembership">
            <summary>
            Whether to only use memberof groups or lookup groups hierachicaly.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.AccountSettings.PasswordComlexityRule">
            <summary>
            Gets or sets a value indicating whether [password comlexity rule].
            </summary>
            <value>
            	<c>true</c> if [password comlexity rule]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Litium.Foundation.Accounts.AccountSettings.PasswordLengthRule">
            <summary>
            Gets or sets a value indicating whether [password length rule].
            </summary>
            <value><c>true</c> if [password length rule]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Litium.Foundation.Accounts.AccountSettings.PasswordExpireDays">
            <summary>
            Gets or sets the password expire days.
            </summary>
            <value>The password expire days.</value>
        </member>
        <member name="P:Litium.Foundation.Accounts.AccountSettings.PasswordLockoutCount">
            <summary>
            Gets or sets the password lockout count.
            </summary>
            <value>The password lockout count.</value>
        </member>
        <member name="P:Litium.Foundation.Accounts.AccountSettings.SystemLoginGui">
            <summary>
            Gets or sets a value indicating whether system login into GUI or not.
            </summary>
            <value><c>true</c> if system login into GUI; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Litium.Foundation.Accounts.AccountSettings.IsDefaultSystemPassword">
            <summary>
            Gets the system password.
            </summary>
            <value><c>true</c> if system login into GUI; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Litium.Foundation.Accounts.AccountTypes">
            <summary>
            Predfinied account types used in Litium Foundation. 
            </summary>
        </member>
        <member name="F:Litium.Foundation.Accounts.AccountTypes.UNDEFINIED">
            <summary>
            Not defiend.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Accounts.AccountTypes.INTERNAL">
            <summary>
            Internal account.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Accounts.AccountTypes.ACTIVE_DIRECTORY">
            <summary>
            Active Directory account.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Accounts.AccountTypes.NOVELL_EDIRECTORY">
            <summary>
            Novell eDirectory account.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Accounts.AccountTypes.OTHER">
            <summary>
            Other.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Accounts.ActiveDirectory.ADGroup">
            <summary>
            Active Directory group.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Accounts.Group">
            <summary>
            Abstract group base class.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Accounts.Group.m_carrier">
            <summary>
            Member variable, carrier.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Accounts.Group.m_createdDate">
            <summary>
            Member variable, create datetime.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Accounts.Group.m_members">
            <summary>
            Member variable, member collection.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Accounts.Group.m_name">
            <summary>
            Member variable, group name.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Accounts.Group.#ctor(Litium.Foundation.Carriers.GroupCarrier)">
            <summary>
            Constructor.
            </summary>
            <param name="group">Group carrier.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.Group.HasCustomPermission(System.Guid,System.Guid,System.Int32,System.Guid,System.Boolean)">
            <summary>
            Returns whether the group has the requested custom permission.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="key">Permission key.</param>
            <param name="includeHigherLevelPermissions">Whether to include higher level permissions or not (module and solution level).</param>
            <returns>True if permission exists, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.Group.HasModulePermission(System.Guid,System.Guid,System.Int32,System.Boolean)">
            <summary>
            Returns whether the group has the requested module permission.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="includeHigherLevelPermissions">Whether to include higher level permissions or not (module and solution level).</param>
            <returns>True if permission exists, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.Group.HasSolutionPermission(System.Guid,System.Int32,System.Boolean)">
            <summary>
            Returns whether the group has the requested solution permission.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="includeHigherLevelPermissions">Whether to include higher level permissions or not (module and solution level).</param>
            <returns>True if permission exists, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.Group.SetCentralAdministration(System.Boolean,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Set whether the group is accessible through the central administration GUI.
            </summary>
            <param name="centralAdministration">Whether the group is accessible through the central administration GUI.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.Group.SetDisplayName(System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Set display name.
            </summary>
            <param name="displayName">Display name.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.Group.SetEnabled(System.Boolean,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Set enabled.
            </summary>
            <param name="enabled">Wheter to enable the group.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.Group.SetName(System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Set name.
            </summary>
            <param name="name">Name.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.Group.SetPath(System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Set path ("." or null for local Foundation group).
            </summary>
            <param name="path">Group path ("." or null for local Foundation group).</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.Group.Delete(Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes the group.
            </summary>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.Group.GetAsCarrier(System.Boolean,System.Boolean)">
            <summary>
            Returns the group as a carrier class.
            </summary>
            <param name="includeMembers">Whether to include groups members or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>The group as a carrier class.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.Group.HasCustomPermission(System.Guid,System.Int32,System.Guid,System.Boolean)">
            <summary>
            Returns whether the group has the requested custom permission.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="key">Permission key.</param>
            <param name="includeHigherLevelPermissions">Whether to include higher level permissions or not (module and solution level).</param>
            <returns>True if permission exists, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.Group.HasModulePermission(System.Guid,System.Int32,System.Boolean)">
            <summary>
            Returns whether the group has the requested module permission.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="includeHigherLevelPermissions">Whether to include higher level permissions or not (module and solution level).</param>
            <returns>True if permission exists, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.Group.HasSolutionPermission(System.Int32,System.Boolean)">
            <summary>
            Returns whether the group has the requested solution permission.
            </summary>
            <param name="permissionType">Permission type.</param>
            <param name="includeHigherLevelPermissions">Whether to include higher level permissions or not (module and solution level).</param>
            <returns>True if permission exists, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.Group.Refresh">
            <summary>
            Refreshes this group.
            </summary>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.Group.Update(System.String,System.String,System.Boolean,System.String,System.Boolean,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Update the group.
            </summary>
            <param name="displayName">Display name.</param>
            <param name="name">Group name.</param>
            <param name="enabled">Whether the group is enabled.</param>
            <param name="path">If not internal group: complete path including protocoll, example: LDAP://CN=Roger Moore,DC=LITIUM,DC=SE.</param>
            <param name="centralAdministration">Whether to handle the group in the central administration gui or not.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.Group.UpdateFromCarrier(Litium.Foundation.Carriers.GroupCarrier,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Updates the group from a carrier class.
            </summary>
            <param name="carrier">Group carrier.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.Group.Populate(Litium.Foundation.Carriers.GroupCarrier)">
            <summary>
            Loads values from carrier.
            </summary>
            <param name="carrier">Carrier to populate from.</param>
        </member>
        <member name="P:Litium.Foundation.Accounts.Group.CentralAdministration">
            <summary>
            Whether the group is to be administred via the central gui or not.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.Group.CreatedDate">
            <summary>
            When the group was created in Litium Foundation.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.Group.DisplayName">
            <summary>
            Display name.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.Group.Enabled">
            <summary>
            Returns whether the group is enabled or not.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.Group.ID">
            <summary>
            Group ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.Group.IsDeleted">
            <summary>
            Returns whether the group is deleted or not.
            This information is always up to date (never cached).
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.Group.LatestUpdate">
            <summary>
            Returns the date time for the latest update.
            This value is always up to date (never cached).
            </summary>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="P:Litium.Foundation.Accounts.Group.Members">
            <summary>
            Returns this groups members.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.Group.Name">
            <summary>
            Group name.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.Group.Path">
            <summary>
            Directory path ("." or null for local Foundation group).
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.Group.Type">
            <summary>
            Account type.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Accounts.ISyncableAccount">
            <summary>
            Interface for accounts which can be synchroinzed against a Directory.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Accounts.ISyncableAccount.Sync(System.String,System.String)">
            <summary>
            Synchronizes the item with the Directory.
            </summary>
            <param name="verifyLoginName">Login name used to verify group against the Directory.</param>
            <param name="verifyPassword">Password used to verify group against the Directory.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.ISyncableAccount.Sync">
            <summary>
            Synchronizes the item with the Directory.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Accounts.ActiveDirectory.ADGroup.#ctor(Litium.Foundation.Carriers.GroupCarrier)">
            <summary>
            Constructor.
            </summary>
            <param name="group">Group carrier. Path = complete Active Directory LDAP path (example: "LDAP://litium.se/CN=Domain Users,CN=Users,DC=litium,DC=se").</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.ActiveDirectory.ADGroup.Sync(System.String,System.String)">
            <summary>
            Synchronizes the group with the Active Directory:
            - Updates the corresponding Foundation group with the AD display name.
            - If the AD group no longer exists, the corresponding Foundation group is disabled.
            - Checks that all members registred in Foundation still exist and that they are 
            members of the group. If not, these users are removed from the memberships list.
            </summary>
            <param name="verifyLoginName">Login name used to verify group against the Active Directory.</param>
            <param name="verifyPassword">Password used to verify group against the Active Directory.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.ActiveDirectory.ADGroup.Sync">
            <summary>
            Synchronizes the group with the Active Directory:
            - Updates the corresponding Foundation group with the AD display name.
            - If the AD group no longer exists, the corresponding Foundation group is disabled.
            - Checks that all members registred in Foundation still exist and that they are 
            members of the group. If not, these users are removed from the memberships list.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Accounts.ActiveDirectory.ADUser">
            <summary>
            Active Directory user.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Accounts.User">
            <summary>
            Abstract user base class.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Accounts.User.ANONYMOUS_USER_LOGIN_NAME">
            <summary>
            Anonymous user login name.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Accounts.User.SYSTEM_USER_LOGIN_NAME">
            <summary>
            System user login name.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Accounts.User.m_carrier">
            <summary>
            User carrier.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Accounts.User.m_groupMemberships">
            <summary>
            Group memberships.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Accounts.User.#ctor(Litium.Foundation.Carriers.UserCarrier)">
            <summary>
            Constructor (the password in the user carrier must be encrypted).
            </summary>
            <param name="user">User carrier.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.User.HasCustomPermission(System.Guid,System.Guid,System.Int32,System.Guid,System.Boolean,System.Boolean)">
            <summary>
            Returns whether the user has the requested custom permission.
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="key">Permission key.</param>
            <param name="includeHigherLevelPermissions">Whether to include higher level permissions or not (module and solution level).</param>
            <param name="includeGroups">Wheter to include the permissions of the groups which the user belongs to.</param>
            <returns>True if permission exists, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.User.HasModulePermission(System.Guid,System.Guid,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Returns whether the user has the requested module permission.
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="includeHigherLevelPermissions">Whether to include higher level permissions or not (module and solution level).</param>
            <param name="includeGroups">Wheter to include the permissions of the groups which the user belongs to.</param>
            <returns>True if permission exists, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.User.HasSolutionPermission(System.Guid,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Returns whether the user has the requested solution permission.
            </summary>
            <param name="userID">User ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="includeHigherLevelPermissions">Whether to include higher level permissions or not (module and solution level).</param>
            <param name="includeGroups">Wheter to include the permissions of the groups which the user belongs to.</param>
            <returns>True if permission exists, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.User.SetCentralAdministration(System.Boolean,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Set whether the user is accessible through the central administration GUI.
            </summary>
            <param name="centralAdministration">Whether the user is accessible through the central administration GUI.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.User.SetDisplayName(System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Set display name.
            </summary>
            <param name="displayName">Display name.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.User.SetEmail(System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Set email.
            </summary>
            <param name="email">Email.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.User.SetEnabled(System.Boolean,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Set enabled.
            </summary>
            <param name="enabled">Wheter to enable the user.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.User.SetLanguage(Litium.Foundation.Languages.Language,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Set the users prefered language or null to use default.
            </summary>
            <param name="language">Language.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.User.SetLoginName(System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Set login name.
            </summary>
            <param name="loginName">Login name.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.User.SetPassword(System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Sets this users password.
            </summary>
            <param name="password">New password (not encrypted).</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.User.SetPath(System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Set path ("." or null for local Foundation user).
            </summary>
            <param name="path">Path ("." or null for local Foundation user).</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.User.SetSkin(System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Set skin or null to use default.
            </summary>
            <param name="skin">Skin.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.User.SetStatus(Litium.Foundation.Accounts.UserStatus,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Sets the status.
            </summary>
            <param name="status">The status.</param>
            <param name="token">The token.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.User.Delete(Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes the user.
            </summary>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.Accounts.CannotDeleteAnonymousUserExeption">Thrown when trying to delete the anonymous user.</exception>
            <exception cref="T:Litium.Foundation.Accounts.CannotDeleteSystemUserExeption">Thrown when trying to delete the system user.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.User.GetAsCarrier(System.Boolean,System.Boolean)">
            <summary>
            Returns the user as a carrier class.
            </summary>
            <param name="includeGroups">Whether to include user groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>The user as a carrier class.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.User.GetEncryptedPassword(Litium.Foundation.Security.SecurityToken)">
            <summary>
            Returns this users password (encrypted).
            </summary>
        </member>
        <member name="M:Litium.Foundation.Accounts.User.HasCustomPermission(System.Guid,System.Int32,System.Guid,System.Boolean,System.Boolean)">
            <summary>
            Returns whether the user has the requested custom permission.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="key">Permission key.</param>
            <param name="includeHigherLevelPermissions">Whether to include higher level permissions or not (module and solution level).</param>
            <param name="includeGroups">Wheter to include the permissions of the groups which the user belongs to.</param>
            <returns>True if permission exists, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.User.HasModulePermission(System.Guid,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Returns whether the user has the requested module permission.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="includeHigherLevelPermissions">Whether to include higher level permissions or not (module and solution level).</param>
            <param name="includeGroups">Wheter to include the permissions of the groups which the user belongs to.</param>
            <returns>True if permission exists, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.User.HasSolutionPermission(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Returns whether the user has the requested solution permission.
            </summary>
            <param name="permissionType">Permission type.</param>
            <param name="includeHigherLevelPermissions">Whether to include higher level permissions or not (module and solution level).</param>
            <param name="includeGroups">Wheter to include the permissions of the groups which the user belongs to.</param>
            <returns>True if permission exists, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.User.Refresh">
            <summary>
            Refreshes this user.
            </summary>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.User.Update(System.String,System.String,System.String,System.Boolean,System.String,System.Boolean,System.Guid,System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Update the user.
            </summary>
            <param name="displayName">Display name.</param>
            <param name="loginName">User login name.</param>
            <param name="email">User email.</param>
            <param name="enabled">Whether the user is enabled.</param>
            <param name="path">User path.</param>
            <param name="centralAdministration">Whether to handle the user in the central administration gui or not.</param>
            <param name="languageID">The users prefered language, or Guid.Empty to use default.</param>
            <param name="skin">The users prefered skin, or null to use default.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.User.Update(System.String,System.String,System.String,System.Boolean,System.String,System.Boolean,System.Guid,System.String,Litium.Foundation.Accounts.UserStatus,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Update the user.
            </summary>
            <param name="displayName">Display name.</param>
            <param name="loginName">User login name.</param>
            <param name="email">User email.</param>
            <param name="enabled">Whether the user is enabled.</param>
            <param name="path">User path.</param>
            <param name="centralAdministration">Whether to handle the user in the central administration gui or not.</param>
            <param name="languageID">The users prefered language, or Guid.Empty to use default.</param>
            <param name="skin">The users prefered skin, or null to use default.</param>
            <param name="status">Status of user</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.User.UpdateFromCarrier(Litium.Foundation.Carriers.UserCarrier,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Updates the user from a carrier class.
            </summary>
            <param name="carrier">User carrier.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.User.Populate(Litium.Foundation.Carriers.UserCarrier)">
            <summary>
            Loads values from carrier.
            </summary>
            <param name="carrier">Carrier to populate from.</param>
        </member>
        <member name="P:Litium.Foundation.Accounts.User.CentralAdministration">
            <summary>
            Whether the user is to be administred via the central gui or not.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.User.CreatedDate">
            <summary>
            When the user was created in Litium Foundation.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.User.DisplayName">
            <summary>
            Display name.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.User.Email">
            <summary>
            User email.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.User.Enabled">
            <summary>
            Returns whether the user is enabled or not.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.User.GroupMemberships">
            <summary>
            Returns this users group memberships.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.User.ID">
            <summary>
            User ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.User.IsAnonymousUser">
            <summary>
            Returns whether the user is the anonymous user or not.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.User.IsDeleted">
            <summary>
            Returns whether the user is deleted or not.
            This information is always up to date (never cached).
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.User.IsSystemUser">
            <summary>
            Returns whether the user is the system user or not.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.User.Language">
            <summary>
            Returns the users preferred language.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.User.LanguageID">
            <summary>
            Returns the users preferred language id.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.User.LastLoginDate">
            <summary>
            Date time of latest login.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.User.LatestUpdate">
            <summary>
            Returns the date time for the latest update.
            This value is always up to date (never cached).
            </summary>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="P:Litium.Foundation.Accounts.User.LoginName">
            <summary>
            Returns the users login name.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.User.Path">
            <summary>
            Directory path ("." or null for an internal Foundation user).
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.User.PreviousLoginDate">
            <summary>
            Previous last login date.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.User.Skin">
            <summary>
            Returns the users prefered skin, or null to use default.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.User.Type">
            <summary>
            Account type.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.User.PasswordDate">
            <summary>
            Gets the password date.
            </summary>
            <value>The password date.</value>
        </member>
        <member name="P:Litium.Foundation.Accounts.User.Status">
            <summary>
            Gets the status.
            </summary>
            <value>The status.</value>
        </member>
        <member name="M:Litium.Foundation.Accounts.ActiveDirectory.ADUser.#ctor(Litium.Foundation.Carriers.UserCarrier)">
            <summary>
            Constructor.
            </summary>
            <param name="user">User carrier. LoginName = "DOMAIN\LOGIN_NAME" or "LOGIN_NAME@DOMAIN", path = Complete Active Directory LDAP path (example: "LDAP://litium.se/CN=Domain Users,CN=Users,DC=litium,DC=se").</param>
            <exception cref="T:Litium.Foundation.FoundationException">Wrong user type, must be AccountTypes.ACTIVE_DIRECTORY</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.ActiveDirectory.ADUser.GetDomainFromUserLogin(System.String,System.String@)">
            <exception cref="T:System.ArgumentNullException"><paramref name="loginName"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><c>ArgumentException</c>.</exception>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.ActiveDirectory.ADUser.Sync(System.String,System.String)">
            <summary>
            Synchronizes the user with the Active Directory:
            - Updates the corresponding Foundation user with the AD display name and email.
            - If the AD user no longer exists, the corresponding Foundation user is disabled.
            - Checks that all members registred in Foundation still exist and that they are 
            members of the group. If not, these users are removed from the memberships list.
            </summary>
            <param name="verifyLoginName">Login name used to verify group against the Active Directory.</param>
            <param name="verifyPassword">Password used to verify group against the Active Directory.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.ActiveDirectory.ADUser.Sync">
            <summary>
            Synchronizes the user with the Active Directory:
            - Updates the corresponding Foundation user with the AD display name and email.
            - If the AD user no longer exists, the corresponding Foundation user is disabled.
            - Checks that all members registred in Foundation still exist and that they are 
            members of the group. If not, these users are removed from the memberships list.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Accounts.ActiveDirectory.ADUser.SetDisplayName(System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Set display name not allowed on an Active Directory user.
            </summary>
            <param name="displayName">Display name.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.Accounts.DirectoryUpdateException">Not allowed</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.ActiveDirectory.ADUser.SetEmail(System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Set email not allowed on an Active Directory user.
            </summary>
            <param name="email">Email.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.Accounts.DirectoryUpdateException">Not allowed</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.ActiveDirectory.ADUser.SetPassword(System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Set password not allowed on an Active Directory user.
            </summary>
            <param name="password">New password (not encrypted).</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.Accounts.DirectoryUpdateException">Not allowed</exception>
        </member>
        <member name="P:Litium.Foundation.Accounts.ActiveDirectory.ADUser.DirectoryEntry">
            <summary>
            Read only instance of Directory Entry.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Accounts.ActiveDirectory.ADUtils">
            <summary>
            Active Directory utilities.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Accounts.LDAPUtils">
            <summary>
            LDAP utilities.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Accounts.LDAPUtils.BuildLDAPPath(System.String,System.String)">
            <summary>
            Builds an LDAP path, including protocoll.
            </summary>
            <param name="serverPath">LDAP server path (example: "jonkoping.office.se").</param>
            <param name="entryPath">Entry path (example: "CN=Domain Users,CN=Users,DC=litium,DC=se).</param>
            <returns>A complete LDAP-path.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.LDAPUtils.GetGroupMembershipIDs(System.String,System.String,System.String)">
            <summary>
            Returns the Litium Foundation ID of all registred LDAD-groups in which the LDAD-user is a member.
            </summary>
            <param name="domain">Domain the group belongs to.</param>
            <param name="entryPath">User entry path (example: "CN=Domain Users,CN=Users,DC=litium,DC=se).</param>
            <param name="memberOfProperty">Name of "member of" property.</param>
            <returns>The Litium Foundation ID of all groups in which the user is a member.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.LDAPUtils.GetGroupMembershipIDs(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Returns the Litium Foundation ID of all registred LDAD-groups in which the LDAD-user is a member.
            </summary>
            <param name="serverPath">LDAP server path (example: "jonkoping.office.se").</param>
            <param name="entryPath">Entry path (example: "CN=Domain Users,CN=Users,DC=litium,DC=se).</param>
            <param name="memberOfProperty">Name of "member of" property.</param>
            <param name="verifyLoginName">Login name used to connect against the Active Directory.</param>
            <param name="verifyPassword">Password used to connect against the Active Directory.</param>
            <returns>The Litium Foundation ID of all groups in which the user is a member.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.LDAPUtils.GetMemberIDs(System.String,System.String,System.String)">
            <summary>
            Returns all member Litium Foundation user IDs, which belong to a specified LDAP group.
            </summary>
            <param name="domain">Domain the group belongs to.</param>
            <param name="entryPath">Entry path (example: "CN=Domain Users,CN=Users,DC=litium,DC=se).</param>
            <param name="membersProperty">Name of "members" property.</param>
            <returns>All member Litium Foundation user IDs in a group.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.LDAPUtils.GetMemberIDs(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Returns all member IDs in a group, checked against the Active Directory.
            </summary>
            <param name="serverPath">LDAP server path (example: "jonkoping.office.se").</param>
            <param name="entryPath">Entry path (example: "CN=Domain Users,CN=Users,DC=litium,DC=se).</param>
            <param name="membersProperty">Name of "members" property.</param>
            <param name="verifyLoginName">Login name used to connect against the Active Directory.</param>
            <param name="verifyPassword">Password used to connect against the Active Directory.</param>
            <returns>All member IDs in a group.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.LDAPUtils.GetPathFromIdentity(System.Security.Principal.IIdentity,System.String)">
            <summary>
            Builds a LDAP path for a windows identity.
            </summary>
            <param name="identity">Windows identity.</param>
            <param name="loginNameProperty">Name of "login name" property.</param>
            <returns>LDAP path (not including protocol and server name).</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.LDAPUtils.GetPathFromWindowsDomainAndLoginName(System.String,System.String,System.String)">
            <summary>
            Builds a LDAP path for a windows identity.
            </summary>
            <param name="domain">If not null, lookup serverPath from domain.</param>
            <param name="userName">User Login name (example: "OFFICE\henrik").</param>
            <param name="loginNameProperty">Name of "login name" property.</param>
            <returns>LDAP path (not including protocol and server name).</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.LDAPUtils.GetDirectoryEntry(System.String,System.String,System.String)">
            <summary>
            Get DirectoryEntry, get entry from foreign AD if required.
            </summary>
            <param name="path">Path.</param>
            <param name="user">User to check AD with.</param>
            <param name="password">Password for AD user.</param>
            <returns>DirectoryEntry</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.LDAPUtils.GetPath(System.String)">
            <summary>
            Checks if a path is aa foreignsecurity principal, return real path in the trusted domain/forest.
            </summary>
            <param name="path">Path to convert.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.LDAPUtils.FollowForeignSecurityPrincipals(System.String)">
            <summary>
            Converts a foreignsecurity principal ldap path into the path of the
            real object in the trusted domain/forest.
            </summary>
            <param name="sidString">Path to convert.</param>
            <returns>The path of the sid matching the <paramref name="sidString"/>.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.ActiveDirectory.ADUtils.EntryExists(System.String,System.String)">
            <summary>
            Returns whether an entry exists in the AD.
            </summary>
            <param name="domain">Domain the path belongs to.</param>
            <param name="entryPath">Entry path (example: "CN=Domain Users,CN=Users,DC=litium,DC=se).</param>
            <returns>True if group exists, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.ActiveDirectory.ADUtils.EntryExists(System.String,System.String,System.String,System.String)">
            <summary>
            Returns whether an entry exists in the AD.
            </summary>
            <param name="serverPath">LDAP server path (example: "jonkoping.office.se").</param>
            <param name="entryPath">Entry path (example: "CN=Domain Users,CN=Users,DC=litium,DC=se).</param>
            <param name="verifyLoginName">Login name used to verify group against the Directory (example: "LITIUM\henlun" or "henlun@litium").</param>
            <param name="verifyPassword">Password used to verify group against the Directory.</param>
            <returns>True if group exists, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.ActiveDirectory.ADUtils.EntryExists(System.String,System.String,System.String)">
            <summary>
            Returns whether an entry exists in the AD.
            </summary>
            <param name="fullPath">Full LDAP path, including protocole.</param>
            <param name="verifyLoginName">Login name used to connect against the Active Directory.</param>
            <param name="verifyPassword">Password used to connect against the Active Directory.</param>
            <returns>True if group exists, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.ActiveDirectory.ADUtils.GetDisplayName(System.String,System.String)">
            <summary>
            Returns the display name for a user or group.
            </summary>
            <param name="domain">Domain the entry belongs to.</param>
            /// <param name="entryPath">Entry path (example: "CN=Domain Users,CN=Users,DC=litium,DC=se).</param>
            <returns>Display name or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.ActiveDirectory.ADUtils.GetDisplayName(System.String,System.String,System.String)">
            <summary>
            Returns the display name for a user or group.
            </summary>
            <param name="domain">Domain the entry belongs to.</param>
            <param name="entryPath">Entry path (example: "CN=Domain Users,CN=Users,DC=litium,DC=se).</param>
            <param name="displayNameProperty">Name of "Display name" property.</param>
            <returns>Display name or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.ActiveDirectory.ADUtils.GetDisplayName(System.String,System.String,System.String,System.String)">
            <summary>
            Returns the display name for a user or group.
            </summary>
            <param name="serverPath">LDAP server path (example: "jonkoping.office.se").</param>
            <param name="entryPath">Entry path (example: "CN=Domain Users,CN=Users,DC=litium,DC=se).</param>
            <param name="verifyLoginName">Login name used to connect against the Active Directory.</param>
            <param name="verifyPassword">Password used to connect against the Active Directory.</param>
            <returns>Display name or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.ActiveDirectory.ADUtils.GetDisplayName(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Returns the display name for a user or group.
            </summary>
            <param name="serverPath">LDAP server path (example: "jonkoping.office.se").</param>
            <param name="entryPath">Entry path (example: "CN=Domain Users,CN=Users,DC=litium,DC=se).</param>
            <param name="verifyLoginName">Login name used to connect against the Active Directory.</param>
            <param name="verifyPassword">Password used to connect against the Active Directory.</param>
            <param name="displayNameProperty">Name of "Display name" property.</param>
            <returns>Display name or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.ActiveDirectory.ADUtils.GetEmail(System.String,System.String)">
            <summary>
            Returns the email for a user.
            </summary>
            <param name="domain">Domain the entry belongs to.</param>
            <param name="entryPath">Entry path (example: "CN=Domain Users,CN=Users,DC=litium,DC=se).</param>
            <returns>Email or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.ActiveDirectory.ADUtils.GetEmail(System.String,System.String,System.String)">
            <summary>
            Returns the email for a user.
            </summary>
            <param name="domain">Domain the entry belongs to.</param>
            <param name="entryPath">Entry path (example: "CN=Domain Users,CN=Users,DC=litium,DC=se).</param>
            <param name="emailProperty">Name of "email" property.</param>
            <returns>Email or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.ActiveDirectory.ADUtils.GetEntryName(System.String,System.String)">
            <summary>
            Returns the CN name of an entry, not including "CN=" (not display name).
            </summary>
            <param name="domain">Domain the entry belongs to.</param>
            <param name="entryPath">Entry path (example: "CN=Domain Users,CN=Users,DC=litium,DC=se).</param>
            <returns>The namn of the entry.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.ActiveDirectory.ADUtils.GetEntryID(System.Security.Principal.IIdentity,System.String)">
            <summary>
            Returns the ID of an entry.
            </summary>
            <param name="identity">Identity.</param>
            <param name="entryPath">Entry path (example: "CN=Domain Users,CN=Users,DC=litium,DC=se).</param>
            <returns>The ID of the entry.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.ActiveDirectory.ADUtils.GetEntryID(System.String,System.String)">
            <summary>
            Returns the ID of an entry.
            </summary>
            <param name="domain">Domain the entry belongs to.</param>
            <param name="entryPath">Entry path (example: "CN=Domain Users,CN=Users,DC=litium,DC=se).</param>
            <returns>The ID of the entry.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.ActiveDirectory.ADUtils.GetEntryID(System.String,System.String,System.String,System.String)">
            <summary>
            Returns the ID of an entry.
            </summary>
            <param name="serverPath">LDAP server path (example: "jonkoping.office.se").</param>
            <param name="entryPath">Entry path (example: "CN=Domain Users,CN=Users,DC=litium,DC=se).</param>
            <param name="verifyLoginName">Login name used to connect against the Active Directory.</param>
            <param name="verifyPassword">Password used to connect against the Active Directory.</param>
            <returns>The ID of the entry.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.ActiveDirectory.ADUtils.GetGroupMembershipIDs(System.Security.Principal.IIdentity,System.String)">
            <summary>
            Returns the ID of all registred AD-groups in which the AD-user is a member.
            </summary>
            <param name="identity">Identity.</param>
            <param name="entryPath">User entry path (example: "CN=Domain Users,CN=Users,DC=litium,DC=se).</param>
            <returns>The Litium Foundation ID of all groups in which the user is a member.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.ActiveDirectory.ADUtils.GetGroupMembershipIDs(System.String,System.String)">
            <summary>
            Returns the ID of all registred AD-groups in which the AD-user is a member.
            </summary>
            <param name="domain">Domain the entry belongs to.</param>
            <param name="entryPath">Entry path (example: "CN=Domain Users,CN=Users,DC=litium,DC=se).</param>
            <returns>The ID of all groups in which the user is a member.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.ActiveDirectory.ADUtils.GetLogin(System.String,System.String,System.String)">
            <summary>
            Returns the login name for a user.
            </summary>
            <param name="domain">Domain the entry belongs to.</param>
            <param name="entryPath">Entry path (example: "CN=Domain Users,CN=Users,DC=litium,DC=se).</param>
            <param name="loginProperty">Name of "login" property.</param>
            <returns>Login name or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.ActiveDirectory.ADUtils.GetLogin(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Returns the login name for a user.
            </summary>
            <param name="serverPath">LDAP server path (example: "jonkoping.office.se").</param>
            <param name="entryPath">Entry path (example: "CN=Domain Users,CN=Users,DC=litium,DC=se).</param>
            <param name="loginProperty">Name of "login" property.</param>
            <param name="verifyLoginName">Login name used to connect against the Active Directory.</param>
            <param name="verifyPassword">Password used to connect against the Active Directory.</param>
            <returns>Login name or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.ActiveDirectory.ADUtils.GetMemberIDs(System.String,System.String)">
            <summary>
            Returns all member IDs in a group, checked against the Active Directory.
            </summary>
            <param name="domain">Domain the entry belongs to.</param>
            <param name="entryPath">Entry path (example: "CN=Domain Users,CN=Users,DC=litium,DC=se).</param>
            <returns>All member IDs in a group.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.ActiveDirectory.ADUtils.GetMemberIDs(System.String,System.String,System.String,System.String)">
            <summary>
            Returns all member IDs in a group, checked against the Active Directory.
            </summary>
            <param name="serverPath">LDAP server path (example: "jonkoping.office.se").</param>
            <param name="entryPath">Entry path (example: "CN=Domain Users,CN=Users,DC=litium,DC=se).</param>
            <param name="verifyLoginName">Login name used to connect against the Active Directory.</param>
            <param name="verifyPassword">Password used to connect against the Active Directory.</param>
            <returns>All member IDs in a group.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.ActiveDirectory.ADUtils.GetPathFromId(System.String,System.Guid,System.String)">
            <summary>
            Builds a LDAP path for a windows identity.
            </summary>
            <param name="domain">Domain the entry belongs to.</param>
            <param name="guid">Unique identifier.</param>
            <param name="objectClass">object class to look for, "user", "contact" or "group"</param>
            <returns>LDAP path (not including protocol and server name).</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.ActiveDirectory.ADUtils.GetPathFromId(System.String,System.Guid,System.String,System.String,System.String)">
            <summary>
            Builds a LDAP path for a windows identity.
            </summary>
            <param name="serverPath">LDAP server path (example: "jonkoping.office.se").</param>
            <param name="guid">Unique identifier.</param>
            <param name="objectClass">object class to look for, "user", "contact" or "group"</param>
            <param name="verifyLoginName">Login name used to connect against the Directory.</param>
            <param name="verifyPassword">Password used to connect against the Directory.</param>
            <returns>LDAP path (not including protocol and server name).</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.ActiveDirectory.ADUtils.GetPathFromIdentity(System.Security.Principal.IIdentity)">
            <summary>
            Builds a LDAP path for a windows identity.
            </summary>
            <param name="identity">Windows identity.</param>
            <returns>LDAP path (not including protocol and server name).</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.ActiveDirectory.ADUtils.GetPathFromWindowsDomainAndLoginName(System.String,System.String)">
            <summary>
            Builds a LDAP path for a windows identity.
            </summary>
            <param name="domain">Domain the entry belongs to.</param>
            <param name="loginName">Windows user Login name (example: "henrik").</param>
            <returns>LDAP path (not including protocol and server name).</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.ActiveDirectory.ADUtils.GetGroupHierarchicalMembershipIDs(System.Security.Principal.IIdentity,System.String)">
            <summary>
            Returns the Litium Foundation ID of all registred LDAD-groups in which the LDAD-user is a member.
            </summary>
            <param name="identity">Identity.</param>
            <param name="entryPath">User entry path (example: "CN=Domain Users,CN=Users,DC=litium,DC=se).</param>
            <returns>The Litium Foundation ID of all groups in which the user is a member.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.ActiveDirectory.ADUtils.GetGroupHierarchicalMembershipIDs(System.String,System.String)">
            <summary>
            Returns the Litium Foundation ID of all registred LDAD-groups in which the LDAD-user is a member.
            </summary>
            <param name="domain">Domain the entry belongs to.</param>
            <param name="entryPath">User entry path (example: "CN=Domain Users,CN=Users,DC=litium,DC=se).</param>
            <returns>The Litium Foundation ID of all groups in which the user is a member.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.ActiveDirectory.ADUtils.BuildOctetString(System.Byte[])">
            <summary>
            Helper method to get OctetString
            </summary>
            <param name="bytes">byte array.</param>
            <returns>Octet string.</returns>
        </member>
        <member name="T:Litium.Foundation.Accounts.DirectoryUpdateException">
            <summary>
            Thrown when updates in directory fails or not allowed.
            </summary>
        </member>
        <member name="T:Litium.Foundation.FoundationException">
            <summary>
            FoundationException is the top Litium Foundation exception class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.FoundationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.FoundationException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.FoundationException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="title">Exception title.</param>
        </member>
        <member name="M:Litium.Foundation.FoundationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="title">Exception title.</param>
            <param name="e">Inner exception.</param>
        </member>
        <member name="M:Litium.Foundation.FoundationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.FoundationException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Litium.Foundation.FoundationException.GetInnerStackTraceAsCause">
            <summary>
            Returns the inner stack trace.
            </summary>
            <returns>The inner stack trace.</returns>
        </member>
        <member name="P:Litium.Foundation.FoundationException.Title">
            <summary>
            Gets the title. This is same as the <see cref="P:System.Exception.Message"/> property.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Litium.Foundation.FoundationException.StackTrace">
            <summary>
            Stacktrace.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Accounts.DirectoryUpdateException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Accounts.DirectoryUpdateException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Accounts.DirectoryUpdateException.#ctor(System.String)">
            <summary>
            Thrown when updates in directory fails or not allowed.
            </summary>
            <param name="title">Title.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.DirectoryUpdateException.#ctor(System.String,System.Exception)">
            <summary>
            Thrown when updates in directory fails or not allowed.
            </summary>
            <param name="title">Title.</param>
            <param name="e">Exception.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.DirectoryUpdateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Accounts.DirectoryUpdateException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Litium.Foundation.Accounts.MembershipDoesNotExistException">
            <summary>
            Thrown when a group membership does not exists or has been deleted.
            </summary>
        </member>
        <member name="T:Litium.Foundation.DoesNotExistException">
            <summary>
            DoesNotExistException is thrown when an item does not exist or has been deleted.
            </summary>
        </member>
        <member name="M:Litium.Foundation.DoesNotExistException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.DoesNotExistException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.DoesNotExistException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="title">Exception title.</param>
        </member>
        <member name="M:Litium.Foundation.DoesNotExistException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.DoesNotExistException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.MembershipDoesNotExistException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Accounts.MembershipDoesNotExistException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Accounts.MembershipDoesNotExistException.#ctor(System.Guid,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Accounts.MembershipDoesNotExistException"/> class.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="userID">User ID.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.MembershipDoesNotExistException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Accounts.MembershipDoesNotExistException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.MembershipDoesNotExistException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="P:Litium.Foundation.Accounts.MembershipDoesNotExistException.GroupID">
            <summary>
            Group ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.MembershipDoesNotExistException.UserID">
            <summary>
            User ID.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Accounts.MembershipExistsException">
            <summary>
            Thrown when a trying to create a group membership which already exists.
            </summary>
        </member>
        <member name="T:Litium.Foundation.ExistsException">
            <summary>
            ExistsException is thrown when trying to add or create an item which already exists.
            </summary>
        </member>
        <member name="M:Litium.Foundation.ExistsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.ExistsException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.ExistsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.ExistsException"/> class.
            </summary>
            <param name="title">Exception title.</param>
        </member>
        <member name="M:Litium.Foundation.ExistsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.ExistsException"/> class.
            </summary>
            <param name="title">Exception title.</param>
            <param name="innerException">InnerException</param>
        </member>
        <member name="M:Litium.Foundation.ExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.ExistsException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="F:Litium.Foundation.Accounts.MembershipExistsException.m_groupID">
            <summary>
            Group ID.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Accounts.MembershipExistsException.m_userID">
            <summary>
            User ID.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Accounts.MembershipExistsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Accounts.MembershipExistsException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Accounts.MembershipExistsException.#ctor(System.Guid,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Accounts.MembershipExistsException"/> class.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="userID">User ID.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.MembershipExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Accounts.MembershipExistsException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.MembershipExistsException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="P:Litium.Foundation.Accounts.MembershipExistsException.GroupID">
            <summary>
            Group ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.MembershipExistsException.UserID">
            <summary>
            User ID.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Accounts.UserStatus">
            <summary>
            User status enum.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Accounts.UserStatus.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Accounts.UserStatus.AccountIsLockedOut">
            <summary>
            Account is locked out.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Accounts.UserStatus.MustChangePasswordAtNextLogon">
            <summary>
            Must change password at next logon.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Accounts.UserStatus.PasswordNeverExpires">
            <summary>
            Password never expires.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Accounts.UserStatus.DisableChangePassword">
            <summary>
            Disable change password.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Accounts.UserStatus.DisableLockout">
            <summary>
            Disable lockout.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.LogEntryCarrier">
            <summary>
            Module panel carrier
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.BaseCarrier`1">
            <summary>
            This class represents the BaseCarrier.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.BaseCarrier`1.m_carrierState">
            <summary>
            Represents the carrier state.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.BaseCarrier`1.m_lastUpdatedDate">
            <summary>
            Represents the last updated date.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.BaseCarrier`1.m_lastUpdatedUserID">
            <summary>
            Represents the last updated user id.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.BaseCarrier`1.Clone">
            <summary>
            This method clones an item.
            </summary>
            <returns>The cloned item.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.BaseCarrier`1.System#ICloneable#Clone">
            <summary>
            Implements the <c>Clone</c> methos of the <see cref="T:System.ICloneable"/> interface to clone 
            an instance of this class.
            </summary>
            <returns>The clone of this instance.</returns>
        </member>
        <member name="P:Litium.Foundation.Carriers.BaseCarrier`1.CarrierState">
            <summary>
            Gets or sets the state of the carrier. The API will use this state information when 
            changing the data in database.
            </summary>
            <remarks>
            This property marks whether a carrier contains data which is different from its 
            underlying representation in database. 
            </remarks>
            <example>If the carrier contains data that are modified, then 
            <see 
            cref="P:Litium.Foundation.Modules.CMS.Carriers.CarrierState.IsMarkedForUpdating"/> 
            is set to true.
            </example>
            <example>If the carrier contains data that should be deleted, then 
            <see 
            cref="P:Litium.Foundation.Modules.CMS.Carriers.CarrierState.IsMarkedForDeleting"/> 
            should be set to true.</example>
        </member>
        <member name="P:Litium.Foundation.Carriers.BaseCarrier`1.LastUpdatedDate">
            <summary>
            Gets or sets the last updated date.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.BaseCarrier`1.LastUpdatedUserID">
            <summary>
            Gets or sets the last updated user ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.BaseCarrier`1.IsDirty">
            <summary>
            Check whether current carrier or subcarriers of current carrier has changed.
            </summary>
            <returns>True if current carrier or one of its subcarriers state has changed</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.LogEntryCarrier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Carriers.LogEntryCarrier"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.LogEntryCarrier.#ctor(System.Int64,System.String,System.String,System.String,System.Int16,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Carriers.LogEntryCarrier"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="title">The title.</param>
            <param name="text">The text.</param>
            <param name="webServerIP">The web server IP.</param>
            <param name="level">The level.</param>
            <param name="timeStamp">The time stamp.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.LogEntryCarrier.SetValues(System.Int64,System.String,System.String,System.String,System.Int16,System.DateTime)">
            <summary>
            Sets the values.
            </summary>
            <param name="id">The id.</param>
            <param name="title">The title.</param>
            <param name="text">The text.</param>
            <param name="webServerIP">The web server IP.</param>
            <param name="level">The level.</param>
            <param name="timeStamp">The time stamp.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.LogEntryCarrier.Clone">
            <summary>
            This method clones an item.
            </summary>
            <returns>The cloned item.</returns>
        </member>
        <member name="P:Litium.Foundation.Carriers.LogEntryCarrier.ID">
            <summary>
            Gets or sets the ID.
            </summary>
            <value>The ID.</value>
        </member>
        <member name="P:Litium.Foundation.Carriers.LogEntryCarrier.Title">
            <summary>
            Gets or sets the log title.
            </summary>
            <value>The log title.</value>
        </member>
        <member name="P:Litium.Foundation.Carriers.LogEntryCarrier.Text">
            <summary>
            Gets or sets the log text.
            </summary>
            <value>The log text.</value>
        </member>
        <member name="P:Litium.Foundation.Carriers.LogEntryCarrier.Level">
            <summary>
            Gets or sets the log level.
            </summary>
            <value>The log level.</value>
        </member>
        <member name="P:Litium.Foundation.Carriers.LogEntryCarrier.TimeStamp">
            <summary>
            Gets or sets the log time stamp.
            </summary>
            <value>The log time stamp.</value>
        </member>
        <member name="P:Litium.Foundation.Carriers.LogEntryCarrier.WebServerIP">
            <summary>
            Gets or sets the web server IP.
            </summary>
            <value>The web server IP.</value>
        </member>
        <member name="T:Litium.Foundation.ExceptionExtension">
            <summary>
            Exception extensions.
            </summary>
        </member>
        <member name="M:Litium.Foundation.ExceptionExtension.GetValue``1(System.Runtime.Serialization.SerializationInfo,System.String)">
            <summary>
            Gets the value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="info">The info.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="T:Litium.Foundation.Log.LogSortBy">
            <summary>
            Log levels. 
            </summary>
        </member>
        <member name="F:Litium.Foundation.Log.LogSortBy.TIMESTAMP">
            <summary>
            Sort by log by timestamp
            </summary>
        </member>
        <member name="F:Litium.Foundation.Log.LogSortBy.ID">
            <summary>
            Sort by log id
            </summary>
        </member>
        <member name="F:Litium.Foundation.Log.LogSortBy.WEBSERVERIP">
            <summary>
            Sort by logging webserver
            </summary>
        </member>
        <member name="F:Litium.Foundation.Log.LogSortBy.LEVEL">
            <summary>
            Sort by log level
            </summary>
        </member>
        <member name="F:Litium.Foundation.Log.LogSortBy.TITLE">
            <summary>
            Sort by log title
            </summary>
        </member>
        <member name="F:Litium.Foundation.Log.LogSortBy.TEXT">
            <summary>
            Sort by log text
            </summary>
        </member>
        <member name="T:Litium.Foundation.Log.LogEntry">
            <summary>
            Log entry in the database.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Log.LogEntry.#ctor(Litium.Foundation.Carriers.LogEntryCarrier)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Log.LogEntry"/> class.
            </summary>
            <param name="carrier">The carrier.</param>
        </member>
        <member name="P:Litium.Foundation.Log.LogEntry.ID">
            <summary>
            Gets the ID.
            </summary>
            <value>The ID.</value>
        </member>
        <member name="P:Litium.Foundation.Log.LogEntry.Title">
            <summary>
            Gets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Litium.Foundation.Log.LogEntry.Text">
            <summary>
            Gets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Litium.Foundation.Log.LogEntry.WebServerIP">
            <summary>
            Gets the web server IP.
            </summary>
            <value>The web server IP.</value>
        </member>
        <member name="P:Litium.Foundation.Log.LogEntry.TimeStamp">
            <summary>
            Gets the time stamp.
            </summary>
            <value>The time stamp.</value>
        </member>
        <member name="P:Litium.Foundation.Log.LogEntry.Level">
            <summary>
            Gets the level.
            </summary>
            <value>The level.</value>
        </member>
        <member name="T:Litium.Foundation.Modules.ModulePanel">
            <summary>
            Panels
            </summary>
        </member>
        <member name="T:Litium.Foundation.BaseEntity`1">
            <summary>
            Base class for entity objects in CMS Module.
            </summary>
            <typeparam name="T">Type of a class that implements <see cref="T:Litium.Foundation.Carriers.BaseCarrier`1"/></typeparam>
        </member>
        <member name="F:Litium.Foundation.BaseEntity`1.m_carrier">
            <summary>
            Carrier.
            </summary>
        </member>
        <member name="M:Litium.Foundation.BaseEntity`1.UpdateFromCarrier(`0,Litium.Foundation.Security.SecurityToken)">
            <summary>
            When implemented in a derived class updates the current entity with data in <paramref name="carrier"/>.
            </summary>
            <param name="carrier">Carrier which contains data.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.BaseEntity`1.Populate(`0)">
            <summary>
            When implemented in a derived class populates the entity from data from database, if <paramref name="carrier"/> is marked for updating.
            </summary>
            <param name="carrier">Carrier which contains ID to be used in populate.</param>
        </member>
        <member name="M:Litium.Foundation.BaseEntity`1.Delete(Litium.Foundation.Security.SecurityToken)">
            <summary>
            Delete method. 
            </summary>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.BaseEntity`1.SetValuesFromCarrier(`0,Litium.Foundation.Security.SecurityToken)">
            <summary>
            When implemented in a derived class, sets the values from values contained in <paramref name="carrier"/>
            </summary>
            <param name="carrier">Carrier which contians data.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="P:Litium.Foundation.BaseEntity`1.LastUpdatedDate">
            <summary>
            Last update date.
            </summary>
        </member>
        <member name="P:Litium.Foundation.BaseEntity`1.LastUpdatedUserID">
            <summary>
            Last update user id.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Modules.ModulePanel.#ctor(System.Guid,Litium.Foundation.Carriers.ModulePanelCarrier)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Modules.ModulePanel"/> class.
            </summary>
            <param name="moduleID">The module ID.</param>
            <param name="carrier">The carrier.</param>
        </member>
        <member name="M:Litium.Foundation.Modules.ModulePanel.GetAllTitles">
            <summary>
            Gets or sets the titles. Titles are language dependent. Key is the language id, value is the translated string.
            </summary>
            <value>The titles.</value>
        </member>
        <member name="M:Litium.Foundation.Modules.ModulePanel.GetTitle(System.Guid)">
            <summary>
            Gets the title.
            </summary>
            <param name="languageId">The language id.</param>
            <returns>Title if exists, otherwise empty</returns>
        </member>
        <member name="M:Litium.Foundation.Modules.ModulePanel.GetTitleWithFallbackToDefaultLanguage(System.Guid)">
            <summary>
            Gets the title. If title is empty in prefered language, dafault language is used.
            If title is empty in default language also, <see cref="P:Litium.Foundation.Modules.ModulePanel.Name"/> of add-on is returned.
            </summary>
            <param name="languageId">The language id.</param>
            <returns>Title if exists, otherwise empty</returns>
        </member>
        <member name="M:Litium.Foundation.Modules.ModulePanel.SetTile(System.String,System.Guid,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Sets the tile.
            </summary>
            <param name="title">The title.</param>
            <param name="languageId">The language id.</param>
            <param name="securityToken">The security token.</param>
        </member>
        <member name="M:Litium.Foundation.Modules.ModulePanel.SetName(System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Gets or sets the name. Name is language independent.
            </summary>
            <param name="name">The name.</param>
            <param name="securityToken">The security token.</param>
            <value>The name.</value>
        </member>
        <member name="M:Litium.Foundation.Modules.ModulePanel.SetIconPath(System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Gets or sets the icon relative path.
            </summary>
            <param name="iconPath">The icon path.</param>
            <param name="securityToken">The security token.</param>
            <value>The icon.</value>
        </member>
        <member name="M:Litium.Foundation.Modules.ModulePanel.SetContentPanelPath(System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Gets or sets the content panel relative path.
            </summary>
            <param name="contentPanelPath">The content panel path.</param>
            <param name="securityToken">The security token.</param>
            <value>The content panel.</value>
        </member>
        <member name="M:Litium.Foundation.Modules.ModulePanel.SetAdminPanelPath(System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Gets or sets the admin panel relative path.
            </summary>
            <param name="adminPanelPath">The admin panel path.</param>
            <param name="securityToken">The security token.</param>
            <value>The admin panel.</value>
        </member>
        <member name="M:Litium.Foundation.Modules.ModulePanel.SetEnabled(System.Boolean,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Gets or sets a value indicating whether this panel is enabled.
            </summary>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
            <param name="securityToken">The security token.</param>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Litium.Foundation.Modules.ModulePanel.SetTitles(Litium.Foundation.Carriers.DisplayNameTranslationsCollection,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Gets or sets the titles. Titles are language dependent. Key is the language id, value is the translated string.
            </summary>
            <param name="titles">The titles.</param>
            <param name="securityToken">The security token.</param>
            <value>The titles.</value>
        </member>
        <member name="M:Litium.Foundation.Modules.ModulePanel.SetValues(System.String,System.String,System.String,System.String,Litium.Foundation.Carriers.DisplayNameTranslationsCollection,System.Boolean,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Sets the values.
            </summary>
            <param name="name">The name.</param>
            <param name="iconPath">The icon path.</param>
            <param name="contentPanelPath">The content panel path.</param>
            <param name="adminPanelPath">The admin panel path.</param>
            <param name="titles">The titles.</param>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
            <param name="securityToken">The security token.</param>
        </member>
        <member name="M:Litium.Foundation.Modules.ModulePanel.UpdateFromCarrier(Litium.Foundation.Carriers.ModulePanelCarrier,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Updates from carrier.
            </summary>
            <param name="carrier">The base entity.</param>
            <param name="token">The token.</param>
        </member>
        <member name="M:Litium.Foundation.Modules.ModulePanel.Populate(Litium.Foundation.Carriers.ModulePanelCarrier)">
            <summary>
            Populates the specified base entity.
            </summary>
            <param name="carrier">The base entity.</param>
        </member>
        <member name="M:Litium.Foundation.Modules.ModulePanel.Delete(Litium.Foundation.Security.SecurityToken)">
            <summary>
            Delete method.
            </summary>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Modules.ModulePanel.SetValuesFromCarrier(Litium.Foundation.Carriers.ModulePanelCarrier,Litium.Foundation.Security.SecurityToken)">
            <summary>
            When implemented in a derived class, sets the values from values contained in <paramref name="carrier"/>
            </summary>
            <param name="carrier">Carrier which contians data.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Modules.ModulePanel.GetAsCarrier">
            <summary>
            Get a carrier of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Litium.Foundation.Modules.ModulePanel.ID">
            <summary>
            Gets or sets the ID.
            </summary>
            <value>The ID.</value>
        </member>
        <member name="P:Litium.Foundation.Modules.ModulePanel.Name">
            <summary>
            Gets or sets the name. Name is language independent.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Litium.Foundation.Modules.ModulePanel.IconPath">
            <summary>
            Gets or sets the icon relative path.
            </summary>
            <value>The icon.</value>
        </member>
        <member name="P:Litium.Foundation.Modules.ModulePanel.ContentPanelPath">
            <summary>
            Gets or sets the content panel relative path.
            </summary>
            <value>The content panel.</value>
        </member>
        <member name="P:Litium.Foundation.Modules.ModulePanel.AdminPanelPath">
            <summary>
            Gets or sets the admin panel relative path.
            </summary>
            <value>The admin panel.</value>
        </member>
        <member name="P:Litium.Foundation.Modules.ModulePanel.Enabled">
            <summary>
            Gets or sets a value indicating whether this panel is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Litium.Foundation.Modules.ModulePanel.Titles">
            <summary>
            Gets the titles.
            </summary>
            <value>The titles.</value>
        </member>
        <member name="T:Litium.Foundation.Modules.ModulePanelCollection">
            <summary>
            Collection class for panels
            </summary>
        </member>
        <member name="M:Litium.Foundation.Modules.ModulePanelCollection.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Modules.ModulePanelCollection"/> class.
            </summary>
            <param name="moduleID">The module ID.</param>
        </member>
        <member name="M:Litium.Foundation.Modules.ModulePanelCollection.Create(Litium.Foundation.Carriers.ModulePanelCarrier,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates the specified carrier.
            </summary>
            <param name="carrier">The carrier.</param>
            <param name="securityToken">The security token.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Modules.ModulePanelCollection.Exists(System.Guid)">
            <summary>
            Existses the specified id.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Modules.ModulePanelCollection.Exists(System.String)">
            <summary>
            Existses the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Modules.ModulePanelCollection.GetPanel(System.Guid)">
            <summary>
            Gets the specified id.
            </summary>
            <param name="id">The id.</param>
            <returns>Panels instance</returns>
            <exception cref="T:Litium.Foundation.Modules.ModulePanelDoesNotExistException">Panel does not exist.</exception>
        </member>
        <member name="M:Litium.Foundation.Modules.ModulePanelCollection.GetPanel(System.String)">
            <summary>
            Gets the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Modules.ModulePanelCollection.GetAllPanels">
            <summary>
            Gets all add ons.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Modules.ModulePanelCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Litium.Foundation.Modules.ModulePanelCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Litium.Foundation.Modules.ModulePanelCollection.Item(System.Guid)">
            <summary>
            Gets the <see cref="T:Litium.Foundation.Modules.ModulePanel"/> with the specified ID.
            </summary>
            <value></value>
        </member>
        <member name="P:Litium.Foundation.Modules.ModulePanelCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Litium.Foundation.Modules.ModulePanel"/> with the specified name.
            </summary>
            <value></value>
        </member>
        <member name="T:Litium.Foundation.Modules.ModulePanelDoesNotExistException">
            <summary>
            Panel does not exists.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Modules.ModulePanelDoesNotExistException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Modules.ModulePanelDoesNotExistException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Modules.ModulePanelDoesNotExistException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Modules.ModulePanelDoesNotExistException"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Litium.Foundation.Modules.ModulePanelDoesNotExistException.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Modules.ModulePanelDoesNotExistException"/> class.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Litium.Foundation.Modules.ModulePanelDoesNotExistException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Modules.ModulePanelDoesNotExistException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Litium.Foundation.Modules.ModulePanelExistsException">
            <summary>
            Add on Exists.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Modules.ModulePanelExistsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Modules.ModulePanelExistsException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Modules.ModulePanelExistsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Modules.ModulePanelExistsException"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Litium.Foundation.Modules.ModulePanelExistsException.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Modules.ModulePanelExistsException"/> class.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Litium.Foundation.Modules.ModulePanelExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Modules.ModulePanelExistsException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Litium.Foundation.Caching.CacheItemFetcherEnumerable`2">
            <summary>
            IEnumerable cache struct item fetcher.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TItem">The type of the item.</typeparam>
        </member>
        <member name="M:Litium.Foundation.Caching.CacheItemFetcherEnumerable`2.#ctor(Litium.Foundation.Caching.CacheItemFetcherEnumerable{`0,`1}.LoadItemDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Caching.CacheItemFetcherEnumerable`2"/> class.
            </summary>
            <param name="loadItemDelegate">The load item delegate.</param>
        </member>
        <member name="M:Litium.Foundation.Caching.CacheItemFetcherEnumerable`2.Fetch(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Fetches the specified items based on the keys.
            </summary>
            <param name="keys">The keys.</param>
            <returns></returns>
        </member>
        <member name="T:Litium.Foundation.Caching.CacheItemFetcherEnumerable`2.LoadItemDelegate">
            <summary>
            Fetcher delegare.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Caching.CacheItemFetcherSingle`2">
            <summary>
            Single cache item fetcher.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TItem">The type of the item.</typeparam>
        </member>
        <member name="M:Litium.Foundation.Caching.CacheItemFetcherSingle`2.#ctor(Litium.Foundation.Caching.CacheItemFetcherSingle{`0,`1}.LoadItemDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Caching.CacheItemFetcherSingle`2"/> class.
            </summary>
            <param name="loadItemDelegate">The load item delegate.</param>
        </member>
        <member name="M:Litium.Foundation.Caching.CacheItemFetcherSingle`2.Fetch(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Fetches the specified items based on the keys.
            </summary>
            <param name="keys">The keys.</param>
            <returns></returns>
        </member>
        <member name="T:Litium.Foundation.Caching.CacheItemFetcherSingle`2.LoadItemDelegate">
            <summary>
            Loader delegate for single items
            </summary>
        </member>
        <member name="T:Litium.Foundation.Caching.CacheItemWrapper`2">
            <summary>
            Class to wrap an <typeparamref name="TItem"/>.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TItem">The type of the item.</typeparam>
        </member>
        <member name="T:Litium.Foundation.Caching.ICacheKey">
            <summary>
            Cache key need to be implemented on classes that should use.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Caching.ICacheKey.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="M:Litium.Foundation.Caching.CacheItemWrapper`2.#ctor(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Caching.CacheItemWrapper`2"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="items">The items.</param>
        </member>
        <member name="M:Litium.Foundation.Caching.CacheItemWrapper`2.#ctor(`0,System.Collections.Generic.List{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Caching.CacheItemWrapper`2"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="items">The items.</param>
        </member>
        <member name="P:Litium.Foundation.Caching.CacheItemWrapper`2.Key">
            <summary>
            Key put together as a string.
            </summary>
            <value></value>
        </member>
        <member name="P:Litium.Foundation.Caching.CacheItemWrapper`2.Items">
            <summary>
            Gets or sets the item.
            </summary>
            <value>The item.</value>
        </member>
        <member name="T:Litium.Foundation.Caching.ContextWrappedCache`2">
            <summary>
            Cache that use the <see cref="T:System.Web.HttpContext"/> as a secondary cache.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TItem">The type of the item.</typeparam>
        </member>
        <member name="T:Litium.Foundation.Caching.Cache`2">
            <summary>
            Cache able to do sliding and absolut expirations.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TItem">The type of the item, must implement the ICacheKey interface to define what is used as key.</typeparam>
        </member>
        <member name="F:Litium.Foundation.Caching.Cache`2.m_lock">
            <summary>
            Internal lock to protect cache during population.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Caching.Cache`2.#ctor(Litium.Foundation.Caching.Cache{`0,`1}.LoadItemDelegate,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Caching.Cache`2"/> class.
            Defaults to 10000 items, scavening of 1000 if maximum is reached, pools every 60 seconds.
            </summary>
            <param name="loadItemDelegate">The load item delegate.</param>
            <param name="absoluteExpirationTimeInSeconds">The absolute expiration time in seconds.</param>
            <param name="slidingExpirationTimeInSeconds">The sliding expiration time in seconds.</param>
        </member>
        <member name="M:Litium.Foundation.Caching.Cache`2.#ctor(Litium.Foundation.Caching.Cache{`0,`1}.LoadItemDelegate,System.Int32,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Caching.Cache`2"/> class.
            </summary>
            <param name="loadItemDelegate">The load item delegate.</param>
            <param name="maximumElmentsBeforeScavenging">The maximum elments before scavenging.</param>
            <param name="numberOfElementsToRemoveWhenScavening">The number of elements to remove when scavening.</param>
            <param name="pollFrequencyInSeconds">The poll frequency in seconds.</param>
            <param name="absoluteExpirationTimeInSeconds">The absolute expiration time in seconds.</param>
            <param name="slidingExpirationTimeInSeconds">The sliding expiration time in seconds.</param>
        </member>
        <member name="M:Litium.Foundation.Caching.Cache`2.Add(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Add the items loaded outside the cache to the cache.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Litium.Foundation.Caching.Cache`2.Exists(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Exists the items for all keys, pre loads to the cache if missing and exists.
            </summary>
            <param name="keys">The keys.</param>
            <returns>
            Returns <c>true</c> if all keys exists, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Litium.Foundation.Caching.Cache`2.Populate(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Populates the cache with items that not already exists.
            </summary>
            <param name="keys">The keys.</param>
        </member>
        <member name="M:Litium.Foundation.Caching.Cache`2.TryGet(`0,`1@)">
            <summary>
            Tries the get the item.
            </summary>
            <remarks>
            	Returns an cloned copy of the item.
            </remarks>
            <param name="key">The key.</param>
            <param name="item">The item.</param>
            <returns>
            <c>true</c> if the item exists, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Litium.Foundation.Caching.Cache`2.TryGetRaw(`0,`1@)">
            <summary>
            Tries to get the raw item.
            </summary>
            <remarks>
            Returns item that exists in the cache and should not be exposed outside the cache without cloning the item.
            </remarks>
            <param name="key">The key.</param>
            <param name="item">The item.</param>
            <returns>
            <c>true</c> if the item exists, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Litium.Foundation.Caching.Cache`2.Get(`0)">
            <summary>
            Gets the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Caching.Cache`2.Get(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Get all the specified keys.
            </summary>
            <param name="keys">The keys.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Caching.Cache`2.Remove(`0)">
            <summary>
            Removes the specified item from the cache.
            </summary>
            <param name="key">The key to the item.</param>
        </member>
        <member name="M:Litium.Foundation.Caching.Cache`2.Flush">
            <summary>
            Flushes this cache from items.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Caching.Cache`2.Clear">
            <summary>
            Clears this cache.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Caching.Cache`2.Litium#Framework#Cache#ICacheBaseSetting#AbsoluteExpirationTime">
            <summary>
            Gets the absolute expiration time.
            </summary>
            <value>The absolute expiration time.</value>
        </member>
        <member name="P:Litium.Foundation.Caching.Cache`2.Litium#Framework#Cache#ICacheBaseSetting#SlidingExpirationTime">
            <summary>
            The sliding expiration time for cache items.
            </summary>
            <value></value>
        </member>
        <member name="P:Litium.Foundation.Caching.Cache`2.Litium#Framework#Cache#ICacheBaseSetting#ExpirationTime">
            <summary>
            The expiration time for cache items.
            </summary>
            <value></value>
        </member>
        <member name="P:Litium.Foundation.Caching.Cache`2.Litium#Framework#Cache#ICacheBaseSetting#ManagerName">
            <summary>
            Name of the cache manager.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Caching.Cache`2.Count">
            <summary>
            Gets the count of items in the cache.
            </summary>
            <value>The count.</value>
        </member>
        <member name="T:Litium.Foundation.Caching.Cache`2.LoadItemDelegate">
            <summary>
            Delegate to fetch new items into cache.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Caching.ContextWrappedCache`2.#ctor(Litium.Foundation.Caching.Cache{`0,`1}.LoadItemDelegate,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Caching.ContextWrappedCache`2"/> class.
            </summary>
            <param name="loadItemDelegate">The load item delegate.</param>
            <param name="absoluteExpirationTimeInSeconds">The absolute expiration time in seconds.</param>
            <param name="slidingExpirationTimeInSeconds">The sliding expiration time in seconds.</param>
        </member>
        <member name="M:Litium.Foundation.Caching.ContextWrappedCache`2.#ctor(Litium.Foundation.Caching.Cache{`0,`1}.LoadItemDelegate,System.Int32,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Caching.ContextWrappedCache`2"/> class.
            </summary>
            <param name="loadItemDelegate">The load item delegate.</param>
            <param name="maximumElmentsBeforeScavenging">The maximum elments before scavenging.</param>
            <param name="numberOfElementsToRemoveWhenScavening">The number of elements to remove when scavening.</param>
            <param name="pollFrequencyInSeconds">The poll frequency in seconds.</param>
            <param name="absoluteExpirationTimeInSeconds">The absolute expiration time in seconds.</param>
            <param name="slidingExpirationTimeInSeconds">The sliding expiration time in seconds.</param>
        </member>
        <member name="M:Litium.Foundation.Caching.ContextWrappedCache`2.Clear">
            <summary>
            Clear the chache.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Caching.ContextWrappedCache`2.Remove(`0)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Litium.Foundation.Caching.ContextWrappedCache`2.TryGet(`0,`1@)">
            <summary>
            Tries the get.
            </summary>
            <param name="key">The key.</param>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Caching.GroupCache.GetGroup(System.Guid)">
            <summary>
            Gets the group.
            </summary>
            <param name="groupID">The group ID.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Caching.GroupCache.GetGroupByName(System.String)">
            <summary>
            Gets the group by name.
            </summary>
            <param name="groupname">The groupname.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Caching.UserCache.GetUser(System.Guid)">
            <summary>
            Gets the user.
            </summary>
            <param name="userID">The user ID.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Caching.UserCache.GetUserByUsername(System.String)">
            <summary>
            Gets the user by username.
            </summary>
            <param name="username">The username.</param>
            <returns></returns>
        </member>
        <member name="T:Litium.Foundation.Carriers.DisplayNameTranslationsCollection">
            <summary>
            Dictionary to keep display names. Key is the language Id and string is the value in that language.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.DisplayNameTranslationsCollection.m_titles">
            <summary>
            Internal collection of titles.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.DisplayNameTranslationsCollection.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.DisplayNameTranslationsCollection.Add(System.Guid,System.String)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:Litium.Foundation.Carriers.DisplayNameTranslationsCollection.ContainsKey(System.Guid)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:Litium.Foundation.Carriers.DisplayNameTranslationsCollection.Remove(System.Guid)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:Litium.Foundation.Carriers.DisplayNameTranslationsCollection.TryGetValue(System.Guid,System.String@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:Litium.Foundation.Carriers.DisplayNameTranslationsCollection.Add(System.Collections.Generic.KeyValuePair{System.Guid,System.String})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Litium.Foundation.Carriers.DisplayNameTranslationsCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Litium.Foundation.Carriers.DisplayNameTranslationsCollection.Contains(System.Collections.Generic.KeyValuePair{System.Guid,System.String})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.DisplayNameTranslationsCollection.CopyTo(System.Collections.Generic.KeyValuePair{System.Guid,System.String}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            -or-
            Type <see cref="T:System.Collections.Generic.KeyValuePair`1"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Litium.Foundation.Carriers.DisplayNameTranslationsCollection.Remove(System.Collections.Generic.KeyValuePair{System.Guid,System.String})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Litium.Foundation.Carriers.DisplayNameTranslationsCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.DisplayNameTranslationsCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.DisplayNameTranslationsCollection.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.DisplayNameTranslationsCollection.ToArray">
            <summary>
            Converts the internal values to an array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.DisplayNameTranslationsCollection.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.DisplayNameTranslationsCollection.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.DisplayNameTranslationsCollection.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.DisplayNameTranslationsCollection.op_Explicit(Litium.Foundation.Carriers.DisplayNameTranslationsCollection)~System.Data.SqlTypes.SqlXml">
            <summary>
            Performs an explicit conversion from <see cref="T:Litium.Foundation.Carriers.DisplayNameTranslationsCollection"/> to <see cref="T:System.Data.SqlTypes.SqlXml"/>.
            </summary>
            <param name="item">The item.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.DisplayNameTranslationsCollection.op_Explicit(System.Collections.Generic.Dictionary{System.Guid,System.String})~Litium.Foundation.Carriers.DisplayNameTranslationsCollection">
            <summary>
            Performs an explicit conversion from dictionary to <see cref="T:Litium.Foundation.Carriers.DisplayNameTranslationsCollection"/>.
            </summary>
            <param name="displayNames">The display names.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="P:Litium.Foundation.Carriers.DisplayNameTranslationsCollection.IsDirty">
            <summary>
            Gets or sets a value indicating whether this instance is dirty.
            </summary>
            <value><c>true</c> if this instance is dirty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Litium.Foundation.Carriers.DisplayNameTranslationsCollection.InnerDictionary">
            <summary>
            Gets or sets the inner dictionary.
            </summary>
            <value>The inner dictionary.</value>
        </member>
        <member name="P:Litium.Foundation.Carriers.DisplayNameTranslationsCollection.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value></value>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:Litium.Foundation.Carriers.DisplayNameTranslationsCollection.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value></value>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:Litium.Foundation.Carriers.DisplayNameTranslationsCollection.Item(System.Guid)">
            <summary>
            Gets or sets the <see cref="T:System.String"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:Litium.Foundation.Carriers.DisplayNameTranslationsCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:Litium.Foundation.Carriers.DisplayNameTranslationsCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="T:Litium.Foundation.Caching.CacheKey">
            <summary>
            String key of object.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Caching.CacheKey.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Caching.CacheKey"/> class.
            </summary>
            <param name="obj">The obj.</param>
        </member>
        <member name="M:Litium.Foundation.Caching.CacheKey.#ctor(Litium.Foundation.Caching.ICacheKey)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Caching.CacheKey"/> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Litium.Foundation.Caching.CacheKey.#ctor(Litium.Framework.Cache.ICacheKey)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Caching.CacheKey"/> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Litium.Foundation.Caching.CacheKey.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Caching.CacheKey"/> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="P:Litium.Foundation.Caching.CacheKey.Key">
            <summary>
            Key put together as a string.
            </summary>
            <value></value>
        </member>
        <member name="T:Litium.Foundation.Carriers.ModulePanelCarrier">
            <summary>
            Module panel carrier
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.ModulePanelCarrier.SetValues(System.Guid,System.String,System.String,System.String,System.String,Litium.Foundation.Carriers.DisplayNameTranslationsCollection,System.Boolean)">
            <summary>
            Sets the values.
            </summary>
            <param name="id">The id.</param>
            <param name="name">The name.</param>
            <param name="iconPath">The icon path.</param>
            <param name="contentPanelPath">The content panel path.</param>
            <param name="adminPanelPath">The admin panel path.</param>
            <param name="titles">The titles.</param>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.ModulePanelCarrier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Carriers.ModulePanelCarrier"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.ModulePanelCarrier.#ctor(System.String,System.String,System.String,System.String,Litium.Foundation.Carriers.DisplayNameTranslationsCollection,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Carriers.ModulePanelCarrier"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="iconPath">The icon path.</param>
            <param name="contentPanelPath">The content panel path.</param>
            <param name="adminPanelPath">The admin panel path.</param>
            <param name="titles">The titles.</param>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.ModulePanelCarrier.#ctor(System.Guid,System.String,System.String,System.String,System.String,Litium.Foundation.Carriers.DisplayNameTranslationsCollection,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Carriers.ModulePanelCarrier"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="name">The name.</param>
            <param name="iconPath">The icon path.</param>
            <param name="contentPanelPath">The content panel path.</param>
            <param name="adminPanelPath">The admin panel path.</param>
            <param name="titles">The titles.</param>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.ModulePanelCarrier.Clone">
            <summary>
            This method clones an item.
            </summary>
            <returns>The cloned item.</returns>
        </member>
        <member name="P:Litium.Foundation.Carriers.ModulePanelCarrier.ID">
            <summary>
            Gets or sets the ID.
            </summary>
            <value>The ID.</value>
        </member>
        <member name="P:Litium.Foundation.Carriers.ModulePanelCarrier.Name">
            <summary>
            Gets or sets the name. Name is language independent.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Litium.Foundation.Carriers.ModulePanelCarrier.IconPath">
            <summary>
            Gets or sets the icon relative path.
            </summary>
            <value>The icon.</value>
        </member>
        <member name="P:Litium.Foundation.Carriers.ModulePanelCarrier.ContentPanelPath">
            <summary>
            Gets or sets the content panel relative path.
            </summary>
            <value>The content panel.</value>
        </member>
        <member name="P:Litium.Foundation.Carriers.ModulePanelCarrier.AdminPanelPath">
            <summary>
            Gets or sets the admin panel relative path.
            </summary>
            <value>The admin panel.</value>
        </member>
        <member name="P:Litium.Foundation.Carriers.ModulePanelCarrier.Enabled">
            <summary>
            Gets or sets a value indicating whether this panel is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Litium.Foundation.Carriers.ModulePanelCarrier.Titles">
            <summary>
            Gets or sets the titles. Titles are language dependent. Key is the language id, value is the translated string.
            </summary>
            <value>The titles.</value>
        </member>
        <member name="P:Litium.Foundation.Carriers.ModulePanelCarrier.IsDirty">
            <summary>
            Check whether current carrier or subcarriers of current carrier has changed.
            </summary>
            <value></value>
            <returns>True if current carrier or one of its subcarriers state has changed</returns>
        </member>
        <member name="T:Litium.Foundation.Carriers.CarrierState">
            <summary>
            Represents the state of the carrier. State properties are automatically set by the API.
            </summary>
            <remarks>
            State properties are automatically set by the API.
            If the changes in the carrier need to be stored in the database, set IsMarkedForUpdating 
            to true.
            If the carrier needs to be deleted from the database, set IsMarkedForDeleting to true.
            </remarks>
        </member>
        <member name="F:Litium.Foundation.Carriers.CarrierState.m_isMarkedForCreating">
            <summary>
            Represents a value indicating whether to create object in database or not.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.CarrierState.m_isMarkedForDeleting">
            <summary>
            Represents a value indicating whether to delete the object from the database or not.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.CarrierState.m_isMarkedForUpdating">
            <summary>
            Represents a value indicating whether to update object changes in database or not.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.CarrierState.Clone">
            <summary>
            Makes a deep copy of the current object.
            </summary>
            <returns>Returns a copy of the current object, using deep copy.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.CarrierState.MarkAsNotModified">
            <summary>
            Set the updated and deleted state to false.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.CarrierState.IsMarkedForCreating">
            <summary>
            Gets or sets the value indicating whether to create or not.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.CarrierState.IsMarkedForDeleting">
            <summary>
            Gets or sets the value indicating whether to delete or not.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.CarrierState.IsMarkedForUpdating">
            <summary>
            Gets or sets the value indicating whether to update or not.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.CarrierState.IsDirty">
            <summary>
            Gets a value indicating whether this instance is dirty.
            </summary>
            <value><c>true</c> if this instance is dirty; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Litium.Foundation.Carriers.CarrierState.HasSubcarriersChangedHandler">
            <summary>
            delegate to check whether subcarriers has changed.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.CurrencyCarrier">
            <summary>
            This class represents the currency carrier. 
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.CurrencyCarrier.ATTRIBUTE_CODE">
            <summary>
            Currency attribute code
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.CurrencyCarrier.ATTRIBUTE_EXCHANGE_RATE">
            <summary>
            Currency attribute exchange rate
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.CurrencyCarrier.ATTRIBUTE_ID">
            <summary>
            Currency attribute ID
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.CurrencyCarrier.ATTRIBUTE_IS_BASE_CURRENCY">
            <summary>
            Currency attribute is default language
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.CurrencyCarrier.ATTRIBUTE_LAST_UPDATED_DATE">
            <summary>
            Currency attribute last updated date
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.CurrencyCarrier.ATTRIBUTE_LAST_UPDATED_USER">
            <summary>
            Currency attribute last updated user
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.CurrencyCarrier.ATTRIBUTE_TEXT_FORMAT">
            <summary>
            Currency attribute text format
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.CurrencyCarrier.ELEMENT_NAME">
            <summary>
            Currency element name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.CurrencyCarrier.m_code">
            <summary>
            Represents the code. 
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.CurrencyCarrier.m_exchangeRate">
            <summary>
            Represents the exchange rate.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.CurrencyCarrier.m_ID">
            <summary>
            Represents the ID.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.CurrencyCarrier.m_isBaseCurrency">
            <summary>
            Represents the value indicating if base currency is used.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.CurrencyCarrier.m_lastUpdatedDate">
            <summary>
            Represents the last updated date.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.CurrencyCarrier.m_lastUpdatedUserID">
            <summary>
            Represents the last updated user id.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.CurrencyCarrier.m_textFormat">
            <summary>
            Represents the text format. 
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.CurrencyCarrier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Carriers.CurrencyCarrier"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.CurrencyCarrier.#ctor(System.String,System.Guid,System.Decimal,System.Boolean,System.String,System.DateTime,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Carriers.CurrencyCarrier"/> class usin the
            parameters supplied. 
            </summary>
            <param name="currencyCode">The currency code.</param>
            <param name="currencyID">The currency ID.</param>
            <param name="exchangeRate">The exchange rate.</param>
            <param name="isBaseCurrency">If set to <c>true</c> [is base currency].</param>
            <param name="textFormat">The text format.</param>
            <param name="lastUpdateDate">The last update date.</param>
            <param name="lastUpdateUserID">The user that did last update.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.CurrencyCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.CurrencyCarrier.Clone">
            <summary>
            Returns a clone of the carrier.
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.CurrencyCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.CurrencyCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier ax an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml element.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.CurrencyCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.CurrencyCarrier.SetValues(System.String,System.Guid,System.Decimal,System.Boolean,System.String,System.DateTime,System.Guid)">
            <summary>
            Sets the values.
            </summary>
            <param name="currencyCode">The currency code.</param>
            <param name="currencyID">The currency ID.</param>
            <param name="exchangeRate">The exchange rate.</param>
            <param name="isBaseCurrency">If set to <c>true</c> [is base currency].</param>
            <param name="textFormat">The text format.</param>
            <param name="lastUpdateTime">The last update date.</param>
            <param name="lastUpdateUserID">The user that did last update.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.CurrencyCarrier.Code">
            <summary>
            Gets or sets the currency code.
            </summary>
            <value>The currency code.</value>
        </member>
        <member name="P:Litium.Foundation.Carriers.CurrencyCarrier.ExchangeRate">
            <summary>
            Gets or sets the exchange rate.
            </summary>
            <value>The exchange rate.</value>
        </member>
        <member name="P:Litium.Foundation.Carriers.CurrencyCarrier.ID">
            <summary>
            Gets or sets the currency ID.
            </summary>
            <value>The currency ID.</value>
        </member>
        <member name="P:Litium.Foundation.Carriers.CurrencyCarrier.IsBaseCurrency">
            <summary>
            Gets or sets a value indicating whether this instance is base currency.
            </summary>
            <value>
            <c>true</c> if this instance is base currency; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Litium.Foundation.Carriers.CurrencyCarrier.LastUpdatedDate">
            <summary>
            Gets or sets the last updated date.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.CurrencyCarrier.LastUpdatedUserID">
            <summary>
            Gets or sets the last updated user ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.CurrencyCarrier.TextFormat">
            <summary>
            Gets or sets the text format.
            </summary>
            <value>The text format.</value>
        </member>
        <member name="T:Litium.Foundation.Carriers.DeletedGroupCarrier">
            <summary>
            The DeletedUserCarrier describes a deleted user.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.DeletedGroupCarrier.ATTRIBUTE_DELETED_DATE">
            <summary>
            XML Constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.DeletedGroupCarrier.ATTRIBUTE_ID">
            <summary>
            XML Constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.DeletedGroupCarrier.ATTRIBUTE_LOGIN_NAME">
            <summary>
            XML Constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.DeletedGroupCarrier.ELEMENT_NAME">
            <summary>
            XML Constant.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.DeletedGroupCarrier.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.DeletedGroupCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor.
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.DeletedGroupCarrier.#ctor(System.Guid,System.String,System.DateTime)">
            <summary>
            Constructor.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="loginName">Login name.</param>
            <param name="deletedDate">Deleted date.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.DeletedGroupCarrier.Clone">
            <summary>
            Returns a clone of the carrier.
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.DeletedGroupCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.DeletedGroupCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier ax an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml element.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.DeletedGroupCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.DeletedGroupCarrier.SetValues(System.Guid,System.String,System.DateTime)">
            <summary>
            Set carrier values.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="loginName">Login name.</param>
            <param name="deletedDate">Deleted date.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.DeletedGroupCarrier.DeletedDate">
            <summary>
            Deleted date.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.DeletedGroupCarrier.ID">
            <summary>
            Group ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.DeletedGroupCarrier.LoginName">
            <summary>
            Login name.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.StorageItemDeletedEventCarrier">
            <summary>
            StorageItemDeletedEventCarrier represents a module created event.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.EventCarrier">
            <summary>
            EventCarrier represents the abstract base class for database events.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.EventCarrier.ATTRIBUTE_EVENT_ID">
            <summary>
            XML Constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.EventCarrier.ATTRIBUTE_TIME_STAMP">
            <summary>
            XML Constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.EventCarrier.m_eventID">
            <summary>
            Event ID.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.EventCarrier.m_timeStamp">
            <summary>
            Timestamp.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.EventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.EventCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Load from xml element.
            </summary>
            <param name="xmlDoc">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.EventCarrier.GetAsXmlElement(System.Xml.XmlDocument,System.String)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <param name="elementName">Element name.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.EventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.EventCarrier.SetValues(System.Int64,System.DateTime)">
            <summary>
            Set carrier values.
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Time stamp.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.EventCarrier.EventName">
            <summary>
            Returns the event name.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.EventCarrier.EventID">
            <summary>
            Event ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.EventCarrier.TimeStamp">
            <summary>
            Time stamp.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.StorageItemDeletedEventCarrier.ATTRIBUTE_STORAGE_PATH">
            <summary>
            Attribute for moduleID
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.StorageItemDeletedEventCarrier.ELEMENT_NAME">
            <summary>
            Elementname for created event
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.StorageItemDeletedEventCarrier.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.StorageItemDeletedEventCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor.
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.StorageItemDeletedEventCarrier.#ctor(System.Int64,System.DateTime,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
            <param name="storagePath">The storage path.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.StorageItemDeletedEventCarrier.Clone">
            <summary>
            Returns a clone of the carrier.
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.StorageItemDeletedEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.StorageItemDeletedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.StorageItemDeletedEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.StorageItemDeletedEventCarrier.EventName">
            <summary>
            Returns the event name.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.StorageItemDeletedEventCarrier.StoragePath">
            <summary>
            Gets or sets the storage path.
            </summary>
            <value>The storage path.</value>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.CurrencyDeletedEventCarrier">
            <summary>
            CurrencyDeletedEventCarrier represents a currency deleted event.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.CurrencyEventCarrier">
            <summary>
            LanguageEventCarrier represents a language event.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.CurrencyEventCarrier.ATTRIBUTE_CURRENCY">
            <summary>
            Currency attribute name
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.CurrencyEventCarrier.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.CurrencyEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.CurrencyEventCarrier.GetAsXmlElement(System.Xml.XmlDocument,System.String)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <param name="elementName">Element name.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.CurrencyEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.CurrencyEventCarrier.SetValues(System.Int64,System.DateTime,System.Guid)">
            <summary>
            Set carrier values
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Time stamp.</param>
            <param name="currency">Currency.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.CurrencyEventCarrier.CurrencyID">
            <summary>
            Gets or sets the Currency.
            </summary>
            <value>The currency.</value>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.CurrencyDeletedEventCarrier.ELEMENT_NAME">
            <summary>
            Spelling dictionary deleted event element name
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.CurrencyDeletedEventCarrier.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.CurrencyDeletedEventCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.CurrencyDeletedEventCarrier.#ctor(System.Int64,System.DateTime,System.Guid)">
            <summary>
            Constructor
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
            <param name="currency">Currency.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.CurrencyDeletedEventCarrier.Clone">
            <summary>
            Returns a clone of the carrier
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.CurrencyDeletedEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.CurrencyDeletedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.CurrencyDeletedEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.CurrencyDeletedEventCarrier.EventName">
            <summary>
            Returns the event name
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.CurrencyUpdatedEventCarrier">
            <summary>
            CurrencyUpdatedEventCarrier represents a currency updated event.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.CurrencyUpdatedEventCarrier.ELEMENT_NAME">
            <summary>
            Currency updated event element name
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.CurrencyUpdatedEventCarrier.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.CurrencyUpdatedEventCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.CurrencyUpdatedEventCarrier.#ctor(System.Int64,System.DateTime,System.Guid)">
            <summary>
            Constructor
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
            <param name="currency">Currency.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.CurrencyUpdatedEventCarrier.Clone">
            <summary>
            Returns a clone of the carrier
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.CurrencyUpdatedEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.CurrencyUpdatedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.CurrencyUpdatedEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.CurrencyUpdatedEventCarrier.EventName">
            <summary>
            Returns the event name
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.CurrencyCreatedEventCarrier">
            <summary>
            CurrencyCreatedEventCarrier represents a currency created event.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.CurrencyCreatedEventCarrier.ELEMENT_NAME">
            <summary>
            Spelling dictionary created event element name
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.CurrencyCreatedEventCarrier.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.CurrencyCreatedEventCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.CurrencyCreatedEventCarrier.#ctor(System.Int64,System.DateTime,System.Guid)">
            <summary>
            Constructor
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
            <param name="currency">Language.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.CurrencyCreatedEventCarrier.Clone">
            <summary>
            Returns a clone of the carrier
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.CurrencyCreatedEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.CurrencyCreatedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.CurrencyCreatedEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.CurrencyCreatedEventCarrier.EventName">
            <summary>
            Returns the event name
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.UserLoggedInEventCarrier">
            <summary>
            UserLoggedEventCarrier represents a user logged in event.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.UserEventCarrier">
            <summary>
            UserEventCarrier represents a user event.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.UserEventCarrier.ATTRIBUTE_USER_ID">
            <summary>
            User ID attribute name
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserEventCarrier.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserEventCarrier.GetAsXmlElement(System.Xml.XmlDocument,System.String)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <param name="elementName">Element name.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserEventCarrier.SetValues(System.Int64,System.DateTime,System.Guid)">
            <summary>
            Set carrier values.
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Time stamp.</param>
            <param name="userID">User ID.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.UserEventCarrier.UserID">
            <summary>
            User ID.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.UserLoggedInEventCarrier.ELEMENT_NAME">
            <summary>
            Xmlcarrier element name
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserLoggedInEventCarrier.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserLoggedInEventCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserLoggedInEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Sealed load.
            </summary>
            <param name="element">Element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserLoggedInEventCarrier.#ctor(System.Int64,System.DateTime,System.Guid)">
            <summary>
            Constructor
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
            <param name="userID">User ID.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserLoggedInEventCarrier.Clone">
            <summary>
            Returns a clone of the carrier
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserLoggedInEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserLoggedInEventCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.UserLoggedInEventCarrier.EventName">
            <summary>
            Returns the event name
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.UserLoggedOutEventCarrier">
            <summary>
            UserLoggedEventCarrier represents a user logged out event.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.UserLoggedOutEventCarrier.ELEMENT_NAME">
            <summary>
            Xmlcarrier element name
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserLoggedOutEventCarrier.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserLoggedOutEventCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserLoggedOutEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Sealed load.
            </summary>
            <param name="element">Element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserLoggedOutEventCarrier.#ctor(System.Int64,System.DateTime,System.Guid)">
            <summary>
            Constructor
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
            <param name="userID">User ID.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserLoggedOutEventCarrier.Clone">
            <summary>
            Returns a clone of the carrier
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserLoggedOutEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserLoggedOutEventCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.UserLoggedOutEventCarrier.EventName">
            <summary>
            Returns the event name
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.IncompleteCarrierException">
            <summary>
            Exceptions for incomplete carriers.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.IncompleteCarrierException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Carriers.IncompleteCarrierException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.IncompleteCarrierException.#ctor(System.String)">
            <summary>
            Iniatializes a new instance of the <see cref="T:Litium.Foundation.Carriers.IncompleteCarrierException"/>
            class.
            </summary>
            <param name="title">Error title.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.IncompleteCarrierException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Carriers.IncompleteCarrierException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Litium.Foundation.Carriers.InconsistentCarrierException">
            <summary>
            Exceptions for inconsistent carriers.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.InconsistentCarrierException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Carriers.InconsistentCarrierException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.InconsistentCarrierException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Carriers.InconsistentCarrierException"/> class.
            </summary>
            <param name="title">Error title.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.InconsistentCarrierException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Carriers.InconsistentCarrierException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Litium.Foundation.Carriers.SpellingDictionaryCarrier">
            <summary>
            Spelling dictionary carrier
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.SpellingDictionaryCarrier.ELEMENT_AFFIX">
            <summary>
            Affix element name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.SpellingDictionaryCarrier.ELEMENT_NAME">
            <summary>
            Name element name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.SpellingDictionaryCarrier.ELEMENT_PHONETIC">
            <summary>
            Phonetic element name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.SpellingDictionaryCarrier.ELEMENT_WORDS">
            <summary>
            Words element name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.SpellingDictionaryCarrier.ATTRIBUTE_LANGUAGE">
            <summary>
            Language attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.SpellingDictionaryCarrier.ATTRIBUTE_USER_ID">
            <summary>
            User ID attribute
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.SpellingDictionaryCarrier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Carriers.SpellingDictionaryCarrier"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.SpellingDictionaryCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Carriers.SpellingDictionaryCarrier"/> class.
            </summary>
            <param name="xmlDocument">The XML document.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.SpellingDictionaryCarrier.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Carriers.SpellingDictionaryCarrier"/> class.
            </summary>
            <param name="xmlElement">The XML element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.SpellingDictionaryCarrier.#ctor(System.String,System.Guid,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Carriers.SpellingDictionaryCarrier"/> class.
            </summary>
            <param name="language">The language.</param>
            <param name="userID">The user ID.</param>
            <param name="words">The words.</param>
            <param name="affix">The affix.</param>
            <param name="phonetic">The phonetic.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.SpellingDictionaryCarrier.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.SpellingDictionaryCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.SpellingDictionaryCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier ax an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml element.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.SpellingDictionaryCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Loads the specified XML element.
            </summary>
            <param name="xmlElement">The XML element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.SpellingDictionaryCarrier.SetValues(System.String,System.Guid,System.String,System.String,System.String)">
            <summary>
            Sets the values.
            </summary>
            <param name="language">The language.</param>
            <param name="userID">The user ID.</param>
            <param name="words">The words.</param>
            <param name="affix">The affix.</param>
            <param name="phonetic">The phonetic.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.SpellingDictionaryCarrier.Affix">
            <summary>
            Gets or sets the affix.
            </summary>
            <value>The affix.</value>
        </member>
        <member name="P:Litium.Foundation.Carriers.SpellingDictionaryCarrier.Words">
            <summary>
            Gets or sets the words.
            </summary>
            <value>The words.</value>
        </member>
        <member name="P:Litium.Foundation.Carriers.SpellingDictionaryCarrier.Language">
            <summary>
            Gets or sets the language.
            </summary>
            <value>The language.</value>
        </member>
        <member name="P:Litium.Foundation.Carriers.SpellingDictionaryCarrier.Phonetic">
            <summary>
            Gets or sets the phonetic.
            </summary>
            <value>The phonetic.</value>
        </member>
        <member name="P:Litium.Foundation.Carriers.SpellingDictionaryCarrier.UserID">
            <summary>
            Gets or sets the user ID.
            </summary>
            <value>The user ID.</value>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.SpellingDictionaryUpdatedEventCarrier">
            <summary>
            SpellingDictionaryCreatedEventCarrier represents a spellingdictionary created event.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.SpellingDictionaryEventCarrier">
            <summary>
            LanguageEventCarrier represents a language event.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.SpellingDictionaryEventCarrier.ATTRIBUTE_LANGUAGE">
            <summary>
            Language attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.SpellingDictionaryEventCarrier.ATTRIBUTE_USER_ID">
            <summary>
            User ID attribute name
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SpellingDictionaryEventCarrier.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SpellingDictionaryEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SpellingDictionaryEventCarrier.GetAsXmlElement(System.Xml.XmlDocument,System.String)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <param name="elementName">Element name.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SpellingDictionaryEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SpellingDictionaryEventCarrier.SetValues(System.Int64,System.DateTime,System.String,System.Guid)">
            <summary>
            Set carrier values
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Time stamp.</param>
            <param name="language">Language.</param>
            <param name="userID">User ID.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.SpellingDictionaryEventCarrier.Language">
            <summary>
            Gets or sets the language.
            </summary>
            <value>The language.</value>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.SpellingDictionaryEventCarrier.UserID">
            <summary>
            Gets or sets the user ID.
            </summary>
            <value>The user ID.</value>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.SpellingDictionaryUpdatedEventCarrier.ELEMENT_NAME">
            <summary>
            Spelling dctionary updated event element name
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SpellingDictionaryUpdatedEventCarrier.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SpellingDictionaryUpdatedEventCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SpellingDictionaryUpdatedEventCarrier.#ctor(System.Int64,System.DateTime,System.String,System.Guid)">
            <summary>
            Constructor
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
            <param name="language">Language.</param>
            <param name="userID">User ID.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SpellingDictionaryUpdatedEventCarrier.Clone">
            <summary>
            Returns a clone of the carrier
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SpellingDictionaryUpdatedEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SpellingDictionaryUpdatedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SpellingDictionaryUpdatedEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.SpellingDictionaryUpdatedEventCarrier.EventName">
            <summary>
            Returns the event name
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.SpellingDictionaryDeletedEventCarrier">
            <summary>
            SpellingDictionaryCreatedEventCarrier represents a spellingdictionary created event.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.SpellingDictionaryDeletedEventCarrier.ELEMENT_NAME">
            <summary>
            Spelling dictionary deleted event element name
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SpellingDictionaryDeletedEventCarrier.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SpellingDictionaryDeletedEventCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SpellingDictionaryDeletedEventCarrier.#ctor(System.Int64,System.DateTime,System.String,System.Guid)">
            <summary>
            Constructor
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
            <param name="language">Language.</param>
            <param name="userID">User ID.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SpellingDictionaryDeletedEventCarrier.Clone">
            <summary>
            Returns a clone of the carrier
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SpellingDictionaryDeletedEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SpellingDictionaryDeletedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SpellingDictionaryDeletedEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.SpellingDictionaryDeletedEventCarrier.EventName">
            <summary>
            Returns the event name
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.SpellingDictionaryCreatedEventCarrier">
            <summary>
            SpellingDictionaryCreatedEventCarrier represents a spellingdictionary created event.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.SpellingDictionaryCreatedEventCarrier.ELEMENT_NAME">
            <summary>
            Spelling dictionary created event element name
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SpellingDictionaryCreatedEventCarrier.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SpellingDictionaryCreatedEventCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SpellingDictionaryCreatedEventCarrier.#ctor(System.Int64,System.DateTime,System.String,System.Guid)">
            <summary>
            Constructor
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
            <param name="language">Language.</param>
            <param name="userID">User ID.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SpellingDictionaryCreatedEventCarrier.Clone">
            <summary>
            Returns a clone of the carrier
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SpellingDictionaryCreatedEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SpellingDictionaryCreatedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SpellingDictionaryCreatedEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.SpellingDictionaryCreatedEventCarrier.EventName">
            <summary>
            Returns the event name
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.SystemStringCollectionCarrier">
            <summary>
            The SystemStringCollectionCarrier describes a collection of SystemStringCarriers.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.SystemStringCollectionCarrier.ELEMENT_NAME">
            <summary>
            XmlCarrier element name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.SystemStringCollectionCarrier.ELEMENT_STRINGS">
            <summary>
            Strings element name
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.SystemStringCollectionCarrier.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.SystemStringCollectionCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor.
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.SystemStringCollectionCarrier.#ctor(System.Guid,System.Xml.XmlDocument)">
            <summary>
            Constructor.
            </summary>
            <param name="xml">Xml data (Key/Value xml that not contain languageID).</param>
            <param name="languageID">Language ID.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.SystemStringCollectionCarrier.#ctor(Litium.Foundation.Carriers.SystemStringCarrier[])">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Carriers.SystemStringCollectionCarrier"/> class.
            </summary>
            <param name="systemStringCarriers">The system string carriers.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.SystemStringCollectionCarrier.Clone">
            <summary>
            Returns a clone of the carrier.
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.SystemStringCollectionCarrier.GetAsXml">
            <summary>
            Returns the carrier as an XML document
            </summary>
            <returns>The requested XML document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.SystemStringCollectionCarrier.GetAsXmlKeyValue">
            <summary>
            Returns the carrier as an XML document
            </summary>
            <returns>The requested XML document.</returns>
            <remarks>Returns only the key and value attributes of the subcarriers.</remarks>
        </member>
        <member name="M:Litium.Foundation.Carriers.SystemStringCollectionCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml element.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.SystemStringCollectionCarrier.GetAsXmlElementKeyValue(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml element.</returns>
            <remarks>Includes only the subcarriers key and value as attributes.</remarks>
        </member>
        <member name="M:Litium.Foundation.Carriers.SystemStringCollectionCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.SystemStringCollectionCarrier.Load(System.Guid,System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element (Key/Value element that not contain language id).</param>
            <param name="languageID">Language id.</param>
            <remarks>Loads only the subcarriers key and value as attributes. Input parameter is used for language id.</remarks>
        </member>
        <member name="M:Litium.Foundation.Carriers.SystemStringCollectionCarrier.SetValues(Litium.Foundation.Carriers.SystemStringCarrier[])">
            <summary>
            Set carrier values.
            </summary>
            <param name="systemStringCarriers">System string carriers.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.SystemStringCollectionCarrier.SystemStringCarriers">
            <summary>
            System string carriers.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.ModuleSpecificEventCarrier">
            <summary>
            ModuleEventCarrier represents a module event.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.ModuleEventCarrier">
            <summary>
            ModuleEventCarrier represents a module event.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.ModuleEventCarrier.ATTRIBUTE_MODULE_ID">
            <summary>
            Attribute for moduleID
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleEventCarrier.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleEventCarrier.GetAsXmlElement(System.Xml.XmlDocument,System.String)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <param name="elementName">Element name.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleEventCarrier.SetValues(System.Int64,System.DateTime,System.Guid)">
            <summary>
            Set carrier values
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Time stamp.</param>
            <param name="moduleID">Module ID.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.ModuleEventCarrier.ModuleID">
            <summary>
            Module ID
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.ModuleSpecificEventCarrier.ELEMENT_NAME">
            <summary>
            Created event for module specific
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.ModuleSpecificEventCarrier.ATTRIBUTE_ARGUMENT_1">
            <summary>
            Attribute for argument 1
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.ModuleSpecificEventCarrier.ATTRIBUTE_ARGUMENT_2">
            <summary>
            Attribute for argument 2
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.ModuleSpecificEventCarrier.ATTRIBUTE_ARGUMENT_3">
            <summary>
            Attribute for argument 3
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.ModuleSpecificEventCarrier.ATTRIBUTE_ARGUMENT_4">
            <summary>
            Attribute for arbument 4
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.ModuleSpecificEventCarrier.ATTRIBUTE_ARGUMENT_5">
            <summary>
            Attribute for argument 5
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.ModuleSpecificEventCarrier.ATTRIBUTE_EVENT_TYPE">
            <summary>
            Attribute for event type
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleSpecificEventCarrier.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleSpecificEventCarrier.#ctor(System.Int64,System.DateTime,System.Guid,System.Int16,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Time stamp.</param>
            <param name="moduleID">Module ID.</param>
            <param name="eventType">Event type</param>
            <param name="argument1">Argument 1</param>
            <param name="argument2">Argument 2</param>
            <param name="argument3">Argument 3</param>
            <param name="argument4">Argument 4</param>
            <param name="argument5">Argument 5</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleSpecificEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleSpecificEventCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleSpecificEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleSpecificEventCarrier.SetValues(System.Int64,System.DateTime,System.Guid,System.Int16,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Set carrier values
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Time stamp.</param>
            <param name="moduleID">Module ID.</param>
            <param name="eventType">Event type</param>
            <param name="argument1">Argument 1</param>
            <param name="argument2">Argument 2</param>
            <param name="argument3">Argument 3</param>
            <param name="argument4">Argument 4</param>
            <param name="argument5">Argument 5</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.ModuleSpecificEventCarrier.Argument1">
            <summary>
            Argument 1
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.ModuleSpecificEventCarrier.Argument2">
            <summary>
            Argument 2
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.ModuleSpecificEventCarrier.Argument3">
            <summary>
            Argument 3
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.ModuleSpecificEventCarrier.Argument4">
            <summary>
            Argument 4
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.ModuleSpecificEventCarrier.Argument5">
            <summary>
            Argument 5
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.ModuleSpecificEventCarrier.EventType">
            <summary>
            Event type
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.ModuleSpecificEventCarrier.EventName">
            <summary>
            Returns the event name.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.ModuleStringCollectionCarrier">
            <summary>
            The ModuleStringCollectionCarrier describes a collection of ModuleStringCarriers.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.ModuleStringCollectionCarrier.ELEMENT_NAME">
            <summary>
            Carrier element name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.ModuleStringCollectionCarrier.ELEMENT_STRINGS">
            <summary>
            Translation strings element
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.ModuleStringCollectionCarrier.ATTRIBUTE_MODULE_ID">
            <summary>
            Module ID attribute
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.ModuleStringCollectionCarrier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Carriers.ModuleStringCollectionCarrier"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.ModuleStringCollectionCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Carriers.ModuleStringCollectionCarrier"/> class.
            </summary>
            <param name="xml">Xml data (Key/Value xml that contains neither language id nor module id).</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.ModuleStringCollectionCarrier.#ctor(System.Guid,System.Guid,System.Xml.XmlDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Carriers.ModuleStringCollectionCarrier"/> class.
            </summary>
            <param name="moduleID">The module ID.</param>
            <param name="languageID">The language ID.</param>
            <param name="xml">Xml data (Key/Value xml that contains neither language id nor module id).</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.ModuleStringCollectionCarrier.#ctor(System.Guid,Litium.Foundation.Carriers.ModuleStringCarrier[])">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Carriers.ModuleStringCollectionCarrier"/> class.
            </summary>
            <param name="moduleID">The module ID.</param>
            <param name="moduleStringCarriers">The module string carriers.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.ModuleStringCollectionCarrier.Clone">
            <summary>
            Returns a clone of the carrier.
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.ModuleStringCollectionCarrier.GetAsXml">
            <summary>
            Returns the carrier as an XML document
            </summary>
            <returns>The requested XML document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.ModuleStringCollectionCarrier.GetAsXmlKeyValue">
            <summary>
            Returns the carrier as an XML document.
            </summary>
            <returns>The requested XML document.</returns>
            <remarks>Returns only the key and value attributes of the subcarriers.</remarks>
        </member>
        <member name="M:Litium.Foundation.Carriers.ModuleStringCollectionCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml element.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.ModuleStringCollectionCarrier.GetAsXmlElementKeyValue(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml element.</returns>
            <remarks>Includes only the subcarriers key and value as attributes.</remarks>
        </member>
        <member name="M:Litium.Foundation.Carriers.ModuleStringCollectionCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.ModuleStringCollectionCarrier.Load(System.Guid,System.Guid,System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="moduleID">Module id.</param>
            <param name="languageID">Language id.</param>
            <param name="element">Xml element (Key/Value element that contains neither language id nor module id).</param>
            <remarks>Loads only the subcarriers key and value as attributes. Input parameters are used for language id and module id.</remarks>
        </member>
        <member name="M:Litium.Foundation.Carriers.ModuleStringCollectionCarrier.SetValues(System.Guid,Litium.Foundation.Carriers.ModuleStringCarrier[])">
            <summary>
            Sets the values.
            </summary>
            <param name="moduleID">The module ID.</param>
            <param name="moduleStringCarriers">The module string carriers.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.ModuleStringCollectionCarrier.ModuleID">
            <summary>
            Module ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.ModuleStringCollectionCarrier.ModuleStringCarriers">
            <summary>
            Module string carriers.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Utilities.CloneUtilities">
            <summary>
            Clone utilities.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Configuration.AccountSettingsConfig">
            <summary>
            Account settings.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Configuration.AccountSettingsConfig.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="P:Litium.Foundation.Configuration.AccountSettingsConfig.AccountType">
            <summary>
            Account type.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Configuration.AccountSettingsConfig.EnableSessionTimeoutsInGui">
            <summary>
            True if sessions are timed out in admin.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Configuration.AccountSettingsConfig.SystemUser">
            <summary>
            System user config.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Configuration.AccountSettingsConfig.PasswordPolicy">
            <summary>
            Password policy config.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Configuration.AccountSettingsConfig.DirectorySettings">
            <summary>
            Directory config.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Configuration.AccountSettingsConfigSectionHandler">
            <summary>
            Parses the web.config for account settings.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Configuration.AccountSettingsConfigSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Creates a new configuration handler and adds it to the section-handler collection based on the specified parameters.
            </summary>
            <param name="parent">Parent object.</param>
            <param name="configContext">Configuration context object.</param>
            <param name="section">Section XML node.</param>
            <returns>A configuration object.</returns>
        </member>
        <member name="T:Litium.Foundation.Configuration.ControlPanelPage">
            <summary>
            Helper class for control panel pages.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Configuration.ControlPanelPage.#ctor(System.String,System.String,System.String,Litium.Foundation.Configuration.ControlPanelPagePermission)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Configuration.ControlPanelPage"/> class.
            </summary>
            <param name="page">The page.</param>
            <param name="icon">The icon.</param>
            <param name="systemString">The system string.</param>
            <param name="permission">The permission.</param>
        </member>
        <member name="M:Litium.Foundation.Configuration.ControlPanelPage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Configuration.ControlPanelPage"/> class.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Configuration.ControlPanelPage.Permission">
            <summary>
            Gets the permission.
            </summary>
            <value>The permission.</value>
        </member>
        <member name="P:Litium.Foundation.Configuration.ControlPanelPage.IconURL">
            <summary>
            Gets the icon URL.
            </summary>
            <value>The icon URL.</value>
        </member>
        <member name="P:Litium.Foundation.Configuration.ControlPanelPage.PageURL">
            <summary>
            Gets the page URL.
            </summary>
            <value>The page URL.</value>
        </member>
        <member name="P:Litium.Foundation.Configuration.ControlPanelPage.SystemStringKey">
            <summary>
            Gets the system string key.
            </summary>
            <value>The system string key.</value>
        </member>
        <member name="T:Litium.Foundation.Configuration.ControlPanelPagesConfig">
            <summary>
            Control Panel Pages Config
            </summary>
        </member>
        <member name="M:Litium.Foundation.Configuration.ControlPanelPagesConfig.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Configuration.ControlPanelPagesConfig.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="P:Litium.Foundation.Configuration.ControlPanelPagesConfig.MySettings">
            <summary>
            My settings panels.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Configuration.ControlPanelPagesConfig.SystemSettings">
            <summary>
            System setting panels.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Configuration.ControlPanelPagesConfigSectionHandler">
            <summary>
            Config section handler for ControlPanels.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Configuration.ControlPanelPagesConfigSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Creates a configuration section handler.
            </summary>
            <param name="parent">Parent object.</param>
            <param name="configContext">Configuration context object.</param>
            <param name="section">Section XML node.</param>
            <returns>The created section handler object.</returns>
        </member>
        <member name="T:Litium.Foundation.Configuration.CommandTimeoutsConfigSectionHandler">
            <summary>
            Command Timeous config section.
            </summary>
            <example>
             <commandTimeouts>
               <commandTimeout command="MediaArchive_CreateFile" timeOut="150" />
               <commandTimeout command="MediaArchive_UpdateFile" timeOut="150" />
             </commandTimeouts>
            </example>
        </member>
        <member name="M:Litium.Foundation.Configuration.CommandTimeoutsConfigSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Creates a configuration section handler.
            </summary>
            <param name="parent">Parent object.</param>
            <param name="configContext">Configuration context object.</param>
            <param name="section">Section XML node.</param>
            <returns>The created section handler object.</returns>
        </member>
        <member name="T:Litium.Foundation.Configuration.CommandTimeoutsConfig">
            <summary>
            Command timeouts
            </summary>
        </member>
        <member name="P:Litium.Foundation.Configuration.CommandTimeoutsConfig.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="P:Litium.Foundation.Configuration.CommandTimeoutsConfig.TimeOuts">
            <summary>
            Timeouts
            </summary>
        </member>
        <member name="T:Litium.Foundation.Configuration.ControlPanelPagePermission">
            <summary>
            Set permission on control panel page items.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Configuration.ControlPanelPagePermission.Undefined">
            <summary>
            No permission is required.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Configuration.ControlPanelPagePermission.ChangePassword">
            <summary>
            Change password permission is required.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Configuration.ControlPanelPagePermission.Account">
            <summary>
            Account permission is required.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Configuration.ControlPanelPagePermission.Language">
            <summary>
            Language permission is required.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Configuration.ControlPanelPagePermission.All">
            <summary>
            Solution all permission is required.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Configuration.DirectoryServerConfig">
            <summary>
            Directory config.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Configuration.DirectoryServerConfig.Domain">
            <summary>
            Domain the dc belongs to.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Configuration.DirectoryServerConfig.Password">
            <summary>
            Verify password.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Configuration.DirectoryServerConfig.Server">
            <summary>
            Server path.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Configuration.DirectoryServerConfig.User">
            <summary>
            Verify user.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Configuration.DirectorySettingsConfig">
            <summary>
            Directory config.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Configuration.DirectorySettingsConfig.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Configuration.DirectorySettingsConfig.AutomaticAccountCreation">
            <summary>
            Automatic creations of users as they log on.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Configuration.DirectorySettingsConfig.EnforceMinimumOneGroupMembership">
            <summary>
            Enforce minimum one group membership, to avoid getting "anonymous" users in to the system.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Configuration.DirectorySettingsConfig.HierarchicalGroupMembership">
            <summary>
            Find all groups a user is member of, hierarchical. If false only gorups user ar edirect member of is added.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Configuration.DirectorySettingsConfig.SyncInterval">
            <summary>
            Sync interval.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Configuration.DirectorySettingsConfig.DefaultDomain">
            <summary>
            Default domain control to use if no domain match found within servers.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Configuration.DirectorySettingsConfig.Servers">
            <summary>
            Directory servers. Domain is key.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Configuration.DirectorySettingsConfigSectionHandler">
            <summary>
            Section handler for Directory config.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Configuration.DirectorySettingsConfigSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Creates a new configuration handler and adds it to the section-handler collection based on the specified parameters.
            </summary>
            <param name="parent">Parent object.</param>
            <param name="configContext">Configuration context object.</param>
            <param name="section">Section XML node.</param>
            <returns>A configuration object.</returns>
        </member>
        <member name="T:Litium.Foundation.Configuration.GeneralConfig">
            <summary>
            General settings.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Configuration.GeneralConfig.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="P:Litium.Foundation.Configuration.GeneralConfig.SMTPServer">
            <summary>
            Gets or sets the SMTP server.
            </summary>
            <value>The SMTP server.</value>
        </member>
        <member name="P:Litium.Foundation.Configuration.GeneralConfig.FilesDirectory">
            <summary>
            Gets or sets the files directory.
            </summary>
            <value>The files directory.</value>
        </member>
        <member name="P:Litium.Foundation.Configuration.GeneralConfig.StartupInformation">
            <summary>
            Gets or sets the startup information.
            </summary>
            <value>The startup information.</value>
        </member>
        <member name="P:Litium.Foundation.Configuration.GeneralConfig.EventLogMaxAgeInMinutes">
            <summary>
            Gets or sets the event log max age in minutes.
            </summary>
            <value>The event log max age in minutes.</value>
        </member>
        <member name="P:Litium.Foundation.Configuration.GeneralConfig.EventLogDeleteIntervalInMinutes">
            <summary>
            Gets or sets the event log delete interval in minutes.
            </summary>
            <value>The event log delete interval in minutes.</value>
        </member>
        <member name="P:Litium.Foundation.Configuration.GeneralConfig.EventLogPollingTimeInSeconds">
            <summary>
            Gets or sets the event log polling time in seconds.
            </summary>
            <value>The event log polling time in seconds.</value>
        </member>
        <member name="T:Litium.Foundation.Configuration.GeneralConfigSectionHandler">
            <summary>
            Config section handler for General Config.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Configuration.GeneralConfigSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Creates a configuration section handler.
            </summary>
            <param name="parent">Parent object.</param>
            <param name="configContext">Configuration context object.</param>
            <param name="section">Section XML node.</param>
            <returns>The created section handler object.</returns>
        </member>
        <member name="T:Litium.Foundation.Configuration.PasswordPolicyConfig">
            <summary>
            Password policy config.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Configuration.PasswordPolicyConfig.ComplexityRule">
            <summary>
            Complexity rule, enforce password to follow NT password rules.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Configuration.PasswordPolicyConfig.ExpirePeriodInDays">
            <summary>
            Passwords expire after X days, -1 for none expirre.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Configuration.PasswordPolicyConfig.LengthRule">
            <summary>
            Enforce minimum password length.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Configuration.PasswordPolicyConfig.LockoutCount">
            <summary>
            Lockout count, lock user after X failed attempts.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Configuration.ScheduledTaskConfig">
            <summary>
            Scheduled task.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Configuration.StartupTaskConfig">
            <summary>
            Startup tasks.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Configuration.StartupTaskConfig.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Litium.Foundation.Configuration.StartupTaskConfig.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Litium.Foundation.Configuration.StartupTaskConfig.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:Litium.Foundation.Configuration.ScheduledTaskConfig.Interval">
            <summary>
            Gets or sets the interval.
            </summary>
            <value>The interval.</value>
        </member>
        <member name="P:Litium.Foundation.Configuration.ScheduledTaskConfig.StartTime">
            <summary>
            Gets or sets the start time.
            </summary>
            <value>The start time.</value>
        </member>
        <member name="P:Litium.Foundation.Configuration.ScheduledTaskConfig.DueTime">
            <summary>
            Gets the due time.
            </summary>
            <value>The due time.</value>
        </member>
        <member name="T:Litium.Foundation.Configuration.SearchConfiguration">
            <summary>
            Search configuration element.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Configuration.SearchConfiguration.Instance">
            <summary>
            Search configuration instance.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Configuration.SearchConfiguration.IsChangeTrackingEnabled">
            <summary>
            If true, then indexes will be synchronizes with the underlying repository, 
            by listening to events raised on data changes.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Configuration.SearchConfiguration.IsDailyOptimizationEnabled">
            <summary>
            If true, then a background job will optimize the index files, 
            at the time defined in <see cref="P:Litium.Foundation.Configuration.SearchConfiguration.DailyOptimizationTimeOfDay"/>.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Configuration.SearchConfiguration.DailyOptimizationTimeOfDay">
            <summary>
            The time of day for the optimization jobs to be executed. 
            </summary>
        </member>
        <member name="P:Litium.Foundation.Configuration.SearchConfiguration.PublicSiteFuzzySearchPrefixLength">
            <summary>
            A positive number between 0 and int.MaxValue that regulates how many starting
            characters that needs to be identical when comparing an indexed term with a search term.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Configuration.SearchConfiguration.PublicSiteFuzzySearchSimilarity">
            <summary>
            <para>A positive number between 0 and 1 that regulates the "fuzzyness" of a fuzzy query.</para>
            <para>In order to generate a hit, the distance between an indexed term X 
            and a search term Y must be less than:</para>
            <para>lenght(Y)*FuzzySearchSimilarity</para>
            <para>The distance is measured in the number of additions, deletions or modifications 
            needed for the terms X and Y to be identical.</para>
            </summary>
        </member>
        <member name="P:Litium.Foundation.Configuration.SearchConfiguration.BackOfficeFuzzySearchPrefixLength">
            <summary>
            A positive number between 0 and int.MaxValue that regulates how many starting
            characters that needs to be identical when comparing an indexed term with a search term.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Configuration.SearchConfiguration.BackOfficeFuzzySearchSimilarity">
            <summary>
            <para>A positive number between 0 and 1 that regulates the "fuzzyness" of a fuzzy query.</para>
            <para>In order to generate a hit, the distance between an indexed term X 
            and a search term Y must be less than:</para>
            <para>lenght(Y)*FuzzySearchSimilarity</para>
            <para>The distance is measured in the number of additions, deletions or modifications 
            needed for the terms X and Y to be identical.</para>
            </summary>
        </member>
        <member name="P:Litium.Foundation.Configuration.SearchConfiguration.PublicSiteFuzzySearchPrefixLengthDefaultValue">
            <summary>
            The default value that will be used if the setting is missing from the configuration file.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Configuration.SearchConfiguration.PublicSiteFuzzySearchSimilarityDefaultValue">
            <summary>
            The default value that will be used if the setting is missing from the configuration file.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Configuration.SearchConfiguration.BackOfficeFuzzySearchPrefixLengthDefaultValue">
            <summary>
            The default value that will be used if the setting is missing from the configuration file.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Configuration.SearchConfiguration.BackOfficeFuzzySearchSimilarityDefaultValue">
            <summary>
            The default value that will be used if the setting is missing from the configuration file.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Configuration.SearchConfiguration.IsChangeTrackingEnabledDefaultValue">
            <summary>
            The default value that will be used if the setting is missing from the configuration file.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Configuration.SearchConfiguration.IsDailyOptimizationEnabledDefaultValue">
            <summary>
            The default value that will be used if the setting is missing from the configuration file.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Configuration.SearchConfiguration.DailyOptimizationTimeOfDayDefaultValue">
            <summary>
            The default value that will be used if the setting is missing from the configuration file.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Configuration.SearchConfigurationSectionHandler">
            <summary>
            Section handler for search configuration section (Litium/Foundation/Search).
            </summary>
        </member>
        <member name="M:Litium.Foundation.Configuration.SearchConfigurationSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Creates a configuration section handler.
            </summary>
            <param name="parent">Parent object.</param>
            <param name="configContext">Configuration context object.</param>
            <param name="section">Section XML node.</param>
            <returns>The created section handler object.</returns>
        </member>
        <member name="T:Litium.Foundation.Configuration.StartupInformationConfig">
            <summary>
            Startup info config
            </summary>
        </member>
        <member name="P:Litium.Foundation.Configuration.StartupInformationConfig.Page">
            <summary>
            Gets or sets the page.
            </summary>
            <value>The page.</value>
        </member>
        <member name="P:Litium.Foundation.Configuration.StartupInformationConfig.AutoRedirect">
            <summary>
            Gets or sets the auto redirect.
            </summary>
            <value>The auto redirect.</value>
        </member>
        <member name="T:Litium.Foundation.Configuration.StartupInformationConfigSectionHandler">
            <summary>
            Config section for startup information.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Configuration.StartupInformationConfigSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Creates a configuration section handler.
            </summary>
            <param name="parent">Parent object.</param>
            <param name="configContext">Configuration context object.</param>
            <param name="section">Section XML node.</param>
            <returns>The created section handler object.</returns>
        </member>
        <member name="T:Litium.Foundation.Configuration.SystemUserConfig">
            <summary>
            System user config.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Configuration.SystemUserConfig.Enabled">
            <summary>
            System user is enabled.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Configuration.SystemUserConfig.Password">
            <summary>
            System user password.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Configuration.TaskSettingsConfig">
            <summary>
            Task settings config.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Configuration.TaskSettingsConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Configuration.TaskSettingsConfig"/> class.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Configuration.TaskSettingsConfig.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="P:Litium.Foundation.Configuration.TaskSettingsConfig.StartupTasks">
            <summary>
            Gets or sets the startup tasks.
            </summary>
            <value>The startup tasks.</value>
        </member>
        <member name="P:Litium.Foundation.Configuration.TaskSettingsConfig.ScheduledTasks">
            <summary>
            Gets or sets the scheduled tasks.
            </summary>
            <value>The scheduled tasks.</value>
        </member>
        <member name="T:Litium.Foundation.Configuration.TaskSettingsConfigSectionHandler">
            <summary>
            Config section handler for Task settings.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Configuration.TaskSettingsConfigSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Creates a configuration section handler.
            </summary>
            <param name="parent">Parent object.</param>
            <param name="configContext">Configuration context object.</param>
            <param name="section">Section XML node.</param>
            <returns>The created section handler object.</returns>
        </member>
        <member name="T:Litium.Foundation.Currencies.BaseCurrencyException">
            <summary>
            Base currency exception.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Currencies.BaseCurrencyException.BASE_EXCEPTION_MESSAGE">
            <summary>
            Message to be supplied to the base constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Currencies.BaseCurrencyException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Currencies.BaseCurrencyException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Currencies.BaseCurrencyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Currencies.BaseCurrencyException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Litium.Foundation.Currencies.Currency">
            <summary>
            Represents the currency.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Currencies.Currency.CURRENCY_DECIMAL_DIGITS">
            <summary>
            The number of decimal digits to be used.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Currencies.Currency.CURRENCY_DECIMAL_SEPARATOR">
            <summary>
            The decimal separator.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Currencies.Currency.CURRENCY_GROUP_SEPEARATOR">
            <summary>
            The group separator.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Currencies.Currency.CURRENCY_SYMBOL">
            <summary>
            The currency symbol to be used.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Currencies.Currency.SPECIFIC_CULTURE">
            <summary>
            The specific culture to be used.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Currencies.Currency.m_cultureInfo">
            <summary>
            The culture info of the currency.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Currencies.Currency.m_regionInfo">
            <summary>
            The region info of the currency.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Currencies.Currency.m_carrier">
            <summary>
            The carrier.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Currencies.Currency.#ctor(Litium.Foundation.Carriers.CurrencyCarrier)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Currencies.Currency"/> class.
            </summary>
            <param name="carrier">The carrier.</param>
        </member>
        <member name="M:Litium.Foundation.Currencies.Currency.ConvertValue(System.Decimal,Litium.Foundation.Currencies.Currency)">
            <summary>
            Converts the value.
            </summary>
            <param name="value">The value.</param>
            <param name="toCurrency">To currency.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Currencies.Currency.Delete(Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes the currency.
            </summary>
            <param name="securityToken">The security token.</param>
        </member>
        <member name="M:Litium.Foundation.Currencies.Currency.Format(System.Decimal,System.Globalization.CultureInfo)">
            <summary>
            Formats the specified amount.
            </summary>
            <param name="amount">The amount.</param>
            <param name="currentCulture">The current culture.</param>
            <returns>Formatted amount with currency symbol</returns>
        </member>
        <member name="M:Litium.Foundation.Currencies.Currency.Format(System.Decimal)">
            <summary>
            Formats the specified amount.
            </summary>
            <param name="amount">The amount.</param>
            <returns>Formatted amount with currency symbol</returns>
        </member>
        <member name="M:Litium.Foundation.Currencies.Currency.Format(System.Decimal,System.Boolean)">
            <summary>
            Formats the specified amount.
            </summary>
            <param name="amount">The amount.</param>
            <param name="displayCurrencySymbol">if set to <c>true</c> [display currency symbol].
            </param>
            <returns>Formatted amount.</returns>
        </member>
        <member name="M:Litium.Foundation.Currencies.Currency.Format(System.Decimal,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            Formats the specified amount. Uses the currency simple of this currency, and decimal and thousand seperator of passed in culture.
            </summary>
            <param name="amount">The amount.</param>
            <param name="displayCurrencySymbol">if set to <c>true</c> [display currency symbol].</param>
            <param name="currentCulture">The current culture.</param>
            <returns>Formatted amount.</returns>
        </member>
        <member name="M:Litium.Foundation.Currencies.Currency.GetAsCarrier">
            <summary>
            Gets a clone of a carrier object.
            </summary>
            <returns>An object of type <see cref="T:Litium.Foundation.Carriers.CurrencyCarrier"/>.</returns>
        </member>
        <member name="M:Litium.Foundation.Currencies.Currency.SetCurrencyCode(System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Sets the currency code.
            </summary>
            <param name="currencyCode">The currency code.</param>
            <param name="securityToken">The security token.</param>
        </member>
        <member name="M:Litium.Foundation.Currencies.Currency.SetExchageRate(System.Decimal,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Sets the exchage rate.
            </summary>
            <param name="exchangeRate">The exchange rate.</param>
            <param name="securityToken">The security token.</param>
        </member>
        <member name="M:Litium.Foundation.Currencies.Currency.SetTextFormat(System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Sets the text format.
            </summary>
            <param name="textFormat">The text format.</param>
            <param name="securityToken">The security token.</param>
        </member>
        <member name="M:Litium.Foundation.Currencies.Currency.SetToBaseCurrency(Litium.Foundation.Security.SecurityToken)">
            <summary>
            Sets to base currency.
            </summary>
            <param name="securityToken">The security token.</param>
        </member>
        <member name="M:Litium.Foundation.Currencies.Currency.SetValuesFromCarrier(Litium.Foundation.Carriers.CurrencyCarrier,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Sets the values from carrier.
            </summary>
            <param name="carrier">The base entity.</param>
            <param name="token">The token.</param>
        </member>
        <member name="M:Litium.Foundation.Currencies.Currency.Populate(Litium.Foundation.Carriers.CurrencyCarrier)">
            <summary>
            Populates the specified base entity.
            </summary>
            <param name="carrier">The base entity.</param>
        </member>
        <member name="M:Litium.Foundation.Currencies.Currency.UpdateFromCarrier(Litium.Foundation.Carriers.CurrencyCarrier,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Updates from carrier.
            </summary>
            <param name="carrier">The base entity.</param>
            <param name="token">The token.</param>
        </member>
        <member name="P:Litium.Foundation.Currencies.Currency.CultureInfo">
            <summary>
            Gets the culture info.
            </summary>
            <value>Accesses the value of the <c>m_cultureInfo</c> data member.</value>
        </member>
        <member name="P:Litium.Foundation.Currencies.Currency.CurrencyCode">
            <summary>
            Gets the currency code.
            </summary>
            <value>Accesses the Code property of the <c>m_carrier</c> data member.</value>
        </member>
        <member name="P:Litium.Foundation.Currencies.Currency.ExchangeRate">
            <summary>
            Gets the exchange rate. 
            </summary>
            <value>Accesses the ExchangeRate property of the <c>m_carrier</c> member.</value>
        </member>
        <member name="P:Litium.Foundation.Currencies.Currency.ID">
            <summary>
            Gets the currency ID.
            </summary>
            <value>Accesses the ID property of the <c>m_carrier</c> member.</value>
        </member>
        <member name="P:Litium.Foundation.Currencies.Currency.IsBaseCurrency">
            <summary>
            Gets a value indicating whether this instance is base currency.
            </summary>
            <value>
            <c>true</c> if this instance is base currency; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Litium.Foundation.Currencies.Currency.IsDeleted">
            <summary>
            Gets a value indicating whether this instance is deleted.
            </summary>
            <value><c>true</c> if the instance is deleted otherwise <c>false</c>.</value>
        </member>
        <member name="P:Litium.Foundation.Currencies.Currency.LastUpdatedDate">
            <summary>
            Returns the date time for the latest update.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Currencies.Currency.LastUpdatedUserID">
            <summary>
            Returns the user id for the latest update.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Currencies.Currency.RegionInfo">
            <summary>
            Gets the region info.
            </summary>
            <value>Accesses the value of the <c>m_regionInfo</c> member.</value>
        </member>
        <member name="P:Litium.Foundation.Currencies.Currency.TextFormat">
            <summary>
            Gets the text format.
            </summary>
            <value>Accesses the TextFormat property of the <c>m_carrier</c> member.</value>
        </member>
        <member name="T:Litium.Foundation.Currencies.CurrencyCollection">
            <summary>
            Represents a currency collection.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Currencies.CurrencyCollection.s_currencyCultureInfo">
            <summary>
            The collection of <see cref="T:System.Globalization.CultureInfo"/> objects.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Currencies.CurrencyCollection.#ctor">
            <summary>
            Constructor, sets up event listners.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Currencies.CurrencyCollection.Create(Litium.Foundation.Carriers.CurrencyCarrier,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates the currency.
            </summary>
            <param name="currency">The currency.</param>
            <param name="securityToken">The security token.</param>
            <returns>An object of type <see cref="T:Litium.Foundation.Currencies.Currency"/>.</returns>
        </member>
        <member name="M:Litium.Foundation.Currencies.CurrencyCollection.Create(System.String,System.Decimal,System.Boolean,System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates the currency.
            </summary>
            <param name="currencyCode">The currency code.</param>
            <param name="exchangeRate">The exchange rate.</param>
            <param name="isBaseCurrency">if set to <c>true</c> [is base currency].</param>
            <param name="textFormat">The text format.</param>
            <param name="securityToken">The security token.</param>
            <returns>An object of type <see cref="T:Litium.Foundation.Currencies.Currency"/>.</returns>
        </member>
        <member name="M:Litium.Foundation.Currencies.CurrencyCollection.ConvertValue(System.Decimal,Litium.Foundation.Currencies.Currency,Litium.Foundation.Currencies.Currency)">
            <summary>
            Converts the value.
            </summary>
            <param name="value">The value.</param>
            <param name="fromCurrency">From currency.</param>
            <param name="toCurrency">To currency.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Currencies.CurrencyCollection.CultureInfoFromCurrencyISO(System.String)">
            <summary>
            Lookup the <see cref="T:System.Globalization.CultureInfo"/> corresponding to the given ISO code.
            </summary>
            <param name="isoCode">The ISO code.</param>
            <returns>An object of type <see cref="T:System.Globalization.CultureInfo"/>.</returns>
        </member>
        <member name="M:Litium.Foundation.Currencies.CurrencyCollection.GetBaseCurrency">
            <summary>
            Gets the base currency.
            </summary>
            <returns>An object of type <see cref="T:Litium.Foundation.Currencies.Currency"/>.</returns>
        </member>
        <member name="M:Litium.Foundation.Currencies.CurrencyCollection.ToList">
            <summary>
            This method is used to obtain a list of currencies.
            </summary>
            <returns>A list of <see cref="T:Litium.Foundation.Currencies.Currency"/> objects.</returns>
        </member>
        <member name="M:Litium.Foundation.Currencies.CurrencyCollection.Get(System.Guid)">
            <summary>
            Gets the specified currency.
            </summary>
            <param name="currencyID">The currency ID.</param>
            <returns>An object of type <see cref="T:Litium.Foundation.Currencies.Currency"/>.</returns>
        </member>
        <member name="M:Litium.Foundation.Currencies.CurrencyCollection.Get(System.String)">
            <summary>
            Gets the specified currency.
            </summary>
            <param name="currencyCode">The currency code.</param>
            <returns>An object of type <see cref="T:Litium.Foundation.Currencies.Currency"/>.</returns>
        </member>
        <member name="M:Litium.Foundation.Currencies.CurrencyCollection.Get(System.Globalization.CultureInfo)">
            <summary>
            Gets the currency associated with the specified culture info.
            </summary>
            <param name="cultureInfo">The culture info.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Currencies.CurrencyCollection.GetAll">
            <summary>
            This method is used to obtain a list of all currencies.
            </summary>
            <returns>A list of <see cref="T:Litium.Foundation.Currencies.Currency"/> objects.</returns>
        </member>
        <member name="M:Litium.Foundation.Currencies.CurrencyCollection.GetCurrenciesCount">
            <summary>
            Gets the currencies count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Currencies.CurrencyCollection.GetEnumerator">
            <summary>
            Enumerator of currencies.
            </summary>
            <returns>Enumertion of Currency objects.</returns>
        </member>
        <member name="M:Litium.Foundation.Currencies.CurrencyCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerator of currencies.
            </summary>
            <returns>Enumertion of Currency objects.</returns>
        </member>
        <member name="P:Litium.Foundation.Currencies.CurrencyCollection.Item(System.Guid)">
            <summary>
            Gets the <see cref="T:Litium.Foundation.Currencies.Currency"/> with the 
            specified currency ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Currencies.CurrencyCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Litium.Foundation.Currencies.Currency"/> with the 
            specified currency code.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Currencies.CurrencyDoesNotExistException">
            <summary>
            Exception class for the currency. 
            Thrown when an attempt is made to execute the operation on a non-exsiting currency object.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Currencies.CurrencyDoesNotExistException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Currencies.CurrencyDoesNotExistException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Currencies.CurrencyDoesNotExistException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Currencies.CurrencyDoesNotExistException"/> class 
            using the parameters supplied.
            </summary>
            <param name="title">Exception title.</param>
        </member>
        <member name="M:Litium.Foundation.Currencies.CurrencyDoesNotExistException.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Currencies.CurrencyDoesNotExistException"/> class 
            using the parameters supplied.
            </summary>
            <param name="id">Campaign ID.</param>
        </member>
        <member name="M:Litium.Foundation.Currencies.CurrencyDoesNotExistException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Currencies.CurrencyDoesNotExistException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Litium.Foundation.Currencies.CurrencyExistsException">
            <summary>
            Exception class for the currency. 
            Thrown when an attempt is made to create an existing currency.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Currencies.CurrencyExistsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Currencies.CurrencyExistsException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Currencies.CurrencyExistsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Currencies.CurrencyExistsException"/> class using the
            parameters supplied.
            </summary>
            <param name="title">Exception title.</param>
        </member>
        <member name="M:Litium.Foundation.Currencies.CurrencyExistsException.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Currencies.CurrencyExistsException"/> class using the
            parameters supplied.
            </summary>
            <param name="id">Campaign ID.</param>
        </member>
        <member name="M:Litium.Foundation.Currencies.CurrencyExistsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Currencies.CurrencyExistsException"/> class using the
            parameters supplied.
            </summary>
            <param name="title">Exception title.</param>
            <param name="e">Inner exception.</param>
        </member>
        <member name="M:Litium.Foundation.Currencies.CurrencyExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Currencies.CurrencyExistsException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Litium.Foundation.Data.ColumnNames">
            <summary>
            Column names.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Data.ColumnNames.CUSTOM_ITEM_ID">
            <summary>
            Custom item id.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Data.ColumnNames.GROUP_ID">
            <summary>
            Group id
            </summary>
        </member>
        <member name="F:Litium.Foundation.Data.ColumnNames.MODULE_ID">
            <summary>
            Module id
            </summary>
        </member>
        <member name="F:Litium.Foundation.Data.ColumnNames.PERMISSION_TYPE_ID">
            <summary>
            Permission type id.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Data.ColumnNames.USER_ID">
            <summary>
            User id.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Data.CommandTimeouts">
            <summary>
            Timeout for configurations.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Data.CommandTimeouts.m_timeOuts">
            <summary>
            Timeout variables from 
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.CommandTimeouts.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.CommandTimeouts.SetDefaultTimeout(System.Int32,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Sets default timeout for a command during runtime, not persisted.
            </summary>
            <param name="timeOut">Timeout in seconds.</param>
            <param name="token">SecurityToken, only users with SystemAll may add.</param>
        </member>
        <member name="M:Litium.Foundation.Data.CommandTimeouts.SetTimeout(System.String,System.Int32,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Set timeout for a command during runtime, not persisted.
            </summary>
            <param name="command">Command.</param>
            <param name="timeOut">Timeout in seconds.</param>
            <param name="token">SecurityToken, only users with SystemAll may add.</param>
        </member>
        <member name="M:Litium.Foundation.Data.CommandTimeouts.GetTimeout(System.String)">
            <summary>
            Look up timeout in config, if not found default value is returned.
            </summary>
            <param name="command">Command.</param>
            <returns>The timeout set for the command, ifn not found default value is returned.</returns>
        </member>
        <member name="P:Litium.Foundation.Data.CommandTimeouts.DefaultTimeout">
            <summary>
            Default timeout used if not specified
            </summary>
        </member>
        <member name="T:Litium.Foundation.Data.IModulePanelData">
            <summary>
            IModulePanelData interface
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.IModulePanelData.Exists(System.Guid,System.Guid)">
            <summary>
            Returns whether an entity exists or not.
            </summary>
            <param name="moduleID">The module ID.</param>
            <param name="id">The entity id.</param>
            <returns>
            	<c>true</c> if an entity exists otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Litium.Foundation.Data.IModulePanelData.Exists(System.Guid,System.String)">
            <summary>
            check whether an panel exists with specified name
            </summary>
            <param name="moduleID">The module ID.</param>
            <param name="name">The name.</param>
            <returns>true if exists, false otherwise</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IModulePanelData.Get(System.Guid,System.Guid)">
            <summary>
            Returns an entity.
            </summary>
            <param name="moduleID">The module ID.</param>
            <param name="id">The entity id.</param>
            <returns>An entity.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IModulePanelData.Get(System.Guid,System.String)">
            <summary>
            Returns an entity.
            </summary>
            <param name="moduleID">The module ID.</param>
            <param name="name">The name.</param>
            <returns>An entity.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IModulePanelData.Delete(System.Guid,System.Guid)">
            <summary>
            Deletes an entity.
            </summary>
            <param name="moduleID">The module ID.</param>
            <param name="id">Id of the entity.</param>
        </member>
        <member name="M:Litium.Foundation.Data.IModulePanelData.Update(System.Guid,Litium.Foundation.Carriers.ModulePanelCarrier)">
            <summary>
            Updates an entity.
            </summary>
            <param name="moduleID">The module ID.</param>
            <param name="carrier">The entity carrier.</param>
        </member>
        <member name="M:Litium.Foundation.Data.IModulePanelData.Create(System.Guid,Litium.Foundation.Carriers.ModulePanelCarrier)">
            <summary>
            Creates en entity.
            </summary>
            <param name="moduleID">The module ID.</param>
            <param name="carrier">Entity carrier.</param>
        </member>
        <member name="M:Litium.Foundation.Data.IModulePanelData.GetAll(System.Guid)">
            <summary>
            Gets all panels.
            </summary>
            <param name="moduleID">The module ID.</param>
            <returns></returns>
        </member>
        <member name="T:Litium.Foundation.Data.ICurrencyDataProvider">
            <summary>
            Data provider tier functions for languages.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.ICurrencyDataProvider.Create(Litium.Foundation.Carriers.CurrencyCarrier)">
            <summary>
            Creates a currency.
            </summary>
            <param name="carrier">The currency carrier.</param>
        </member>
        <member name="M:Litium.Foundation.Data.ICurrencyDataProvider.Delete(System.Guid)">
            <summary>
            Deletes a currency.
            </summary>
            <param name="id">The currency id.</param>
        </member>
        <member name="M:Litium.Foundation.Data.ICurrencyDataProvider.Exists(System.Guid)">
            <summary>
            Whether a currency exists or not.
            </summary>
            <param name="id">The currency id.</param>
            <returns><c>true</c> if a currency exists otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.ICurrencyDataProvider.Get(System.Guid)">
            <summary>
            Reeturns a currency.
            </summary>
            <param name="id">The currency id.</param>
            <returns>A currency.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.ICurrencyDataProvider.Get(System.String)">
            <summary>
            Returns a currency.
            </summary>
            <param name="currencyCode">The currency code.</param>
            <returns>A currency.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.ICurrencyDataProvider.GetCurrenciesCount">
            <summary>
            Returns number of currencies.
            </summary>
            <returns>Number of currencies.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.ICurrencyDataProvider.GetList">
            <summary>
            Gets all currencies.
            </summary>
            <returns>The list of currencies.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.ICurrencyDataProvider.Update(Litium.Foundation.Carriers.CurrencyCarrier)">
            <summary>
            Updates the currency.
            </summary>
            <param name="carrier">The carrier.</param>
            <returns></returns>
        </member>
        <member name="T:Litium.Foundation.Data.DeadlockException">
            <summary>
            Exceptions for deadlock errors in the DAL.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Data.DALException">
            <summary>
            Base exception class for the Data Access Layer.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.DALException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Data.DALException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.DALException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="title">Exception title.</param>
        </member>
        <member name="M:Litium.Foundation.Data.DALException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="title">Exception title.</param>
            <param name="e">Inner exception.</param>
        </member>
        <member name="M:Litium.Foundation.Data.DALException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Data.DALException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Litium.Foundation.Data.DeadlockException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Data.DeadlockException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.DeadlockException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="title">Error title.</param>
        </member>
        <member name="M:Litium.Foundation.Data.DeadlockException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="title">Error title.</param>
            <param name="e">Exception.</param>
        </member>
        <member name="M:Litium.Foundation.Data.DeadlockException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Data.DeadlockException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Litium.Foundation.Data.ISpellingDictionaryDataProvider">
            <summary>
            Data provider tier functions for handling spellchecker.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.ISpellingDictionaryDataProvider.CreateSpellingDictionary(Litium.Foundation.Carriers.SpellingDictionaryCarrier)">
            <summary>
            Creates the spellingdictionary.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:Litium.Foundation.Data.ISpellingDictionaryDataProvider.DeleteSpellingDictionary(Litium.Foundation.Carriers.SpellingDictionaryCarrier)">
            <summary>
            Deletes the spellingdictionary.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:Litium.Foundation.Data.ISpellingDictionaryDataProvider.SpellingDictionaryExists(System.String)">
            <summary>
            If spellingdictionary exists?
            </summary>
            <param name="language">The language.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Data.ISpellingDictionaryDataProvider.GetSpellingDictionary(System.String)">
            <summary>
            Get the spellingdictionary.
            </summary>
            <param name="language">The language.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Data.ISpellingDictionaryDataProvider.UpdateSpellingDictionary(Litium.Foundation.Carriers.SpellingDictionaryCarrier)">
            <summary>
            Updates the spellingdictionary.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:Litium.Foundation.Data.ISpellingDictionaryDataProvider.CreateUserSpellingDictionary(Litium.Foundation.Carriers.SpellingDictionaryCarrier)">
            <summary>
            Creates the user spellingdictionary.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:Litium.Foundation.Data.ISpellingDictionaryDataProvider.DeleteUserSpellingDictionary(Litium.Foundation.Carriers.SpellingDictionaryCarrier)">
            <summary>
            Deletes the user spellingdictionary.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:Litium.Foundation.Data.ISpellingDictionaryDataProvider.GetUserSpellingDictionary(System.Guid,System.String)">
            <summary>
            Get the user spellingdictionary.
            </summary>
            <param name="userID">The user ID.</param>
            <param name="language">The language.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Data.ISpellingDictionaryDataProvider.UpdateUserSpellingDictionary(Litium.Foundation.Carriers.SpellingDictionaryCarrier)">
            <summary>
            Updates the user spellingdictionary.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:Litium.Foundation.Data.ISpellingDictionaryDataProvider.UserSpellingDictionaryExists(System.Guid,System.String)">
            <summary>
            Check to see if the user-spellingdictionary exists
            </summary>
            <param name="userID">The user ID.</param>
            <param name="language">The language.</param>
            <returns></returns>
        </member>
        <member name="T:Litium.Foundation.Data.MSSQL.ModulePanelDataProvider">
            <summary>
            Panels data provider.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Data.MSSQL.DataProvider">
            <summary>
            Abstract data provider class from which all other providers inherit.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.DataProvider.#ctor(Litium.Foundation.Data.MSSQL.DAL)">
            <summary>
            Constructor.
            </summary>
            <param name="dal">Data access layer.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.DataProvider.AddObject(System.Collections.Hashtable,System.Guid,System.Object)">
            <summary>
            Add an object to an array in a Hastable using a key.  
            </summary>
            <param name="hashtable">Hashtable.</param>
            <param name="key">Key.</param>
            <param name="inputObject">Object to add.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.DataProvider.ConvertEnabledFromCarrierToDB(System.Boolean)">
            <summary>
            Converts the enabled value (Groups and Users) carrier to db. 
            </summary>
            <param name="enabledValue">Carrier value.</param>
            <returns>The database value.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.DataProvider.ConvertEnabledFromDBToCarrier(System.Int16)">
            <summary>
            Converts the enabled value (Groups and Users) db to carrier.
            </summary>
            <param name="enabledValue">Database value.</param>
            <returns>The carrier value.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.DataProvider.GetIsTrue(System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns value of the ouput parameter IsTrue for given sql command object.
            </summary>
            <param name="sqlCommand">A sql command object.</param>
            <returns>Value of the ouput parameter IsTrue.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.DataProvider.GetItemCount(System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns value of the ouput parameter ItemCount for given sql command object.
            </summary>
            <param name="sqlCommand">A sql command object.</param>
            <returns>Value of the ouput parameter ItemCount.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.DataProvider.GetObjects(System.Guid,System.Collections.Hashtable)">
            <summary>
            Returns the array list (containing objects) at a key of an hashtable.
            Returns an empty array list if the key does not exist in the hashtable.
            </summary>
            <param name="key">Key.</param>
            <param name="objects">Hashtable contiaining objects.</param>
            <returns>Array list (containing objects) at a key of an hashtable.
            Returns an empty array list if the key does not exist in the hashtable.
            </returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.DataProvider.GetReturnCode(System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns value of the ouput parameter ReturnCode for given sql command object.
            </summary>
            <param name="sqlCommand">A sql command object.</param>
            <returns>Value of the output parameter ReturnCode.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.DataProvider.HandleError(System.Exception,System.String)">
            <summary>
            Handles a simple error. 
            If the error is a foundation error it will be passed along by the catch calling this method.
            Otherwise the error will be logged, wraped in a DALException and rethrown.
            </summary>
            <param name="e">Exception.</param>
            <param name="title">Title of the error.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.DataProvider.HandleError(System.Exception,System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Handles an error with transaction. 
            If the error is a foundation error it will passed along by the catch calling this method after a transaction roll back.
            Otherwise the error will be logged, wraped in a DALException and rethrown after a transaction roll back
            (Error has to be logged before transaction roll back).
            </summary>
            <param name="e">Exception.</param>
            <param name="title">Title of the error.</param>
            <param name="localTransaction">Local transaction or null.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.DataProvider.LogAndThrowDALException(System.String,System.String,Litium.Foundation.Log.LogLevels)">
            <summary>
            Throws a DAL exception. Exception will be logged before throwing it. 
            </summary>
            <param name="title">Title of the error.</param>
            <param name="text">Text of the error.</param>
            <param name="logLevel">Log level.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.DataProvider.LogAndThrowDALException(System.String,System.Exception,Litium.Foundation.Log.LogLevels)">
            <summary>
            Throws a DAL exception. Exception will be logged before throwing it. 
            </summary>
            <param name="title">Title of the error.</param>
            <param name="e">Error object.</param>
            <param name="logLevel">Log level.</param>
        </member>
        <member name="F:Litium.Foundation.Data.MSSQL.ModulePanelDataProvider.PARAMETER_LAST_UPDATED_DATE">
            <summary>
            Parameter name for last updated date.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Data.MSSQL.ModulePanelDataProvider.PARAMETER_LAST_UPDATED_USER_ID">
            <summary>
            Parameter name for last updated user ID.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Data.MSSQL.ModulePanelDataProvider.PARAMETER_ID">
            <summary>
            Id
            </summary>
        </member>
        <member name="F:Litium.Foundation.Data.MSSQL.ModulePanelDataProvider.PARAMETER_MODULE_PANEL_ID">
            <summary>
            ModulePanel Id
            </summary>
        </member>
        <member name="F:Litium.Foundation.Data.MSSQL.ModulePanelDataProvider.PARAMETER_LANGUAGE_ID">
            <summary>
            Language Id for title
            </summary>
        </member>
        <member name="F:Litium.Foundation.Data.MSSQL.ModulePanelDataProvider.PARAMETER_TITLES">
            <summary>
            Titles
            </summary>
        </member>
        <member name="F:Litium.Foundation.Data.MSSQL.ModulePanelDataProvider.PARAMETER_TITLE">
            <summary>
            Title
            </summary>
        </member>
        <member name="F:Litium.Foundation.Data.MSSQL.ModulePanelDataProvider.PARAMETER_NAME">
            <summary>
            Name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Data.MSSQL.ModulePanelDataProvider.PARAMETER_ICON_PATH">
            <summary>
            Icon Path
            </summary>
        </member>
        <member name="F:Litium.Foundation.Data.MSSQL.ModulePanelDataProvider.PARAMETER_CONTENT_PANEL_PATH">
            <summary>
            Content Panel Path
            </summary>
        </member>
        <member name="F:Litium.Foundation.Data.MSSQL.ModulePanelDataProvider.PARAMETER_ADMIN_PANEL_PATH">
            <summary>
            Admin Panel Path
            </summary>
        </member>
        <member name="F:Litium.Foundation.Data.MSSQL.ModulePanelDataProvider.PARAMETER_EXISTS">
            <summary>
            Admin Panel Path
            </summary>
        </member>
        <member name="F:Litium.Foundation.Data.MSSQL.ModulePanelDataProvider.PARAMETER_ENABLED">
            <summary>
            Enabled.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Data.MSSQL.ModulePanelDataProvider.SP_CREATE">
            <summary>
            Name of the stored procedure for creating records.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Data.MSSQL.ModulePanelDataProvider.SP_DELETE">
            <summary>
            Name of the stored procedure for deleting records.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Data.MSSQL.ModulePanelDataProvider.SP_EXISTS_NAME">
            <summary>
            Name of the stored procedure for checking the existence of records.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Data.MSSQL.ModulePanelDataProvider.SP_EXISTS_ID">
            <summary>
            Name of the stored procedure for checking the existence of records.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Data.MSSQL.ModulePanelDataProvider.SP_GET_ALL">
            <summary>
            Get all.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Data.MSSQL.ModulePanelDataProvider.SP_GET_BY_NAME">
            <summary>
            Name of the stored procedure for retrieving records.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Data.MSSQL.ModulePanelDataProvider.SP_GET_BY_ID">
            <summary>
            Name of the stored procedure for retrieving records.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Data.MSSQL.ModulePanelDataProvider.SP_UPDATE">
            <summary>
            Name of the stored procedure for updating records. 
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.ModulePanelDataProvider.#ctor(Litium.Foundation.Data.MSSQL.DAL)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Data.MSSQL.ModulePanelDataProvider"/> class.
            </summary>
            <param name="dal">Data access layer.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.ModulePanelDataProvider.Exists(System.Guid,System.Guid)">
            <summary>
            Returns whether an entity exists or not.
            </summary>
            <param name="moduleID">The module ID.</param>
            <param name="id">The entity id.</param>
            <returns>
            	<c>true</c> if an entity exists otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.ModulePanelDataProvider.Exists(System.Guid,System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Existses the specified id.
            </summary>
            <param name="moduleID">The module ID.</param>
            <param name="id">The id.</param>
            <param name="openCommand">The open command.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.ModulePanelDataProvider.Exists(System.Guid,System.String)">
            <summary>
            check whether an panel exists with specified name
            </summary>
            <param name="moduleID">The module ID.</param>
            <param name="name">The name.</param>
            <returns>true if exists, false otherwise</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.ModulePanelDataProvider.Exists(System.Guid,System.String,System.Data.SqlClient.SqlCommand)">
            <summary>
            check whether an panel exists with specified name
            </summary>
            <param name="moduleID">The module ID.</param>
            <param name="name">The name.</param>
            <param name="openCommand">The open command.</param>
            <returns>true if exists, false otherwise</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.ModulePanelDataProvider.Get(System.Guid,System.Guid)">
            <summary>
            Returns an entity.
            </summary>
            <param name="moduleID">The module ID.</param>
            <param name="id">The entity id.</param>
            <returns>An entity.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.ModulePanelDataProvider.Get(System.Guid,System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Gets the specified id.
            </summary>
            <param name="moduleID">The module ID.</param>
            <param name="id">The id.</param>
            <param name="openCommand">The open command.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.ModulePanelDataProvider.Get(System.Guid,System.String)">
            <summary>
            Returns an entity.
            </summary>
            <param name="moduleID">The module ID.</param>
            <param name="name">The name.</param>
            <returns>An entity.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.ModulePanelDataProvider.Get(System.Guid,System.String,System.Data.SqlClient.SqlCommand)">
            <summary>
            Gets the specified name.
            </summary>
            <param name="moduleID">The module ID.</param>
            <param name="name">The name.</param>
            <param name="openCommand">The open command.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.ModulePanelDataProvider.Delete(System.Guid,System.Guid)">
            <summary>
            Deletes an entity.
            </summary>
            <param name="moduleID">The module ID.</param>
            <param name="id">Id of the entity.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.ModulePanelDataProvider.Delete(System.Guid,System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes the address.
            </summary>
            <param name="moduleID">The module ID.</param>
            <param name="id">Address id.</param>
            <param name="openCommand">Open sql command object if this function is in a transaction
            otherwise null.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.ModulePanelDataProvider.Update(System.Guid,Litium.Foundation.Carriers.ModulePanelCarrier)">
            <summary>
            Updates an entity.
            </summary>
            <param name="moduleID">The module ID.</param>
            <param name="carrier">The entity carrier.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.ModulePanelDataProvider.Update(System.Guid,Litium.Foundation.Carriers.ModulePanelCarrier,System.Data.SqlClient.SqlCommand)">
            <summary>
            Updates the specified carrier.
            </summary>
            <param name="moduleID">The module ID.</param>
            <param name="carrier">The carrier.</param>
            <param name="openCommand">The open command.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.ModulePanelDataProvider.Create(System.Guid,Litium.Foundation.Carriers.ModulePanelCarrier)">
            <summary>
            Creates en entity.
            </summary>
            <param name="moduleID">The module ID.</param>
            <param name="carrier">Entity carrier.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.ModulePanelDataProvider.Create(System.Guid,Litium.Foundation.Carriers.ModulePanelCarrier,System.Data.SqlClient.SqlCommand)">
            <summary>
            Creates en entity.
            </summary>
            <param name="moduleID">The module ID.</param>
            <param name="carrier">Entity carrier.</param>
            <param name="openCommand">The open command.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.ModulePanelDataProvider.GetAll(System.Guid)">
            <summary>
            Gets all Panels.
            </summary>
            <param name="moduleID">The module ID.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.ModulePanelDataProvider.GetAll(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Gets all.
            </summary>
            <param name="moduleID">The module ID.</param>
            <param name="openCommand">The open command.</param>
            <returns>Array of Panels.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.ModulePanelDataProvider.ReadGetModulePanelResult(System.Collections.Generic.ICollection{Litium.Foundation.Carriers.ModulePanelCarrier},System.Data.SqlClient.SqlDataReader)">
            <summary>
            Reads the get add on result.
            </summary>
            <param name="result">The result.</param>
            <param name="reader">The reader.</param>
        </member>
        <member name="T:Litium.Foundation.Data.MSSQL.CurrencyDataProvider">
            <summary>
            Currency data provider.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Data.MSSQL.CurrencyDataProvider.PARAMETER_CURRENCY_CODE">
            <summary>
            Parameter name of the currency code.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Data.MSSQL.CurrencyDataProvider.PARAMETER_CURRENCY_ID">
            <summary>
            Parameter name of the currency ID.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Data.MSSQL.CurrencyDataProvider.PARAMETER_EXCHANGE_RATE">
            <summary>
            Parameter name of the exchange rate.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Data.MSSQL.CurrencyDataProvider.PARAMETER_IS_BASE_CURRENCY">
            <summary>
            Parameter name of the value that indicates if its a base currency.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Data.MSSQL.CurrencyDataProvider.PARAMETER_TEXT_FORMAT">
            <summary>
            Parameter name of the text format.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Data.MSSQL.CurrencyDataProvider.SP_CREATE">
            <summary>
            Name of the stored procedure for creating records.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Data.MSSQL.CurrencyDataProvider.SP_DELETE">
            <summary>
            Name of the stored procedure for deleting currency.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Data.MSSQL.CurrencyDataProvider.SP_EXISTS">
            <summary>
            Name of the stored procedure for checking the existence of records.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Data.MSSQL.CurrencyDataProvider.SP_GET">
            <summary>
            Name of the stored procedure for retrieving a record.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Data.MSSQL.CurrencyDataProvider.SP_GET_BY_CURRENCY_CODE">
            <summary>
            Name of the stored procedure for retrieving records by the currency code. 
            </summary>
        </member>
        <member name="F:Litium.Foundation.Data.MSSQL.CurrencyDataProvider.SP_GET_CURRENCIES_COUNT">
            <summary>
            Name of the stored procedure used for retrieving currencies count.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Data.MSSQL.CurrencyDataProvider.SP_GET_LIST">
            <summary>
            Name of the stored procedure for retrieving one or more records.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Data.MSSQL.CurrencyDataProvider.SP_UPDATE">
            <summary>
            Name of the stored procedure for updating records.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Data.MSSQL.CurrencyDataProvider.RETRIEVE_CURRENCY_ERROR">
            <summary>
            Error message to be displayed when currencies cannot be retrieved.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.CurrencyDataProvider.#ctor(Litium.Foundation.Data.MSSQL.DAL)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Data.MSSQL.CurrencyDataProvider"/> class using the 
            parameters supplied. 
            </summary>
            <param name="dal">Data access layer.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.CurrencyDataProvider.Create(Litium.Foundation.Carriers.CurrencyCarrier)">
            <summary>
            Creates a currency.
            </summary>
            <param name="carrier">The currency carrier.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.CurrencyDataProvider.Delete(System.Guid)">
            <summary>
            Deletes a currency.
            </summary>
            <param name="id">The currency id.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.CurrencyDataProvider.Exists(System.Guid)">
            <summary>
            Whether a currency exists or not.
            </summary>
            <param name="id">The currency id.</param>
            <returns><c>true</c> if a currency exists otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.CurrencyDataProvider.Get(System.Guid)">
            <summary>
            Reeturns a currency.
            </summary>
            <param name="id">The currency id.</param>
            <returns>A currency.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.CurrencyDataProvider.Get(System.String)">
            <summary>
            Returns a currency.
            </summary>
            <param name="currencyCode">The currency code.</param>
            <returns>A currency.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.CurrencyDataProvider.GetCurrenciesCount">
            <summary>
            Gets the number of currencies.
            </summary>
            <returns>Number of currencies.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.CurrencyDataProvider.GetList">
            <summary>
            Gets all currencies.
            </summary>
            <returns>The list of currencies.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.CurrencyDataProvider.GetList(System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all currencies.
            </summary>
            <param name="openCommand">Open sql command object if this function is in a transaction 
            otherwise null.</param>
            <returns>A list of all currencies.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.CurrencyDataProvider.Update(Litium.Foundation.Carriers.CurrencyCarrier)">
            <summary>
            Updates the currency.
            </summary>
            <param name="carrier">The carrier.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.CurrencyDataProvider.Create(Litium.Foundation.Carriers.CurrencyCarrier,System.Data.SqlClient.SqlCommand)">
            <summary>
            Creates the currency.
            </summary>
            <param name="carrier">The carrier.</param>
            <param name="openCommand">Open sql command object if this function is in a transaction 
            otherwise null.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.CurrencyDataProvider.Delete(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes a currency.
            </summary>
            <param name="id">The currency id.</param>
            <param name="openCommand">Open sql command object if this function is in a transaction 
            otherwise null.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.CurrencyDataProvider.Exists(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns whether a currency exists or not.
            </summary>
            <param name="id">Currency id.</param>
            <param name="openCommand">Open sql command object if this function is in a transaction 
            otherwise null.</param>
            <returns><c>true</c> if the currency exists otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.CurrencyDataProvider.Get(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns a currency.
            </summary>
            <param name="id">The currency id.</param>
            <param name="openCommand">Open sql command object if this function is in a transaction 
            otherwise null.</param>
            <returns>A currency.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.CurrencyDataProvider.Get(System.String,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns a currency.
            </summary>
            <param name="currencyCode">The currency code.</param>
            <param name="openCommand">Open sql command object if this function is in a transaction 
            otherwise null.</param>
            <returns>A currency.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.CurrencyDataProvider.GetCurrenciesCount(System.Data.SqlClient.SqlCommand)">
            <summary>
            Gets the number of currencies.
            </summary>
            <param name="openCommand">Open sql command object if this function is in a transaction 
            otherwise null.</param>
            <returns>Amount of currencies.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.CurrencyDataProvider.GetCurrenciesFromReader(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Reads and returns currencies as currency carrier list.
            </summary>
            <param name="reader">The reader from which the data is to be read.</param>
            <returns>Currencies as currency carrier list.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.CurrencyDataProvider.Update(Litium.Foundation.Carriers.CurrencyCarrier,System.Data.SqlClient.SqlCommand)">
            <summary>
            Updates a currency.
            </summary>
            <param name="carrier">The currency carrier.</param>
            <param name="openCommand">Open sql command object if this function is in a transaction 
            otherwise null.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.CurrencyDataProvider.GetCurrencyFromReader(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Reads and returns a currency as currency carrier.
            </summary>
            <param name="reader">The reader from which the data is to be read.</param>
            <returns>Currency as currency carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.SpellingDictionaryDataProvider.#ctor(Litium.Foundation.Data.MSSQL.DAL)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Data.MSSQL.SpellingDictionaryDataProvider"/> class.
            </summary>
            <param name="dal">Data access layer.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.SpellingDictionaryDataProvider.CreateSpellingDictionary(Litium.Foundation.Carriers.SpellingDictionaryCarrier)">
            <summary>
            Creates the dictionary.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.SpellingDictionaryDataProvider.DeleteSpellingDictionary(Litium.Foundation.Carriers.SpellingDictionaryCarrier)">
            <summary>
            Deletes the dictionary.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.SpellingDictionaryDataProvider.SpellingDictionaryExists(System.String)">
            <summary>
            If dictionary exists?
            </summary>
            <param name="language">The language.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.SpellingDictionaryDataProvider.GetSpellingDictionary(System.String)">
            <summary>
            Get the spellingdictionary.
            </summary>
            <param name="language">The language.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.SpellingDictionaryDataProvider.UpdateSpellingDictionary(Litium.Foundation.Carriers.SpellingDictionaryCarrier)">
            <summary>
            Updates the dictionary.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.SpellingDictionaryDataProvider.CreateUserSpellingDictionary(Litium.Foundation.Carriers.SpellingDictionaryCarrier)">
            <summary>
            Creates the user dictionary.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.SpellingDictionaryDataProvider.DeleteUserSpellingDictionary(Litium.Foundation.Carriers.SpellingDictionaryCarrier)">
            <summary>
            Deletes the user dictionary.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.SpellingDictionaryDataProvider.GetUserSpellingDictionary(System.Guid,System.String)">
            <summary>
            Selects the user dictionary.
            </summary>
            <param name="userID">The user ID.</param>
            <param name="language">The language.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.SpellingDictionaryDataProvider.UpdateUserSpellingDictionary(Litium.Foundation.Carriers.SpellingDictionaryCarrier)">
            <summary>
            Updates the user dictionary.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.SpellingDictionaryDataProvider.UserSpellingDictionaryExists(System.Guid,System.String)">
            <summary>
            Users the dictionary exists.
            </summary>
            <param name="userID">The user ID.</param>
            <param name="languages">The languages.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.SpellingDictionaryDataProvider.CreateSpellingDictionary(Litium.Foundation.Carriers.SpellingDictionaryCarrier,System.Data.SqlClient.SqlCommand)">
            <summary>
            Creates the dictionary.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="openCommand">The open command.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.SpellingDictionaryDataProvider.SpellingDictionaryExists(System.String,System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Dictionaries the exists.
            </summary>
            <param name="language">The language.</param>
            <param name="userID">The user ID.</param>
            <param name="openCommand">The open command.</param>
            <returns>If exists [True] oterwise [False]</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.SpellingDictionaryDataProvider.DeleteSpellingDictionary(Litium.Foundation.Carriers.SpellingDictionaryCarrier,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes the dictionary.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="openCommand">The open command.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.SpellingDictionaryDataProvider.GetSpellingDictionary(System.String,System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Get the dictionary.
            </summary>
            <param name="language">The language.</param>
            <param name="userID">The user ID.</param>
            <param name="openCommand">The open command.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.SpellingDictionaryDataProvider.UpdateSpellingDictionary(Litium.Foundation.Carriers.SpellingDictionaryCarrier,System.Data.SqlClient.SqlCommand)">
            <summary>
            Updates the dictionary.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="openCommand">The open command.</param>
        </member>
        <member name="T:Litium.Foundation.Data.MSSQL.LogDataProvider">
            <summary>
            Data provider tier functions for log entries.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Data.ILogDataProvider">
            <summary>
            Data provider tier functions for log entries.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.ILogDataProvider.CreateLogEntry(System.String,System.String,Litium.Foundation.Log.LogLevels)">
            <summary>
            Creates a new log entry in the database.
            </summary>
            <param name="title">Title.</param>
            <param name="text">Text.</param>
            <param name="level">Level.</param>
        </member>
        <member name="M:Litium.Foundation.Data.ILogDataProvider.CreateLogEntry(System.String,System.Exception,Litium.Foundation.Log.LogLevels)">
            <summary>
            Creates a new log entry in the database.
            </summary>
            <param name="title">Title.</param>
            <param name="error">Exception.</param>
            <param name="level">Level.</param>
        </member>
        <member name="M:Litium.Foundation.Data.ILogDataProvider.GetAllLogEntries(System.Int16)">
            <summary>
            Returns all log entries for a solution, sorted by date.
            </summary>
            <param name="level">The min level to get.</param>
            <returns>A data table [title, message text, level, date and time, webServerIP].</returns>
        </member>
        <member name="M:Litium.Foundation.Data.ILogDataProvider.GetLogEntries(System.Int32,System.Int32,System.Int16,System.DateTime,System.DateTime,System.String,System.String,System.Boolean,System.Int32@)">
            <summary>
            Gets the log entries.
            </summary>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="level">The level.</param>
            <param name="maxDateFilter">The max date filter.</param>
            <param name="minDateFilter">The min date filter.</param>
            <param name="webserverFilter">The webserver filter.</param>
            <param name="orderBy">The order by.</param>
            <param name="sortDesc">if set to <c>true</c> [sort desc].</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Data.ILogDataProvider.GetLogEntry(System.Int64)">
            <summary>
            Gets the log entry by id
            </summary>
            <param name="logID">The log ID.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Data.ILogDataProvider.DeleteAllLogEntries">
            <summary>
            Deletes all log entries.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.ILogDataProvider.TruncateLog(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Truncate Log entrys.
            </summary>
            <param name="logLevelDebug">Max number of days to keep, -1 to not truncate.</param>
            <param name="logLevelInfo">Max number of days to keep, -1 to not truncate.</param>
            <param name="logLevelWarn">Max number of days to keep, -1 to not truncate.</param>
            <param name="logLevelError">Max number of days to keep, -1 to not truncate.</param>
            <param name="logLevelFatal">Max number of days to keep, -1 to not truncate.</param>
            <param name="maxNumberOfEntries">Keep maximum of entries, -1 to not truncatate</param>
        </member>
        <member name="M:Litium.Foundation.Data.ILogDataProvider.GetAllLogSources">
            <summary>
            Gets all logging instances.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.LogDataProvider.#ctor(Litium.Foundation.Data.MSSQL.DAL)">
            <summary>
            Constructor.
            </summary>
            <param name="dal">Data access layer.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.LogDataProvider.CreateLogEntry(System.String,System.String,Litium.Foundation.Log.LogLevels)">
            <summary>
            Creates a new log entry in the database.
            </summary>
            <param name="title">Title.</param>
            <param name="text">Text.</param>
            <param name="level">Level.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.LogDataProvider.CreateLogEntry(System.String,System.Exception,Litium.Foundation.Log.LogLevels)">
            <summary>
            Creates a new log entry in the database.
            </summary>
            <param name="title">Title.</param>
            <param name="error">Exception.</param>
            <param name="level">Level.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.LogDataProvider.GetAllLogEntries(System.Int16)">
            <summary>
            Returns all log entries for a solution, sorted by date.
            </summary>
            <param name="level">The min level to get.</param>
            <returns>
            A data table [title, message text, level, date &amp; time, webServerIP].
            </returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.LogDataProvider.DeleteAllLogEntries">
            <summary>
            Deletes all log entries.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.LogDataProvider.TruncateLog(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Truncate Log entrys.
            </summary>
            <param name="logLevelDebug">Max number of days to keep, -1 to not truncate.</param>
            <param name="logLevelInfo">Max number of days to keep, -1 to not truncate.</param>
            <param name="logLevelWarn">Max number of days to keep, -1 to not truncate.</param>
            <param name="logLevelError">Max number of days to keep, -1 to not truncate.</param>
            <param name="logLevelFatal">Max number of days to keep, -1 to not truncate.</param>
            <param name="maxNumberOfEntries">Keep maximum of entries, -1 to not truncatate</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.LogDataProvider.GetAllLogSources">
            <summary>
            Gets all logging instances.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.LogDataProvider.GetLogEntries(System.Int32,System.Int32,System.Int16,System.DateTime,System.DateTime,System.String,System.String,System.Boolean,System.Int32@)">
            <summary>
            Gets the log entries.
            </summary>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="level">The level.</param>
            <param name="maxDateFilter">The max date filter.</param>
            <param name="minDateFilter">The min date filter.</param>
            <param name="webserverFilter">The webserver filter.</param>
            <param name="orderBy">The order by.</param>
            <param name="sortDesc">if set to <c>true</c> [sort desc].</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.LogDataProvider.GetLogEntry(System.Int64)">
            <summary>
            Gets the log entry by id
            </summary>
            <param name="logID">The log ID.</param>
            <returns></returns>
        </member>
        <member name="T:Litium.Foundation.Data.MSSQL.StringsDataProvider">
            <summary>
            Data provider tier functions for system and module strings.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Data.IStringsDataProvider">
            <summary>
            Data provider tier functions for system and module strings.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.IStringsDataProvider.DeleteAllModuleStrings(System.Guid)">
            <summary>
            Delete all module strings.
            </summary>
            <param name="moduleID">Module ID.</param>
        </member>
        <member name="M:Litium.Foundation.Data.IStringsDataProvider.DeleteAllSystemStrings">
            <summary>
            Delete all system strings.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.IStringsDataProvider.DeleteModuleString(System.Guid,System.String,System.Guid)">
            <summary>
            Delete a module string value.
            Does not throw an exception if the value does not exist.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="key">Key.</param>
            <param name="languageID">Language ID.</param>
        </member>
        <member name="M:Litium.Foundation.Data.IStringsDataProvider.DeleteModuleStringKey(System.Guid,System.String)">
            <summary>
            Delete all module strings for a key.
            Does not throw an exception if the key does not exist.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="key">Key.</param>
        </member>
        <member name="M:Litium.Foundation.Data.IStringsDataProvider.DeleteSystemString(System.String,System.Guid)">
            <summary>
            Delete a system string value.
            Does not throw an exception if the value does not exist.
            </summary>
            <param name="key">Key.</param>
            <param name="languageID">Language ID.</param>
        </member>
        <member name="M:Litium.Foundation.Data.IStringsDataProvider.DeleteSystemStringKey(System.String)">
            <summary>
            Delete all system strings for a key.
            Does not throw an exception if the key does not exist.
            </summary>
            <param name="key">Key.</param>
        </member>
        <member name="M:Litium.Foundation.Data.IStringsDataProvider.GetAllModuleStrings(System.Guid)">
            <summary>
            Returns all module strings for a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <returns>All module strings a module.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IStringsDataProvider.GetAllModuleStrings(System.Guid,System.Guid)">
            <summary>
            Returns all module strings of a language for a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="languageID">Language ID.</param>
            <returns>All module strings a module.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IStringsDataProvider.GetAllSystemStrings">
            <summary>
            Returns all system strings.
            </summary>
            <returns>All system strings.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IStringsDataProvider.GetAllSystemStrings(System.Guid)">
            <summary>
            Returns all system strings of a language.
            </summary>
            <param name="languageID">Language ID.</param>
            <returns>All system strings.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IStringsDataProvider.GetModuleStringsForKey(System.Guid,System.String)">
            <summary>
            Returns all module strings for a key.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="key">Key.</param>
            <returns>All module strings for a key.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IStringsDataProvider.GetSystemStringsForKey(System.String)">
            <summary>
            Returns all system strings for a key.
            </summary>
            <param name="key">Key.</param>
            <returns>All system strings for a key.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IStringsDataProvider.SetModuleString(Litium.Foundation.Carriers.ModuleStringCarrier)">
            <summary>
            Creates or updates a module string.
            If the string does not exist it is created.
            </summary>
            <param name="moduleString">Module string carrier.</param>
        </member>
        <member name="M:Litium.Foundation.Data.IStringsDataProvider.SetModuleStrings(Litium.Foundation.Carriers.ModuleStringCollectionCarrier,System.Boolean)">
            <summary>
            Creates or updates module strings.
            If the strings do not exist they are created.
            </summary>
            <param name="moduleStrings">Module string collection carrier.</param>
            <param name="replaceExistingValues">Whether to replace existing values or not.</param>
        </member>
        <member name="M:Litium.Foundation.Data.IStringsDataProvider.SetSystemString(Litium.Foundation.Carriers.SystemStringCarrier)">
            <summary>
            Creates or updates a system string.
            If the string does not exist it is created.
            </summary>
            <param name="systemString">System string carrier.</param>
        </member>
        <member name="M:Litium.Foundation.Data.IStringsDataProvider.SetSystemStrings(Litium.Foundation.Carriers.SystemStringCollectionCarrier,System.Boolean)">
            <summary>
            Creates or updates system strings.
            If the strings do not exist they are created.
            </summary>
            <param name="systemStrings">System string collection carrier.</param>
            <param name="replaceExistingValues">Whether to replace existing values or not.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.StringsDataProvider.#ctor(Litium.Foundation.Data.MSSQL.DAL)">
            <summary>
            Constructor
            </summary>
            <param name="dal">Data access layer.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.StringsDataProvider.DeleteAllModuleStrings(System.Guid)">
            <summary>
            Delete all module strings.
            </summary>
            <param name="moduleID">Module ID.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.StringsDataProvider.DeleteAllSystemStrings">
            <summary>
            Delete all system strings.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.StringsDataProvider.DeleteModuleString(System.Guid,System.String,System.Guid)">
            <summary>
            Delete a module string value.
            Does not throw an exception if the value doesn't exist.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="key">Key.</param>
            <param name="languageID">Language ID.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.StringsDataProvider.DeleteModuleStringKey(System.Guid,System.String)">
            <summary>
            Delete all module strings for a key.
            Does not throw an exception if the key does not exist.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="key">Key.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.StringsDataProvider.DeleteSystemString(System.String,System.Guid)">
            <summary>
            Delete a system string value.
            Does not throw an exception if the value does not exist.
            </summary>
            <param name="key">Key.</param>
            <param name="languageID">Language ID.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.StringsDataProvider.DeleteSystemStringKey(System.String)">
            <summary>
            Delete all system strings for a key.
            Does not throw an exception if the key does not exist.
            </summary>
            <param name="key">Key.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.StringsDataProvider.GetAllModuleStrings(System.Guid)">
            <summary>
            Returns all module strings for a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <returns>All module strings a module.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.StringsDataProvider.GetAllModuleStrings(System.Guid,System.Guid)">
            <summary>
            Returns all module strings in a language for a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="languageID">Language ID.</param>
            <returns>All module strings a module.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.StringsDataProvider.GetAllSystemStrings">
            <summary>
            Returns all system strings.
            </summary>
            <returns>All system strings.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.StringsDataProvider.GetAllSystemStrings(System.Guid)">
            <summary>
            Returns all system strings in a language.
            </summary>
            <param name="languageID">Language ID.</param>
            <returns>All system strings.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.StringsDataProvider.GetModuleStringsForKey(System.Guid,System.String)">
            <summary>
            Returns all module strings for a key.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="key">Key.</param>
            <returns>All module strings for a key.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.StringsDataProvider.GetSystemStringsForKey(System.String)">
            <summary>
            Returns all system strings for a key.
            </summary>
            <param name="key">Key.</param>
            <returns>All system strings for a key.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.StringsDataProvider.SetModuleString(Litium.Foundation.Carriers.ModuleStringCarrier)">
            <summary>
            Creates or updates a module string.
            If the string does not exist it is created.
            </summary>
            <param name="moduleString">Module string carrier.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.StringsDataProvider.SetModuleStrings(Litium.Foundation.Carriers.ModuleStringCollectionCarrier,System.Boolean)">
            <summary>
            Creates or updates module strings.
            If the strings do not exist they are created.
            </summary>
            <param name="moduleStrings">Module string collection carrier.</param>
            <param name="replaceExistingValues">Whether to replace existing values or not.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.StringsDataProvider.SetSystemString(Litium.Foundation.Carriers.SystemStringCarrier)">
            <summary>
            Creates or updates a system string.
            If the string does not exist it is created.
            </summary>
            <param name="systemString">System string carrier.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.StringsDataProvider.SetSystemStrings(Litium.Foundation.Carriers.SystemStringCollectionCarrier,System.Boolean)">
            <summary>
            Creates or updates system strings.
            If the strings do not exist they are created.
            </summary>
            <param name="systemStrings">System string collection carrier.</param>
            <param name="replaceExistingValues">Whether to replace existing values or not.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.StringsDataProvider.DeleteAllModuleStrings(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Delete all module strings.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="openCommand">The open command.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.StringsDataProvider.DeleteAllSystemStrings(System.Data.SqlClient.SqlCommand)">
            <summary>
            Delete all system strings.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.StringsDataProvider.DeleteModuleString(System.Guid,System.String,System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Delete a module string value.
            Does not throw an exception if the value does not exist.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="key">Key.</param>
            <param name="languageID">Language ID.</param>
            <param name="openCommand">SQL command.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.StringsDataProvider.DeleteModuleStringKey(System.Guid,System.String,System.Data.SqlClient.SqlCommand)">
            <summary>
            Delete all module strings for a key.
            Does not throw an exception if the key does not exist.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="key">Key.</param>
            <param name="openCommand">SQL command.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.StringsDataProvider.DeleteSystemString(System.String,System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Delete a system string value.
            Does not throw an exception if the value does not exist.
            </summary>
            <param name="key">Key.</param>
            <param name="languageID">Language ID.</param>
            <param name="openCommand">SQL command.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.StringsDataProvider.DeleteSystemStringKey(System.String,System.Data.SqlClient.SqlCommand)">
            <summary>
            Delete all system strings for a key.
            Does not throw an exception if the key does not exist.
            </summary>
            <param name="key">Key.</param>
            <param name="openCommand">SQL command.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.StringsDataProvider.ExistsString(Litium.Foundation.Carriers.ModuleStringCarrier,Litium.Foundation.Carriers.ModuleStringCarrier[])">
            <summary>
            Returns true if the given string carrier exists in the given string carrier array otherwise false.
            </summary>
            <param name="stringCarrier">String carrier.</param>
            <param name="strings">String carrier array.</param>
            <returns>True if the given string carrier exists in the given string carrier array otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.StringsDataProvider.GetAllModuleStrings(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all module strings for a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="openCommand">SQL command.</param>
            <returns>All module strings of a module.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.StringsDataProvider.GetAllModuleStrings(System.Guid,System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all module strings for a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="languageID">Language ID.</param>
            <param name="openCommand">SQL command.</param>
            <returns>All module strings of a module.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.StringsDataProvider.GetAllSystemStrings(System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all system strings.
            </summary>
            <param name="openCommand">SQL command.</param>
            <returns>All system strings.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.StringsDataProvider.GetAllSystemStrings(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all system strings in a language.
            </summary>
            <param name="languageID">Language ID.</param>
            <param name="openCommand">SQL command.</param>
            <returns>All system strings.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.StringsDataProvider.GetModuleStringsForKey(System.Guid,System.String,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all module strings for a key.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="key">Key.</param>
            <param name="openCommand">SQL command.</param>
            <returns>All module strings for a key.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.StringsDataProvider.GetSystemStringsForKey(System.String,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all system strings for a key.
            </summary>
            <param name="key">Key.</param>
            <param name="openCommand">SQL command.</param>
            <returns>All system strings for a key.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.StringsDataProvider.SetModuleString(Litium.Foundation.Carriers.ModuleStringCarrier,System.Boolean,System.Data.SqlClient.SqlCommand)">
            <summary>
            Creates or updates a module string.
            If the string does not exist it is created.
            </summary>
            <param name="moduleString">Module string carrier.</param>
            <param name="replaceExistingValue">Whether to replace existing value or not.</param>
            <param name="openCommand">SQL command.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.StringsDataProvider.SetModuleStrings(Litium.Foundation.Carriers.ModuleStringCollectionCarrier,System.Boolean,System.Data.SqlClient.SqlCommand)">
            <summary>
            Creates or updates module strings.
            If the strings do not exist they are created.
            </summary>
            <param name="moduleStrings">Module string collection carrier.</param>
            <param name="replaceExistingValues">Whether to replace existing values or not.</param>
            <param name="openCommand">SQL command.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.StringsDataProvider.SetSystemString(Litium.Foundation.Carriers.SystemStringCarrier,System.Boolean,System.Data.SqlClient.SqlCommand)">
            <summary>
            Creates or updates a system string.
            If the string does not exist it is created.
            </summary>
            <param name="systemString">System string carrier.</param>
            <param name="replaceExistingValue">Whether to replace existing value or not.</param>
            <param name="openCommand">SQL command.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.StringsDataProvider.SetSystemStrings(Litium.Foundation.Carriers.SystemStringCollectionCarrier,System.Boolean,System.Data.SqlClient.SqlCommand)">
            <summary>
            Creates or updates system strings.
            If the strings do not exist they are created.
            </summary>
            <param name="systemStrings">System string collection carrier.</param>
            <param name="replaceExistingValues">Whether to replace existing values or not.</param>
            <param name="openCommand">SQL command.</param>
        </member>
        <member name="T:Litium.Foundation.Data.MSSQL.PermissionDataProvider">
            <summary>
            Data provider tier functions for permissions.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Data.IPermissionDataProvider">
            <summary>
            Data provider tier functions for permissions.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.CreateCustomPermissionType(Litium.Foundation.Carriers.CustomPermissionTypeCarrier)">
            <summary>
            Creates a new custom permission type in the database.
            </summary>
            <param name="permissionType">Permission type carrier.</param>
            <returns>The new permission type or null.</returns>
            <exception cref="T:Litium.Foundation.Security.CustomPermissionTypeExistsException">Thrown when the custom permission type already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.CreateGroupCustomPermission(Litium.Foundation.Carriers.GroupCustomPermissionCarrier)">
            <summary>
            Creates a new group custom permission in the database.
            </summary>
            <param name="permission">Permission carrier.</param>
            <returns>The new permission or null.</returns>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.CustomPermissionTypeDoesNotExistException">Thrown when the custom permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.CustomGroupPermissionExistsException">Thrown when the custom group permission already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.CreateGroupModulePermission(Litium.Foundation.Carriers.GroupModulePermissionCarrier)">
            <summary>
            Creates a new group module permission in the database.
            </summary>
            <param name="permission">Permission carrier.</param>
            <returns>The new permission or null.</returns>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModulePermissionTypeDoesNotExistException">Thrown when the module permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModuleGroupPermissionExistsException">Thrown when the module group permission already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.CreateGroupSolutionPermission(Litium.Foundation.Carriers.GroupSolutionPermissionCarrier)">
            <summary>
            Creates a new group solution permission in the database.
            </summary>
            <param name="permission">Permission carrier.</param>
            <returns>The new permission or null.</returns>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.SolutionPermissionTypeDoesNotExistException">Thrown when the solution permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.SolutionGroupPermissionExistsException">Thrown when the solution group permission already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.CreateModulePermissionType(Litium.Foundation.Carriers.ModulePermissionTypeCarrier)">
            <summary>
            Creates a new module permission type in the database.
            </summary>
            <param name="permissionType">Permission type carrier.</param>
            <returns>The new permission type or null.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModulePermissionTypeExistsException">Thrown when the module permission type already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.CreateSolutionPermissionType(Litium.Foundation.Carriers.SolutionPermissionTypeCarrier)">
            <summary>
            Creates a new solution permission type in the database.
            </summary>
            <param name="permissionType">Permission type carrier.</param>
            <returns>The new permission type or null.</returns>
            <exception cref="T:Litium.Foundation.Security.SolutionPermissionTypeExistsException">Thrown when the solution permission type already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.CreateUserCustomPermission(Litium.Foundation.Carriers.UserCustomPermissionCarrier)">
            <summary>
            Creates a new user custom permission in the database.
            </summary>
            <param name="permission">Permission carrier.</param>
            <returns>The new permission or null.</returns>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.CustomPermissionTypeDoesNotExistException">Thrown when the custom permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.CustomUserPermissionExistsException">Thrown when the custom user permission already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.CreateUserModulePermission(Litium.Foundation.Carriers.UserModulePermissionCarrier)">
            <summary>
            Creates a new user module permission in the database.
            </summary>
            <param name="permission">Permission carrier.</param>
            <returns>The new permission or null.</returns>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModulePermissionTypeDoesNotExistException">Thrown when the module permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModuleUserPermissionExistsException">Thrown when the module user permission already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.CreateUserSolutionPermission(Litium.Foundation.Carriers.UserSolutionPermissionCarrier)">
            <summary>
            Creates a new user solution permission in the database.
            </summary>
            <param name="permission">Permission carrier.</param>
            <returns>The new permission or null.</returns>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.SolutionPermissionTypeDoesNotExistException">Thrown when the solution permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.SolutionUserPermissionExistsException">Thrown when the solution user permission already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteAllCustomPermissions(System.Guid)">
            <summary>
            Deletes all custom permissions for a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteAllCustomPermissions(System.Guid,System.Guid)">
            <summary>
            Deletes all custom permissions for a module and a key.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="key">Key.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteAllCustomPermissions(System.Guid,System.Int32)">
            <summary>
            Deletes all custom permissions for a module and a permission type.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteAllCustomPermissions(System.Guid,System.Int32,System.Guid)">
            <summary>
            Deletes all custom permissions for a module, permission type and a key.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="key">Key.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteAllCustomPermissionsForGroup(System.Guid,System.Guid)">
            <summary>
            Deletes all custom permissions for a specific group.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <remarks>Does not throw exception if the custom permission type does not exist.</remarks>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteAllCustomPermissionsForGroup(System.Guid,System.Guid,System.Int32)">
            <summary>
            Deletes all custom permissions for a specific group.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <remarks>Does not throw exception if the custom permission type does not exist.</remarks>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteAllCustomPermissionsForUser(System.Guid,System.Guid)">
            <summary>
            Deletes all custom permissions for a specific user and module.
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
            <remarks>Does not throw exception if custom permission type does not exist.</remarks>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteAllCustomPermissionsForUser(System.Guid,System.Guid,System.Int32)">
            <summary>
            Deletes all custom permissions for a specific user and permission type.
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
            <remarks>Does not throw exception if custom permission type does not exist.</remarks>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteAllCustomPermissionTypes(System.Guid)">
            <summary>
            Deletes all custom permission types for a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteAllGroupCustomPermissions(System.Guid)">
            <summary>
            Deletes all group custom permissions for a permission type.
            </summary>
            <param name="moduleID">Module ID.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteAllGroupCustomPermissions(System.Guid,System.Int32)">
            <summary>
            Deletes all group custom permissions for a permission type.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteAllGroupCustomPermissions(System.Guid,System.Int32,System.Guid)">
            <summary>
            Deletes all group custom permissions for a permission type.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="key">Permission key.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteAllGroupModulePermissions(System.Guid)">
            <summary>
            Deletes all group module permissions.
            </summary>
            <param name="moduleID">Module ID.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteAllGroupModulePermissions(System.Guid,System.Int32)">
            <summary>
            Deletes all group module permissions for a permission type.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModulePermissionTypeDoesNotExistException">Thrown when the module permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteAllGroupSolutionPermissions">
            <summary>
            Deletes all group solution permissions.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteAllGroupSolutionPermissions(System.Int32)">
            <summary>
            Deletes all group solution permissions for a permission type.
            </summary>
            <param name="permissionType">Permission type.</param>
            <exception cref="T:Litium.Foundation.Security.SolutionPermissionTypeDoesNotExistException">Thrown when the solution permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteAllModulePermissions(System.Guid)">
            <summary>
            Delete all group and user module permissions.
            </summary>
            <param name="moduleID">Module ID.</param>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteAllModulePermissions(System.Guid,System.Int32)">
            <summary>
            Delete all group and user module permissions for a permission type.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteAllModulePermissionsForGroup(System.Guid)">
            <summary>
            Deletes all module permissions for a specific group.
            </summary>
            <param name="groupID">Group ID.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteAllModulePermissionsForGroup(System.Guid,System.Guid)">
            <summary>
            Deletes all module permissions for a specific group.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteAllModulePermissionsForGroup(System.Guid,System.Int32)">
            <summary>
            Deletes all module permissions for a specific group.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="permissionType">Permission type.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <remarks>Does not throw exception if module permission type does not exist.</remarks>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteAllModulePermissionsForUser(System.Guid)">
            <summary>
            Deletes all module permissions for a specific user.
            </summary>
            <param name="userID">User ID.</param>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteAllModulePermissionsForUser(System.Guid,System.Int32)">
            <summary>
            Deletes all module permissions for a specific user.
            </summary>
            <param name="userID">User ID.</param>
            <param name="permissionType">Permission type.</param>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
            <remarks>Does not throw exception if module permission type does not exist.</remarks>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteAllModulePermissionTypes(System.Guid)">
            <summary>
            Deletes all module permissions types for a module (except built in permission types).
            </summary>
            <param name="moduleID">Module ID.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteAllSolutionPermissions">
            <summary>
            Delete all solution permissions (except for the System user).
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteAllSolutionPermissions(System.Int32)">
            <summary>
            Delete all solution permissions for a permission type (except for the System user).
            </summary>
            <param name="permissionType">Permission type.</param>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteAllSolutionPermissionsForGroup(System.Guid)">
            <summary>
            Deletes all solution permissions for a specific group.
            </summary>
            <param name="groupID">Group ID.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteAllSolutionPermissionsForGroup(System.Guid,System.Int32)">
            <summary>
            Deletes all solution permissions for a specific group.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="permissionType">Permission type.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <remarks>Does not throw exception if solution permission type does not exist.</remarks>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteAllSolutionPermissionsForUser(System.Guid)">
            <summary>
            Deletes all solution permissions for a specific user.
            </summary>
            <param name="userID">User ID.</param>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteAllSolutionPermissionsForUser(System.Guid,System.Int32)">
            <summary>
            Deletes all solution permissions for a specific user.
            </summary>
            <param name="userID">User ID.</param>
            <param name="permissionType">Permission type.</param>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
            <remarks>Does not throw exception if solution permission type does not exist.</remarks>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteAllSolutionPermissionTypes">
            <summary>
            Deletes all solution permissions types for a solution (except built in permission types).
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteAllUserCustomPermissions(System.Guid)">
            <summary>
            Deletes all user custom permissions for a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteAllUserCustomPermissions(System.Guid,System.Int32)">
            <summary>
            Deletes all user custom permissions for a permission type.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteAllUserCustomPermissions(System.Guid,System.Int32,System.Guid)">
            <summary>
            Deletes all user custom permissions for a permission type and key.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="key">Permission key.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteAllUserModulePermissions(System.Guid)">
            <summary>
            Deletes all user module permissions.
            </summary>
            <param name="moduleID">Module ID.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteAllUserModulePermissions(System.Guid,System.Int32)">
            <summary>
            Deletes all user module permissions for a permission type.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModulePermissionTypeDoesNotExistException">Thrown when the module permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteAllUserModulePermissions(System.Guid,System.Guid)">
            <summary>
            Deletes all user module permissions for a user in a module.
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteAllUserSolutionPermissions">
            <summary>
            Deletes all user solution permissions (except the System All permission for the System user).
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteAllUserSolutionPermissions(System.Int32)">
            <summary>
            Deletes all user solution permissions for a permission type (except the System All permission for the System user).
            </summary>
            <param name="permissionType">Permission type.</param>
            <exception cref="T:Litium.Foundation.Security.SolutionPermissionTypeDoesNotExistException">Thrown when the solution permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteCustomPermissionType(System.Guid,System.Int32)">
            <summary>
            Deletes a custom permission type.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <exception cref="T:Litium.Foundation.Security.CustomPermissionTypeDoesNotExistException">Thrown when the custom permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteGroupCustomPermission(System.Guid,System.Guid,System.Int32,System.Guid)">
            <summary>
            Deletes a group custom permission.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="key">Permission key.</param>
            <exception cref="T:Litium.Foundation.Security.CustomPermissionTypeDoesNotExistException">Thrown when the custom permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.CustomGroupPermissionDoesNotExistException">Thrown when the custom group permission does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteGroupModulePermission(System.Guid,System.Guid,System.Int32)">
            <summary>
            Deletes a group module permission.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModuleGroupPermissionDoesNotExistException">Thrown when the module group permission does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModulePermissionTypeDoesNotExistException">Thrown when the module permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteGroupSolutionPermission(System.Guid,System.Int32)">
            <summary>
            Deletes a group solution permission.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="permissionType">Permission type.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.SolutionGroupPermissionDoesNotExistException">Thrown when the solution group permission does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.SolutionPermissionTypeDoesNotExistException">Thrown when the solution permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteModulePermissionType(System.Guid,System.Int32)">
            <summary>
            Deletes a module permission type.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <exception cref="T:Litium.Foundation.Security.ModulePermissionTypeDoesNotExistException">Thrown when the module permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteSolutionPermissionType(System.Int32)">
            <summary>
            Deletes a solution permission type
            </summary>
            <param name="permissionType">Permission type.</param>
            <exception cref="T:Litium.Foundation.Security.SolutionPermissionTypeDoesNotExistException">Thrown when the solution permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteUserCustomPermission(System.Guid,System.Guid,System.Int32,System.Guid)">
            <summary>
            Deletes a user custom permission.
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="key">Permission key.</param>
            <exception cref="T:Litium.Foundation.Security.CustomPermissionTypeDoesNotExistException">Thrown when the custom permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.CustomUserPermissionDoesNotExistException">Thrown when the custom user permission does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteUserModulePermission(System.Guid,System.Guid,System.Int32)">
            <summary>
            Deletes a user module permission.
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModulePermissionTypeDoesNotExistException">Thrown when the module permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModuleUserPermissionDoesNotExistException">Thrown when the module user permission does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.DeleteUserSolutionPermission(System.Guid,System.Int32)">
            <summary>
            Deletes a user solution permission.
            </summary>
            <param name="userID">User ID.</param>
            <param name="permissionType">Permission type.</param>
            <exception cref="T:Litium.Foundation.Security.SolutionPermissionTypeDoesNotExistException">Thrown when the solution permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.SolutionUserPermissionDoesNotExistException">Thrown when the solution user permission does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.ExistsCustomPermissionType(System.Guid,System.Int32)">
            <summary>
            Returns whether a custom permission type exists.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <returns>True if the permission type exists, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.ExistsModulePermissionType(System.Guid,System.Int32)">
            <summary>
            Returns whether a module permission type exists.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <returns>True if the permission type exists, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.ExistsSolutionPermissionType(System.Int32)">
            <summary>
            Returns whether a solution permission type exists.
            </summary>
            <param name="permissionType">Permission type.</param>
            <returns>True if the permission type exists, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.GetCustomGroupPermissions">
            <summary>
            Returns a custom group permissions table as a DataTable with columns [ColumnNames.MODULE_ID, ColumnNames.GROUP_ID, COLUMN_KEY, ColumnNames.PERMISSION_TYPE_ID]
            </summary>
            <returns>Custom group permissions table as a DataTable with columns [ColumnNames.MODULE_ID, ColumnNames.GROUP_ID, COLUMN_KEY, ColumnNames.PERMISSION_TYPE_ID].</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.GetCustomPermissionsForGroup(System.Guid,System.Guid,System.Int32)">
            <summary>
            Returns all custom permissions of given type and module for a group.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type, if the permission type is -1 the permissions for the group are returned without permission type filtration.</param>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.GetCustomPermissionsForUser(System.Guid,System.Guid)">
            <summary>
            Returns all custom permissions of given type and module for a user.
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.GetCustomPermissionsForUser(System.Guid,System.Guid,System.Int32)">
            <summary>
            Returns all custom permissions of given type and module for a user.
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type, if the permission type is -1 the permissions for the user are returned without permission type filtration.</param>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.GetCustomPermissionType(System.Guid,System.Int32)">
            <summary>
            Returns a custom permission type.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <returns>The requested permission type or null if none was found.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.GetCustomPermissionTypes(System.Guid)">
            <summary>
            Returns all custom permission types for a module
            </summary>
            <param name="moduleID">Module ID.</param>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.GetCustomUserPermissions">
            <summary>
            Returns a custom user permissions table as a DataTable with columns [ColumnNames.MODULE_ID, ColumnNames.USER_ID, COLUMN_KEY, ColumnNames.PERMISSION_TYPE_ID]
            </summary>
            <returns>Custom user permissions table as a DataTable with columns [ColumnNames.MODULE_ID, ColumnNames.USER_ID, COLUMN_KEY, ColumnNames.PERMISSION_TYPE_ID].</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.GetGroupCustomPermissions(System.Guid)">
            <summary>
            Returns all group permissions for a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <returns>An array of custom group permissions.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.GetGroupCustomPermissions(System.Guid,System.Guid)">
            <summary>
            Returns all group permissions for a group in a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="groupID">Group ID.</param>
            <returns>An array of custom group permissions.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.GetGroupCustomPermissions(System.Guid,System.Int32,System.Guid)">
            <summary>
            Returns all group permissions of given type for a key.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type, if the permission type is -1 all the group permissions for the key are returned.</param>
            <param name="key">Permission key.</param>
            <returns>An array of custom group permissions.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.GetGroupModulePermissions(System.Guid)">
            <summary>
            Returns all group permissions for a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <returns>An array of group module permissions.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.GetGroupModulePermissions(System.Guid,System.Int32)">
            <summary>
            Returns all group permissions of given type for a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type, if the permission type is -1 all the group permissions for the module are returned.</param>
            <returns>An array of group module permissions.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModulePermissionTypeDoesNotExistException">Thrown when the module permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.GetGroupSolutionPermissions">
            <summary>
            Returns all group permissions for a solution.
            </summary>
            <returns>An array of group solution permissions.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.GetGroupSolutionPermissions(System.Int32)">
            <summary>
            Returns all group permissions of given type for a solution
            </summary>
            <param name="permissionType">Permission type, if the permission type is -1 all the group permissions for the solution are returned.</param>
            <returns>An array of group solution permissions.</returns>
            <exception cref="T:Litium.Foundation.Security.SolutionPermissionTypeDoesNotExistException">Thrown when the solution permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.GetModuleGroupPermissions">
            <summary>
            Returns a module group permissions table as a DataTable with columns [ColumnNames.MODULE_ID, ColumnNames.GROUP_ID, ColumnNames.PERMISSION_TYPE_ID].
            </summary>
            <returns>Module group permissions table as a DataTable with columns [ColumnNames.MODULE_ID, ColumnNames.GROUP_ID, ColumnNames.PERMISSION_TYPE_ID].</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.GetModulePermissionsForGroup(System.Guid)">
            <summary>
            Returns all module permissions for a group.
            </summary>
            <param name="groupID">Group ID.</param>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.GetModulePermissionsForGroup(System.Guid,System.Guid)">
            <summary>
            Returns all module permissions for a group and a module.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module id.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.GetModulePermissionsForGroup(System.Guid,System.Int32)">
            <summary>
            Returns all module permissions of given type for a group.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="permissionType">Permission type.</param>
            <returns>An array of permissions, if the permission type is -1 all the permissions for the group are returned.</returns>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.GetModulePermissionsForUser(System.Guid)">
            <summary>
            Returns all module permissions for a user.
            </summary>
            <param name="userID">User ID.</param>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.GetModulePermissionsForUser(System.Guid,System.Int32)">
            <summary>
            Returns all module permissions of given type for a user.
            </summary>
            <param name="userID">User ID.</param>
            <param name="permissionType">Permission type.</param>
            <returns>An array of permissions, if the permission type is -1 all the permissions for the user are returned.</returns>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.GetModulePermissionType(System.Guid,System.Int32)">
            <summary>
            Returns a module permission type.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <returns>The requested permission type or null if none was found.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.GetModulePermissionTypes(System.Guid)">
            <summary>
            Returns all module permission types for a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.GetModuleUserPermissions">
            <summary>
            Returns a module user permissions table as a DataTable with columns [ColumnNames.MODULE_ID, ColumnNames.USER_ID, ColumnNames.PERMISSION_TYPE_ID].
            </summary>
            <returns>Module user permissions table as a DataTable with columns [ColumnNames.MODULE_ID, ColumnNames.USER_ID, ColumnNames.PERMISSION_TYPE_ID].</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.GetSolutionGroupPermissions">
            <summary>
            Returns a solution group permissions table as a DataTable with columns [ColumnNames.GROUP_ID, ColumnNames.PERMISSION_TYPE_ID].
            </summary>
            <returns>Solution group permissions table as a DataTable with columns [ColumnNames.GROUP_ID, ColumnNames.PERMISSION_TYPE_ID].</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.GetSolutionPermissionsForGroup(System.Guid)">
            <summary>
            Returns all solution permissions for a group.
            </summary>
            <param name="groupID">Group ID.</param>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.GetSolutionPermissionsForUser(System.Guid)">
            <summary>
            Returns all solution permissions for a user.
            </summary>
            <param name="userID">User ID.</param>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.GetSolutionPermissionType(System.Int32)">
            <summary>
            Returns a solution permission type.
            </summary>
            <param name="permissionType">Permission type.</param>
            <returns>The requested permission type or null was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.GetSolutionPermissionTypes">
            <summary>
            Returns all solution permission types for a solution.
            </summary>
            <returns>An array of permissions.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.GetSolutionUserPermissions">
            <summary>
            Returns a solution user permissions table as a DataTable with columns [ColumnNames.USER_ID, ColumnNames.PERMISSION_TYPE_ID]
            </summary>
            <returns>Solution user permissions table as a DataTable with columns [ColumnNames.USER_ID, ColumnNames.PERMISSION_TYPE_ID].</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.GetUserCustomPermissions(System.Guid)">
            <summary>
            Returns all user permissions for a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <returns>An array of user custom permissions.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.GetUserCustomPermissions(System.Guid,System.Int32,System.Guid)">
            <summary>
            Returns all user permissions of given type for a key.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type, if the permission type is -1 all the user permissions for the key are returned.</param>
            <param name="key">Permission key.</param>
            <returns>An array of user custom permissions.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.GetUserModulePermissions(System.Guid)">
            <summary>
            Returns all user permissions for a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <returns>An array of user module permissions.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.GetUserModulePermissions(System.Guid,System.Int32)">
            <summary>
            Returns all user permissions of given type for a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type, if the permission type is -1 all the user permissions for the module are returned.</param>
            <returns>An array of user module permissions.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModulePermissionTypeDoesNotExistException">Thrown when the module permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.GetUserSolutionPermissions">
            <summary>
            Returns all user permissions for a solution.
            </summary>
            <returns>An array of user solution permissions.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.GetUserSolutionPermissions(System.Int32)">
            <summary>
            Returns all user permissions of given type for a solution.
            </summary>
            <param name="permissionType">Permission type, if the permission type is -1 all the user permissions for the solution are returned.</param>
            <returns>An array of user solution permissions.</returns>
            <exception cref="T:Litium.Foundation.Security.SolutionPermissionTypeDoesNotExistException">Thrown when the solution permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.GroupCustomPermissionExists(System.Guid,System.Guid,System.Int32,System.Guid)">
            <summary>
            Returns whether a group custom permission exists.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="key">Permission key.</param>
            <returns>True if a permission exists, otherwise false.</returns>
            <exception cref="T:Litium.Foundation.Security.CustomPermissionTypeDoesNotExistException">Thrown when the custom permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.GroupModulePermissionExists(System.Guid,System.Guid,System.Int32)">
            <summary>
            Returns whether a group module permission exists.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <returns>True if a permission exists, otherwise false.</returns>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModulePermissionTypeDoesNotExistException">Thrown when the module permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.GroupSolutionPermissionExists(System.Guid,System.Int32)">
            <summary>
            Returns whether a group solution permission exists.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="permissionType">Permission type.</param>
            <returns>True if a permission exists, otherwise false.</returns>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.SolutionPermissionTypeDoesNotExistException">Thrown when the solution permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.UpdateCustomPermissionType(Litium.Foundation.Carriers.CustomPermissionTypeCarrier)">
            <summary>
            Upadates a custom permission type.
            </summary>
            <param name="carrier">carrier.</param>
            <returns>The updated permission type.</returns>
            <exception cref="T:Litium.Foundation.Security.CustomPermissionTypeDoesNotExistException">Thrown when the custom permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.UpdateModulePermissionType(Litium.Foundation.Carriers.ModulePermissionTypeCarrier)">
            <summary>
            Upadates a module permission type.
            </summary>
            <param name="carrier">carrier.</param>
            <returns>The updated permission type.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModulePermissionTypeDoesNotExistException">Thrown when the module permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.UpdateSolutionPermissionType(Litium.Foundation.Carriers.SolutionPermissionTypeCarrier)">
            <summary>
            Upadates a solution permission type.
            </summary>
            <param name="carrier">carrier.</param>
            <returns>The updated permission type.</returns>
            <exception cref="T:Litium.Foundation.Security.SolutionPermissionTypeDoesNotExistException">Thrown when the solution permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.UserCustomPermissionExists(System.Guid,System.Guid,System.Int32,System.Guid,System.Boolean)">
            <summary>
            Returns whether a user custom permission exists.
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="key">Permission key.</param>
            <param name="includeGroups">Wheter to include the permissions of the groups which the user belongs to.</param>
            <returns>True if a permission exists, otherwise false.</returns>
            <exception cref="T:Litium.Foundation.Security.CustomPermissionTypeDoesNotExistException">Thrown when the custom permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.UserModulePermissionExists(System.Guid,System.Guid,System.Int32,System.Boolean)">
            <summary>
            Returns whether a user module permission exists.
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="includeGroups">Wheter to include the permissions of the groups which the user belongs to.</param>
            <returns>True if a permission exists, otherwise false.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModulePermissionTypeDoesNotExistException">Thrown when the module permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IPermissionDataProvider.UserSolutionPermissionExists(System.Guid,System.Int32,System.Boolean)">
            <summary>
            Returns whether a group solution permission exists.
            </summary>
            <param name="userID">User ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="includeGroups">Wheter to include the permissions of the groups which the user belongs to.</param>
            <returns>True if a permission exists, otherwise false.</returns>
            <exception cref="T:Litium.Foundation.Security.SolutionPermissionTypeDoesNotExistException">Thrown when the solution permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.#ctor(Litium.Foundation.Data.MSSQL.DAL)">
            <summary>
            Constructor.
            </summary>
            <param name="dal">Data access layer.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.CreateCustomPermissionType(Litium.Foundation.Carriers.CustomPermissionTypeCarrier)">
            <summary>
            Creates a new custom permission type in the database
            </summary>
            <param name="permissionType">Permission type carrier.</param>
            <returns>The new permission type or null.</returns>
            <exception cref="T:Litium.Foundation.Security.CustomPermissionTypeExistsException">Thrown when the custom permission type already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.CreateGroupCustomPermission(Litium.Foundation.Carriers.GroupCustomPermissionCarrier)">
            <summary>
            Creates a new group custom permission in the database.
            </summary>
            <param name="permission">Permission carrier.</param>
            <returns>The new permission or null.</returns>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.CustomPermissionTypeDoesNotExistException">Thrown when the custom permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.CustomGroupPermissionExistsException">Thrown when the custom group permission already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.CreateGroupModulePermission(Litium.Foundation.Carriers.GroupModulePermissionCarrier)">
            <summary>
            Creates a new group module permission in the database.
            </summary>
            <param name="permission">Permission carrier.</param>
            <returns>The new permission or null.</returns>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModulePermissionTypeDoesNotExistException">Thrown when the module permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModuleGroupPermissionExistsException">Thrown when the module group permission already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.CreateGroupSolutionPermission(Litium.Foundation.Carriers.GroupSolutionPermissionCarrier)">
            <summary>
            Creates a new group solution permission in the database.
            </summary>
            <param name="permission">Permission carrier.</param>
            <returns>The new permission or null.</returns>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.SolutionPermissionTypeDoesNotExistException">Thrown when the solution permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.SolutionGroupPermissionExistsException">Thrown when the solution group permission already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.CreateModulePermissionType(Litium.Foundation.Carriers.ModulePermissionTypeCarrier)">
            <summary>
            Creates a new module permission type in the database.
            </summary>
            <param name="permissionType">Permission type carrier.</param>
            <returns>The new permission type or null.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModulePermissionTypeExistsException">Thrown when the module permission type already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.CreateSolutionPermissionType(Litium.Foundation.Carriers.SolutionPermissionTypeCarrier)">
            <summary>
            Creates a new solution permission type in the database.
            </summary>
            <param name="permissionType">Permission type carrier.</param>
            <returns>The new permission type or null.</returns>
            <exception cref="T:Litium.Foundation.Security.SolutionPermissionTypeExistsException">Thrown when the solution permission type already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.CreateUserCustomPermission(Litium.Foundation.Carriers.UserCustomPermissionCarrier)">
            <summary>
            Creates a new user custom permission in the database.
            </summary>
            <param name="permission">Permission carrier.</param>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.CustomPermissionTypeDoesNotExistException">Thrown when the custom permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.CustomUserPermissionExistsException">Thrown when the custom user permission already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.CreateUserModulePermission(Litium.Foundation.Carriers.UserModulePermissionCarrier)">
            <summary>
            Creates a new user module permission in the database.
            </summary>
            <param name="permission">Permission carrier.</param>
            <returns>The new permission or null.</returns>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModulePermissionTypeDoesNotExistException">Thrown when the module permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModuleUserPermissionExistsException">Thrown when the module user permission already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.CreateUserSolutionPermission(Litium.Foundation.Carriers.UserSolutionPermissionCarrier)">
            <summary>
            Creates a new user solution permission in the database.
            </summary>
            <param name="permission">Permission carrier.</param>
            <returns>The new permission or null.</returns>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.SolutionPermissionTypeDoesNotExistException">Thrown when the solution permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.SolutionUserPermissionExistsException">Thrown when the solution user permission already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllCustomPermissions(System.Guid)">
            <summary>
            Deletes all custom permissions for a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllCustomPermissions(System.Guid,System.Guid)">
            <summary>
            Deletes all custom permissions for a module and a key.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="key">Key.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllCustomPermissions(System.Guid,System.Int32)">
            <summary>
            Deletes all custom permissions for a module and a permission type.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllCustomPermissions(System.Guid,System.Int32,System.Guid)">
            <summary>
            Deletes all custom permissions for a module, permission type and a key.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="key">Key.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllCustomPermissionsForGroup(System.Guid,System.Guid)">
            <summary>
            Deletes all custom permissions for a specific group.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <remarks>Does not throw exception if the custom permission type does not exist.</remarks>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllCustomPermissionsForGroup(System.Guid,System.Guid,System.Int32)">
            <summary>
            Deletes all custom permissions for a specific group.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <remarks>Does not throw exception if the custom permission type does not exist.</remarks>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllCustomPermissionsForUser(System.Guid,System.Guid)">
            <summary>
            Deletes all custom permissions for a specific user and module.
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
            <remarks>Does not throw exception if custom permission type does not exist.</remarks>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllCustomPermissionsForUser(System.Guid,System.Guid,System.Int32)">
            <summary>
            Deletes all custom permissions for a specific user and permission type.
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
            <remarks>Does not throw exception if custom permission type does not exist.</remarks>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllCustomPermissionTypes(System.Guid)">
            <summary>
            Deletes all custom permissions types for a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllGroupCustomPermissions(System.Guid)">
            <summary>
            Deletes all group custom permissions for a permission type.
            </summary>
            <param name="moduleID">Module ID.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllGroupCustomPermissions(System.Guid,System.Int32)">
            <summary>
            Deletes all group custom permissions for a permission type.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllGroupCustomPermissions(System.Guid,System.Int32,System.Guid)">
            <summary>
            Deletes all group custom permissions for a permission type.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="key">Permission key.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllGroupModulePermissions(System.Guid)">
            <summary>
            Deletes all group module permissions.
            </summary>
            <param name="moduleID">Module ID.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllGroupModulePermissions(System.Guid,System.Int32)">
            <summary>
            Deletes all group module permissions for a permission type.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModulePermissionTypeDoesNotExistException">Thrown when the module permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllGroupSolutionPermissions">
            <summary>
            Deletes all group solution permissions.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllGroupSolutionPermissions(System.Int32)">
            <summary>
            Deletes all group solution permissions for a permission type.
            </summary>
            <param name="permissionType">Permission type.</param>
            <exception cref="T:Litium.Foundation.Security.SolutionPermissionTypeDoesNotExistException">Thrown when the solution permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllModulePermissions(System.Guid)">
            <summary>
            Delete all group and user module permissions.
            </summary>
            <param name="moduleID">Module ID.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllModulePermissions(System.Guid,System.Int32)">
            <summary>
            Delete all group and user module permissions for a permission type.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllModulePermissionsForGroup(System.Guid)">
            <summary>
            Deletes all module permissions for a specific group.
            </summary>
            <param name="groupID">Group ID.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllModulePermissionsForGroup(System.Guid,System.Guid)">
            <summary>
            Deletes all module permissions for a specific group.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllModulePermissionsForGroup(System.Guid,System.Int32)">
            <summary>
            Deletes all module permissions for a specific group.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="permissionType">Permission type.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <remarks>Does not throw exception if module permission type does not exist.</remarks>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllModulePermissionsForUser(System.Guid)">
            <summary>
            Deletes all module permissions for a specific user.
            </summary>
            <param name="userID">User ID.</param>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllModulePermissionsForUser(System.Guid,System.Int32)">
            <summary>
            Deletes all module permissions for a specific user.
            </summary>
            <param name="userID">User ID.</param>
            <param name="permissionType">Permission type.</param>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
            <remarks>Does not throw exception if module permission type does not exist.</remarks>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllModulePermissionTypes(System.Guid)">
            <summary>
            Deletes all module permissions types for a module (except built in permission types).
            </summary>
            <param name="moduleID">Module ID.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllSolutionPermissions">
            <summary>
            Delete all solution permissions (except for the System user).
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllSolutionPermissions(System.Int32)">
            <summary>
            Delete all solution permissions for a permission type (except for the System user).
            </summary>
            <param name="permissionType">Permission type.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllSolutionPermissionsForGroup(System.Guid)">
            <summary>
            Deletes all solution permissions for a specific group.
            </summary>
            <param name="groupID">Group ID.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllSolutionPermissionsForGroup(System.Guid,System.Int32)">
            <summary>
            Deletes all solution permissions for a specific group.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="permissionType">Permission type.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <remarks>Does not throw exception if solution permission type does not exist.</remarks>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllSolutionPermissionsForUser(System.Guid)">
            <summary>
            Deletes all solution permissions for a specific user.
            </summary>
            <param name="userID">User ID.</param>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllSolutionPermissionsForUser(System.Guid,System.Int32)">
            <summary>
            Deletes all solution permissions for a specific user.
            </summary>
            <param name="userID">User ID.</param>
            <param name="permissionType">Permission type.</param>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
            <remarks>Does not throw exception if solution permission type does not exist.</remarks>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllSolutionPermissionTypes">
            <summary>
            Deletes all solution permissions types for a solution (except built in permission types).
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllUserCustomPermissions(System.Guid)">
            <summary>
            Deletes all user custom permissions for a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllUserCustomPermissions(System.Guid,System.Int32)">
            <summary>
            Deletes all user custom permissions for a permission type.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllUserCustomPermissions(System.Guid,System.Int32,System.Guid)">
            <summary>
            Deletes all user custom permissions for a permission type and key.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="key">Permission key.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllUserModulePermissions(System.Guid)">
            <summary>
            Deletes all user module permissions.
            </summary>
            <param name="moduleID">Module ID.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllUserModulePermissions(System.Guid,System.Int32)">
            <summary>
            Deletes all user module permissions for a permission type.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModulePermissionTypeDoesNotExistException">Thrown when the module permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllUserModulePermissions(System.Guid,System.Guid)">
            <summary>
            Deletes all user module permissions for a user in a module.
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllUserSolutionPermissions">
            <summary>
            Deletes all user solution permissions (except the System All permission for the System user).
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllUserSolutionPermissions(System.Int32)">
            <summary>
            Deletes all user solution permissions for a permission type (except the System All permission for the System user).
            </summary>
            <param name="permissionType">Permission type.</param>
            <exception cref="T:Litium.Foundation.Security.SolutionPermissionTypeDoesNotExistException">Thrown when the solution permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteCustomPermissionType(System.Guid,System.Int32)">
            <summary>
            Deletes a custom permission type.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <exception cref="T:Litium.Foundation.Security.CustomPermissionTypeDoesNotExistException">Thrown when the custom permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteGroupCustomPermission(System.Guid,System.Guid,System.Int32,System.Guid)">
            <summary>
            Deletes a group custom permission.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="key">Permission key.</param>
            <exception cref="T:Litium.Foundation.Security.CustomPermissionTypeDoesNotExistException">Thrown when the custom permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.CustomGroupPermissionDoesNotExistException">Thrown when the custom group permission does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteGroupModulePermission(System.Guid,System.Guid,System.Int32)">
            <summary>
            Deletes a group module permission.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModuleGroupPermissionDoesNotExistException">Thrown when the module group permission does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModulePermissionTypeDoesNotExistException">Thrown when the module permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteGroupSolutionPermission(System.Guid,System.Int32)">
            <summary>
            Deletes a group solution permission.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="permissionType">Permission type.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.SolutionGroupPermissionDoesNotExistException">Thrown when the solution group permission does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.SolutionPermissionTypeDoesNotExistException">Thrown when the solution permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteModulePermissionType(System.Guid,System.Int32)">
            <summary>
            Deletes a module permission type.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <exception cref="T:Litium.Foundation.Security.ModulePermissionTypeDoesNotExistException">Thrown when the module permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteSolutionPermissionType(System.Int32)">
            <summary>
            Deletes a solution permission type.
            </summary>
            <param name="permissionType">Permission type.</param>
            <exception cref="T:Litium.Foundation.Security.SolutionPermissionTypeDoesNotExistException">Thrown when the solution permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteUserCustomPermission(System.Guid,System.Guid,System.Int32,System.Guid)">
            <summary>
            Deletes a user custom permission.
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="key">Permission key.</param>
            <exception cref="T:Litium.Foundation.Security.CustomPermissionTypeDoesNotExistException">Thrown when the custom permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.CustomUserPermissionDoesNotExistException">Thrown when the custom user permission does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteUserModulePermission(System.Guid,System.Guid,System.Int32)">
            <summary>
            Deletes a user module permission.
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModulePermissionTypeDoesNotExistException">Thrown when the module permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModuleUserPermissionDoesNotExistException">Thrown when the module user permission does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteUserSolutionPermission(System.Guid,System.Int32)">
            <summary>
            Deletes a user solution permission.
            </summary>
            <param name="userID">User ID.</param>
            <param name="permissionType">Permission type.</param>
            <exception cref="T:Litium.Foundation.Security.SolutionPermissionTypeDoesNotExistException">Thrown when the solution permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.SolutionUserPermissionDoesNotExistException">Thrown when the solution user permission does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.ExistsCustomPermissionType(System.Guid,System.Int32)">
            <summary>
            Returns whether a custom permission type exists.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <returns>True if the permission type exists, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.ExistsModulePermissionType(System.Guid,System.Int32)">
            <summary>
            Returns whether a module permission type exists.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <returns>True if the permission type exists, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.ExistsSolutionPermissionType(System.Int32)">
            <summary>
            Returns whether a solution permission type exists.
            </summary>
            <param name="permissionType">Permission type.</param>
            <returns>True if the permission type exists, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetCustomGroupPermissions">
            <summary>
            Returns a custom group permissions table as a DataTable with columns [ColumnNames.MODULE_ID, ColumnNames.GROUP_ID, ColumnNames.CUSTOM_ITEM_ID, ColumnNames.PERMISSION_TYPE_ID].
            </summary>
            <returns>Custom group permissions table as a DataTable with columns [ColumnNames.MODULE_ID, ColumnNames.GROUP_ID, ColumnNames.CUSTOM_ITEM_ID, ColumnNames.PERMISSION_TYPE_ID].</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetCustomPermissionsForGroup(System.Guid,System.Guid,System.Int32)">
            <summary>
            Returns all custom permissions of given type and module for a group.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type, if the permission type is -1 the permissions for the group are returned without permission type filtration.</param>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetCustomPermissionsForUser(System.Guid,System.Guid)">
            <summary>
            Returns all custom permissions of given type and module for a user.
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetCustomPermissionsForUser(System.Guid,System.Guid,System.Int32)">
            <summary>
            Returns all custom permissions of given type and module for a user.
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type, if the permission type is -1 the permissions for the user are returned without permission type filtration.</param>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetCustomPermissionType(System.Guid,System.Int32)">
            <summary>
            Returns a custom permission type.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <returns>The requested permission type or null if none was found.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetCustomPermissionTypes(System.Guid)">
            <summary>
            Returns all custom permission types for a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetCustomUserPermissions">
            <summary>
            Returns a custom user permissions table as a DataTable with columns [ColumnNames.MODULE_ID, ColumnNames.USER_ID, ColumnNames.CUSTOM_ITEM_ID, ColumnNames.PERMISSION_TYPE_ID].
            </summary>
            <returns>Custom user permissions table as a DataTable with columns [ColumnNames.MODULE_ID, ColumnNames.USER_ID, ColumnNames.CUSTOM_ITEM_ID, ColumnNames.PERMISSION_TYPE_ID].</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetGroupCustomPermissions(System.Guid)">
            <summary>
            Returns all group permissions for a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <returns>An array of custom group permissions.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetGroupCustomPermissions(System.Guid,System.Guid)">
            <summary>
            Returns all group permissions for a group in a module.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <returns>An array of custom group permissions.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetGroupCustomPermissions(System.Guid,System.Int32,System.Guid)">
            <summary>
            Returns all group permissions of given type for a key.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type, if the permission type is -1 all the group permissions for the key are returned.</param>
            <param name="key">Permission key.</param>
            <returns>An array of custom group permissions.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetGroupModulePermissions(System.Guid)">
            <summary>
            Returns all group permissions for a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <returns>An array of group module permissions.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetGroupModulePermissions(System.Guid,System.Int32)">
            <summary>
            Returns all group permissions of given type for a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type, if the permission type is -1 all the group permissions for the module are returned.</param>
            <returns>An array of group module permissions.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModulePermissionTypeDoesNotExistException">Thrown when the module permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetGroupSolutionPermissions">
            <summary>
            Returns all group permissions for a solution.
            </summary>
            <returns>An array of group solution permissions.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetGroupSolutionPermissions(System.Int32)">
            <summary>
            Returns all group permissions of given type for a solution.
            </summary>
            <param name="permissionType">Permission type, if the permission type is -1 all the group permissions for the solution are returned.</param>
            <returns>An array of group solution permissions.</returns>
            <exception cref="T:Litium.Foundation.Security.SolutionPermissionTypeDoesNotExistException">Thrown when the solution permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetModuleGroupPermissions">
            <summary>
            Returns a module group permissions table as a DataTable with columns [ColumnNames.MODULE_ID, ColumnNames.GROUP_ID, ColumnNames.PERMISSION_TYPE_ID].
            </summary>
            <returns>Module group permissions table as a DataTable with columns [ColumnNames.MODULE_ID, ColumnNames.GROUP_ID, ColumnNames.PERMISSION_TYPE_ID].</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetModulePermissionsForGroup(System.Guid)">
            <summary>
            Returns all module permissions for a group.
            </summary>
            <param name="groupID">Group ID.</param>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetModulePermissionsForGroup(System.Guid,System.Guid)">
            <summary>
            Returns all module permissions for a group and a module.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module id.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetModulePermissionsForGroup(System.Guid,System.Int32)">
            <summary>
            Returns all module permissions of given type for a group.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="permissionType">Permission type.</param>
            <returns>An array of permissions, if the permission type is -1 all the permissions for the group are returned.</returns>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetModulePermissionsForUser(System.Guid)">
            <summary>
            Returns all module permissions for a user.
            </summary>
            <param name="userID">User ID.</param>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetModulePermissionsForUser(System.Guid,System.Int32)">
            <summary>
            Returns all module permissions of given type for a user.
            </summary>
            <param name="userID">User ID.</param>
            <param name="permissionType">Permission type.</param>
            <returns>An array of permissions, if the permission type is -1 all the permissions for the user are returned.</returns>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetModulePermissionType(System.Guid,System.Int32)">
            <summary>
            Returns a module permission type.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <returns>The requested permission type or null if none was found.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetModulePermissionTypes(System.Guid)">
            <summary>
            Returns all module permission types for a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetModuleUserPermissions">
            <summary>
            Returns a module user permissions table as a DataTable with columns [ColumnNames.MODULE_ID, ColumnNames.USER_ID, ColumnNames.PERMISSION_TYPE_ID].
            </summary>
            <returns>Module user permissions table as a DataTable with columns [ColumnNames.MODULE_ID, ColumnNames.USER_ID, ColumnNames.PERMISSION_TYPE_ID].</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetSolutionGroupPermissions">
            <summary>
            Returns a solution group permissions table as a DataTable with columns [ColumnNames.GROUP_ID, ColumnNames.PERMISSION_TYPE_ID].
            </summary>
            <returns>Solution group permissions table as a DataTable with columns [ColumnNames.GROUP_ID, ColumnNames.PERMISSION_TYPE_ID].</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetSolutionPermissionsForGroup(System.Guid)">
            <summary>
            Returns all solution permissions for a group.
            </summary>
            <param name="groupID">Group ID.</param>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetSolutionPermissionsForUser(System.Guid)">
            <summary>
            Returns all solution permissions for a user.
            </summary>
            <param name="userID">User ID.</param>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetSolutionPermissionType(System.Int32)">
            <summary>
            Returns a solution permission type.
            </summary>
            <param name="permissionType">Permission type.</param>
            <returns>The requested permission type or null was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetSolutionPermissionTypes">
            <summary>
            Returns all solution permission types for a solution.
            </summary>
            <returns>An array of permissions.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetSolutionUserPermissions">
            <summary>
            Returns a solution user permissions table as a DataTable with columns [ColumnNames.USER_ID, ColumnNames.PERMISSION_TYPE_ID].
            </summary>
            <returns>Solution user permissions table as a DataTable with columns [ColumnNames.USER_ID, ColumnNames.PERMISSION_TYPE_ID].</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetUserCustomPermissions(System.Guid)">
            <summary>
            Returns all user permissions for a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <returns>An array of user custom permissions.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetUserCustomPermissions(System.Guid,System.Int32,System.Guid)">
            <summary>
            Returns all user permissions of given type for a key.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type, if the permission type is -1 all the user permissions for the key are returned.</param>
            <param name="key">Permission key.</param>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetUserModulePermissions(System.Guid)">
            <summary>
            Returns all user permissions for a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <returns>An array of user module permissions.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetUserModulePermissions(System.Guid,System.Int32)">
            <summary>
            Returns all user permissions of given type for a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type, if the permission type is -1 all the user permissions for the module are returned.</param>
            <returns>An array of user module permissions.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModulePermissionTypeDoesNotExistException">Thrown when the module permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetUserSolutionPermissions">
            <summary>
            Returns all user permissions for a solution.
            </summary>
            <returns>An array of user solution permissions.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetUserSolutionPermissions(System.Int32)">
            <summary>
            Returns all user permissions of given type for a solution.
            </summary>
            <param name="permissionType">Permission type, if the permission type is -1 all the user permissions for the solution are returned.</param>
            <returns>An array of user solution permissions.</returns>
            <exception cref="T:Litium.Foundation.Security.SolutionPermissionTypeDoesNotExistException">Thrown when the solution permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GroupCustomPermissionExists(System.Guid,System.Guid,System.Int32,System.Guid)">
            <summary>
            Returns whether a group custom permission exists.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="key">Permission key.</param>
            <returns>True if a permission exists, otherwise false.</returns>
            <exception cref="T:Litium.Foundation.Security.CustomPermissionTypeDoesNotExistException">Thrown when the custom permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GroupModulePermissionExists(System.Guid,System.Guid,System.Int32)">
            <summary>
            Returns whether a group module permission exists.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <returns>True if a permission exists, otherwise false.</returns>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModulePermissionTypeDoesNotExistException">Thrown when the module permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GroupSolutionPermissionExists(System.Guid,System.Int32)">
            <summary>
            Returns whether a group solution permission exists.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="permissionType">Permission type.</param>
            <returns>True if a permission exists, otherwise false.</returns>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.SolutionPermissionTypeDoesNotExistException">Thrown when the solution permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.UpdateCustomPermissionType(Litium.Foundation.Carriers.CustomPermissionTypeCarrier)">
            <summary>
            Upadates a custom permission type.
            </summary>
            <param name="carrier">carrier.</param>
            <returns>The updated permission type.</returns>
            <exception cref="T:Litium.Foundation.Security.CustomPermissionTypeDoesNotExistException">Thrown when the custom permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.UpdateModulePermissionType(Litium.Foundation.Carriers.ModulePermissionTypeCarrier)">
            <summary>
            Upadates a module permission type.
            </summary>
            <param name="carrier">carrier.</param>
            <returns>The updated permission type.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModulePermissionTypeDoesNotExistException">Thrown when the module permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.UpdateSolutionPermissionType(Litium.Foundation.Carriers.SolutionPermissionTypeCarrier)">
            <summary>
            Upadates a solution permission type.
            </summary>
            <param name="carrier">carrier.</param>
            <returns>The updated permission type.</returns>
            <exception cref="T:Litium.Foundation.Security.SolutionPermissionTypeDoesNotExistException">Thrown when the solution permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.UserCustomPermissionExists(System.Guid,System.Guid,System.Int32,System.Guid,System.Boolean)">
            <summary>
            Returns whether a user custom permission exists.
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="key">Permission key.</param>
            <param name="includeGroups">Wheter to include the permissions of the groups which the user belongs to.</param>
            <returns>True if a permission exists, otherwise false.</returns>
            <exception cref="T:Litium.Foundation.Security.CustomPermissionTypeDoesNotExistException">Thrown when the custom permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.UserModulePermissionExists(System.Guid,System.Guid,System.Int32,System.Boolean)">
            <summary>
            Returns whether a user module permission exists.
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="includeGroups">Wheter to include the permissions of the groups which the user belongs to.</param>
            <returns>True if a permission exists, otherwise false.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModulePermissionTypeDoesNotExistException">Thrown when the module permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.UserSolutionPermissionExists(System.Guid,System.Int32,System.Boolean)">
            <summary>
            Returns whether a group solution permission exists.
            </summary>
            <param name="userID">User ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="includeGroups">Wheter to include the permissions of the groups which the user belongs to.</param>
            <returns>True if a permission exists, otherwise false.</returns>
            <exception cref="T:Litium.Foundation.Security.SolutionPermissionTypeDoesNotExistException">Thrown when the solution permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.CreateCustomPermissionType(Litium.Foundation.Carriers.CustomPermissionTypeCarrier,System.Data.SqlClient.SqlCommand)">
            <summary>
            Creates a new custom permission type in the database.
            </summary>
            <param name="permissionType">Permission type carrier.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>The new permission type or null.</returns>
            <exception cref="T:Litium.Foundation.Security.CustomPermissionTypeExistsException">Thrown when the custom permission type already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.CreateGroupCustomPermission(Litium.Foundation.Carriers.GroupCustomPermissionCarrier,System.Data.SqlClient.SqlCommand)">
            <summary>
            Creates a new group custom permission in the database.
            </summary>
            <param name="permission">Permission carrier.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>The new permission or null.</returns>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.CustomPermissionTypeDoesNotExistException">Thrown when the custom permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.CustomGroupPermissionExistsException">Thrown when the custom group permission already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.CreateGroupModulePermission(Litium.Foundation.Carriers.GroupModulePermissionCarrier,System.Data.SqlClient.SqlCommand)">
            <summary>
            Creates a new group module permission in the database.
            </summary>
            <param name="permission">Permission carrier.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>The new permission or null.</returns>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModulePermissionTypeDoesNotExistException">Thrown when the module permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModuleGroupPermissionExistsException">Thrown when the module group permission already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.CreateGroupSolutionPermission(Litium.Foundation.Carriers.GroupSolutionPermissionCarrier,System.Data.SqlClient.SqlCommand)">
            <summary>
            Creates a new group solution permission in the database.
            </summary>
            <param name="permission">Permission carrier.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>The new permission or null.</returns>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.SolutionPermissionTypeDoesNotExistException">Thrown when the solution permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.SolutionGroupPermissionExistsException">Thrown when the solution group permission already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.CreateModulePermissionType(Litium.Foundation.Carriers.ModulePermissionTypeCarrier,System.Data.SqlClient.SqlCommand)">
            <summary>
            Creates a new module permission type in the database.
            </summary>
            <param name="permissionType">Permission type carrier.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>The new permission type or null.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModulePermissionTypeExistsException">Thrown when the module permission type already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.CreateSolutionPermissionType(Litium.Foundation.Carriers.SolutionPermissionTypeCarrier,System.Data.SqlClient.SqlCommand)">
            <summary>
            Creates a new solution permission type in the database.
            </summary>
            <param name="permissionType">Permission type carrier.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>The new permission type or null.</returns>
            <exception cref="T:Litium.Foundation.Security.SolutionPermissionTypeExistsException">Thrown when the solution permission type already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.CreateUserCustomPermission(Litium.Foundation.Carriers.UserCustomPermissionCarrier,System.Data.SqlClient.SqlCommand)">
            <summary>
            Creates a new user custom permission in the database.
            </summary>
            <param name="permission">User custome permission carrier.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>The new permission or null.</returns>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.CustomPermissionTypeDoesNotExistException">Thrown when the custom permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.CustomUserPermissionExistsException">Thrown when the custom user permission already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.CreateUserModulePermission(Litium.Foundation.Carriers.UserModulePermissionCarrier,System.Data.SqlClient.SqlCommand)">
            <summary>
            Creates a new user module permission in the database.
            </summary>
            <param name="permission">Permission carrier.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>The new permission or null.</returns>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModulePermissionTypeDoesNotExistException">Thrown when the module permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModuleUserPermissionExistsException">Thrown when the module user permission already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.CreateUserSolutionPermission(Litium.Foundation.Carriers.UserSolutionPermissionCarrier,System.Data.SqlClient.SqlCommand)">
            <summary>
            Creates a new user solution permission in the database.
            </summary>
            <param name="permission">Permission carrier.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>The new permission or null.</returns>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.SolutionPermissionTypeDoesNotExistException">Thrown when the solution permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.SolutionUserPermissionExistsException">Thrown when the solution user permission already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllCustomPermissions(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes all custom permissions.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllCustomPermissions(System.Guid,System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes all custom permissions for a module and a key.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="key">Key.</param>
            <param name="openCommand">Open sql command.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllCustomPermissions(System.Guid,System.Int32,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes all custom permissions for a module and a permission type.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="openCommand">The open command.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllCustomPermissions(System.Guid,System.Int32,System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes all custom permissions for a module, permission type and a key.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="key">Key.</param>
            <param name="openCommand">The open command.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllCustomPermissionsForGroup(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes all custom permissions for a specific group.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllCustomPermissionsForGroup(System.Guid,System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes all custom permissions for a specific group.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <remarks>Does not throw exception if the custom permission type does not exist.</remarks>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllCustomPermissionsForGroup(System.Guid,System.Guid,System.Int32,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes all custom permissions for a specific group.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <remarks>Does not throw exception if the custom permission type does not exist.</remarks>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllCustomPermissionsForUser(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes all custom permissions for a specific user.
            </summary>
            <param name="userID">User ID.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllCustomPermissionsForUser(System.Guid,System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes all custom permissions for a specific user and module.
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="openCommand">The open command.</param>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
            <remarks>Does not throw exception if custom permission type does not exist.</remarks>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllCustomPermissionsForUser(System.Guid,System.Guid,System.Int32,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes all custom permissions for a specific user and permission type.
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="openCommand">The open command.</param>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
            <remarks>Does not throw exception if custom permission type does not exist.</remarks>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllCustomPermissionTypes(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes all custom permissions types for a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllGroupCustomPermissions(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes all group custom permissions of a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllGroupCustomPermissions(System.Guid,System.Int32,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes all group custom permissions for a permission type.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllGroupCustomPermissions(System.Guid,System.Int32,System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes all group custom permissions for a permission type.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="key">Permission key.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllGroupModulePermissions(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes all group module permissions.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllGroupModulePermissions(System.Guid,System.Int32,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes all group module permissions for a permission type.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModulePermissionTypeDoesNotExistException">Thrown when the module permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllGroupSolutionPermissions(System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes all group solution permissions.
            </summary>
            <param name="openCommand">Sql command object or null.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllGroupSolutionPermissions(System.Int32,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes all group solution permissions for a permission type.
            </summary>
            <param name="permissionType">Permission type.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Security.SolutionPermissionTypeDoesNotExistException">Thrown when the solution permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllModulePermissions(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Delete all group and user module permissions.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="openCommand">Sql command object or null.</param>        
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllModulePermissions(System.Guid,System.Int32,System.Data.SqlClient.SqlCommand)">
            <summary>
            Delete all group and user module permissions for a permission type.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="openCommand">Sql command object or null.</param>    
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllModulePermissionsForGroup(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes all module permissions for a specific group.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllModulePermissionsForGroup(System.Guid,System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes all module permissions for a specific group.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">The module ID.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllModulePermissionsForGroup(System.Guid,System.Int32,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes all module permissions for a specific group.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <remarks>Does not throw exception if module permission type does not exist.</remarks>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllModulePermissionsForUser(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes all module permissions for a specific user.
            </summary>
            <param name="userID">User ID.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllModulePermissionsForUser(System.Guid,System.Int32,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes all module permissions for a specific user.
            </summary>
            <param name="userID">User ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
            <remarks>Does not throw exception if module permission type does not exist.</remarks>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllModulePermissionTypes(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes all module permissions types for a module (except built in permission types).
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllSolutionPermissions(System.Data.SqlClient.SqlCommand)">
            <summary>
            Delete all solution permissions (except for the System user).
            </summary>
            <param name="openCommand">Sql command object or null.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllSolutionPermissions(System.Int32,System.Data.SqlClient.SqlCommand)">
            <summary>
            Delete all solution permissions for a permission type (except for the System user).
            </summary>
            <param name="permissionType">Permission type.</param>
            <param name="openCommand">Sql command object or null.</param>        
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllSolutionPermissionsForGroup(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes all solution permissions for a specific group.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllSolutionPermissionsForGroup(System.Guid,System.Int32,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes all solution permissions for a specific group.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <remarks>Does not throw exception if solution permission type does not exist.</remarks>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllSolutionPermissionsForUser(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes all solution permissions for a specific user.
            </summary>
            <param name="userID">User ID.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllSolutionPermissionsForUser(System.Guid,System.Int32,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes all solution permissions for a specific user.
            </summary>
            <param name="userID">User ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
            <remarks>Does not throw exception if solution permission type does not exist.</remarks>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllSolutionPermissionTypes(System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes all solution permissions types for a solution (except built in permission types).
            </summary>
            <param name="openCommand">Sql command object or null.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllUserCustomPermissions(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes all user custom permissions of a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllUserCustomPermissions(System.Guid,System.Int32,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes all user custom permissions for a permission type.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="openCommand">The open command.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllUserCustomPermissions(System.Guid,System.Int32,System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes all user custom permissions for a permission type and key.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="key">Permission key.</param>
            <param name="openCommand">The open command.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllUserModulePermissions(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes all user module permissions.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllUserModulePermissions(System.Guid,System.Int32,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes all user module permissions for a permission type.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModulePermissionTypeDoesNotExistException">Thrown when the module permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllUserModulePermissions(System.Guid,System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes all user module permissions for a user in a module.
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="openCommand">The open command.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllUserSolutionPermissions(System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes all user solution permissions (except the System All permission for the System user).
            </summary>
            <param name="openCommand">Sql command object or null.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteAllUserSolutionPermissions(System.Int32,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes all user solution permissions for a permission type (except the System All permission for the System user).
            </summary>
            <param name="permissionType">Permission type.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Security.SolutionPermissionTypeDoesNotExistException">Thrown when the solution permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteCustomPermissionType(System.Guid,System.Int32,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes a custom permission type.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Security.CustomPermissionTypeDoesNotExistException">Thrown when the custom permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteGroupCustomPermission(System.Guid,System.Guid,System.Int32,System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes a group custom permission.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="key">Permission key.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Security.CustomPermissionTypeDoesNotExistException">Thrown when the custom permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.CustomGroupPermissionDoesNotExistException">Thrown when the custom group permission does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteGroupModulePermission(System.Guid,System.Guid,System.Int32,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes a group module permission.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModuleGroupPermissionDoesNotExistException">Thrown when the module group permission does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModulePermissionTypeDoesNotExistException">Thrown when the module permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteGroupSolutionPermission(System.Guid,System.Int32,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes a group solution permission.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.SolutionGroupPermissionDoesNotExistException">Thrown when the solution group permission does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.SolutionPermissionTypeDoesNotExistException">Thrown when the solution permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteModulePermissionType(System.Guid,System.Int32,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes a module permission type.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Security.ModulePermissionTypeDoesNotExistException">Thrown when the module permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteSolutionPermissionType(System.Int32,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes a solution permission type.
            </summary>
            <param name="permissionType">Permission type.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Security.SolutionPermissionTypeDoesNotExistException">Thrown when the solution permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteUserCustomPermission(System.Guid,System.Guid,System.Int32,System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes a user custom permission.
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="key">Permission key.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Security.CustomPermissionTypeDoesNotExistException">Thrown when the custom permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.CustomUserPermissionDoesNotExistException">Thrown when the custom user permission does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteUserModulePermission(System.Guid,System.Guid,System.Int32,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes a user module permission.
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModulePermissionTypeDoesNotExistException">Thrown when the module permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModuleUserPermissionDoesNotExistException">Thrown when the module user permission does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.DeleteUserSolutionPermission(System.Guid,System.Int32,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes a user solution permission.
            </summary>
            <param name="userID">User ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Security.SolutionPermissionTypeDoesNotExistException">Thrown when the solution permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.SolutionUserPermissionDoesNotExistException">Thrown when the solution user permission does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.ExistsCustomPermissionType(System.Guid,System.Int32,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns whether a custom permission type exists or not.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="openCommand">The open command.</param>
            <returns>
            True if the permission type exists, otherwise false.
            </returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.ExistsModulePermissionType(System.Guid,System.Int32,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns whether a module permission type exists.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="openCommand">The open command.</param>
            <returns>
            True if the permission type exists, otherwise false.
            </returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.ExistsPermission(Litium.Foundation.Carriers.GroupCustomPermissionCarrier,Litium.Foundation.Carriers.GroupCustomPermissionCarrier[])">
            <summary>
            Returns true if the given permission exists in the given permission array otherwise false.
            </summary>
            <param name="permission">Permission.</param>
            <param name="permissions">Permission array.</param>
            <returns>True if the given permission exists in the given permission array otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.ExistsPermission(Litium.Foundation.Carriers.GroupModulePermissionCarrier,Litium.Foundation.Carriers.GroupModulePermissionCarrier[])">
            <summary>
            Returns true if the given permission exists in the given permission array otherwise false.
            </summary>
            <param name="permission">Permission.</param>
            <param name="permissions">Permission array.</param>
            <returns>True if the given permission exists in the given permission array otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.ExistsPermission(Litium.Foundation.Carriers.GroupSolutionPermissionCarrier,Litium.Foundation.Carriers.GroupSolutionPermissionCarrier[])">
            <summary>
            Returns true if the given permission exists in the given permission array otherwise false.
            </summary>
            <param name="permission">Permission.</param>
            <param name="permissions">Permission array.</param>
            <returns>True if the given permission exists in the given permission array otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.ExistsPermission(Litium.Foundation.Carriers.UserCustomPermissionCarrier,Litium.Foundation.Carriers.UserCustomPermissionCarrier[])">
            <summary>
            Returns true if the given permission exists in the given permission array otherwise false.
            </summary>
            <param name="permission">Permission.</param>
            <param name="permissions">Permission array.</param>
            <returns>True if the given permission exists in the given permission array otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.ExistsPermission(Litium.Foundation.Carriers.UserModulePermissionCarrier,Litium.Foundation.Carriers.UserModulePermissionCarrier[])">
            <summary>
            Returns true if the given permission exists in the given permission array otherwise false.
            </summary>
            <param name="permission">Permission.</param>
            <param name="permissions">Permission array.</param>
            <returns>True if the given permission exists in the given permission array otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.ExistsPermission(Litium.Foundation.Carriers.UserSolutionPermissionCarrier,Litium.Foundation.Carriers.UserSolutionPermissionCarrier[])">
            <summary>
            Returns true if the given permission exists in the given permission array otherwise false.
            </summary>
            <param name="permission">Permission.</param>
            <param name="permissions">Permission array.</param>
            <returns>True if the given permission exists in the given permission array otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.ExistsSolutionPermissionType(System.Int32,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns whether a solution permission type exists.
            </summary>
            <param name="permissionType">Permission type.</param>
            <param name="openCommand">The open command.</param>
            <returns>
            True if the permission type exists, otherwise false.
            </returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetCustomGroupPermissions(System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns a custom group permissions table as a DataTable with columns [ColumnNames.MODULE_ID, ColumnNames.GROUP_ID, ColumnNames.CUSTOM_ITEM_ID, ColumnNames.PERMISSION_TYPE_ID].
            </summary>
            <param name="openCommand">Sql command object or null.</param>
            <returns>Custom group permissions table as a DataTable with columns [ColumnNames.MODULE_ID, ColumnNames.GROUP_ID, ColumnNames.CUSTOM_ITEM_ID, ColumnNames.PERMISSION_TYPE_ID].</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetCustomPermissionsForGroup(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all custom permissions for a group.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetCustomPermissionsForGroup(System.Guid,System.Guid,System.Int32,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all custom permissions of given type and module for a group.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID. PARAMETER_VALUE_GUID_NULL if the permissions for the group are returned without module filtration.</param>
            <param name="permissionType">Permission type, if the permission type is -1 the permissions for the group are returned without permission type filtration.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetCustomPermissionsForUser(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all custom permissions for a user.
            </summary>
            <param name="userID">User ID.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetCustomPermissionsForUser(System.Guid,System.Guid,System.Int32,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all custom permissions of given type and module for a user.
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID. PARAMETER_VALUE_GUID_NULL if the permissions for the user are returned without module filtration.</param>
            <param name="permissionType">Permission type, if the permission type is -1 the permissions for the user are returned without permission type filtration.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetCustomPermissionType(System.Guid,System.Int32,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns a custom permission type.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>The requested permission type or null if none was found.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetCustomPermissionTypes(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all custom permission types for a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetCustomUserPermissions(System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns a custom user permissions table as a DataTable with columns [ColumnNames.MODULE_ID, ColumnNames.USER_ID, ColumnNames.CUSTOM_ITEM_ID, ColumnNames.PERMISSION_TYPE_ID].
            </summary>
            <param name="openCommand">Sql command object or null.</param>
            <returns>Custom user permissions table as a DataTable with columns [ColumnNames.MODULE_ID, ColumnNames.USER_ID, ColumnNames.CUSTOM_ITEM_ID, ColumnNames.PERMISSION_TYPE_ID].</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetGroupCustomPermissions(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all group permissions for a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="openCommand">The open command.</param>
            <returns>An array of custom group permissions.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetGroupCustomPermissions(System.Guid,System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all group permissions for a group in a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="groupID">Group ID.</param>
            <param name="openCommand">The open command.</param>
            <returns>An array of custom group permissions.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetGroupCustomPermissions(System.Guid,System.Int32,System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all group permissions of given type for a key.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type, if the permission type is -1 all the group permissions for the key are returned.</param>
            <param name="key">Permission key.</param>
            <param name="openCommand">The open command.</param>
            <returns>An array of custom group permissions.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetGroupModulePermissions(System.Guid,System.Int32,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all group permissions for a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type, if the permission type is -1 all the group permissions for the module are returned.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>An array of group module permissions.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModulePermissionTypeDoesNotExistException">Thrown when the module permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetGroupSolutionPermissions(System.Int32,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all group permissions of given type for a solution.
            </summary>
            <param name="permissionType">Permission type, if the permission type is -1 all the group permissions for the solution are returned.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>An array of group solution permissions.</returns>
            <exception cref="T:Litium.Foundation.Security.SolutionPermissionTypeDoesNotExistException">Thrown when the solution permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetModuleGroupPermissions(System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns a module group permissions table as a DataTable with columns [ColumnNames.MODULE_ID, ColumnNames.GROUP_ID, ColumnNames.PERMISSION_TYPE_ID].
            </summary>
            <param name="openCommand">Sql command object or null.</param>
            <returns>Module group permissions table as a DataTable with columns [ColumnNames.MODULE_ID, ColumnNames.GROUP_ID, ColumnNames.PERMISSION_TYPE_ID].</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetModulePermissionsForGroup(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all module permissions for a group.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetModulePermissionsForGroup(System.Guid,System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all module permissions for a group and a module.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module id.</param>
            <param name="openCommand">The open command.</param>
            <returns></returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetModulePermissionsForGroup(System.Guid,System.Int32,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all module permissions of given type for a group.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>An array of permissions, if the permission type is -1 all the permissions for the group are returned.</returns>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetModulePermissionType(System.Guid,System.Int32,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns a module permission type.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>The requested permission type or null if none was found.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetModulePermissionTypes(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all module permission types for a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetModuleUserPermissions(System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns a module user permissions table as a DataTable with columns [ColumnNames.MODULE_ID, ColumnNames.USER_ID, ColumnNames.PERMISSION_TYPE_ID].
            </summary>
            <returns>Module user permissions table as a DataTable with columns [ColumnNames.MODULE_ID, ColumnNames.USER_ID, ColumnNames.PERMISSION_TYPE_ID].</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetSolutionGroupPermissions(System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns a solution group permissions table as a DataTable with columns [ColumnNames.GROUP_ID, ColumnNames.PERMISSION_TYPE_ID].
            </summary>
            <param name="openCommand">Sql command object or null.</param>
            <returns>Solution group permissions table as a DataTable with columns [ColumnNames.GROUP_ID, ColumnNames.PERMISSION_TYPE_ID].</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetSolutionPermissionsForGroup(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all solution permissions for a group.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetSolutionPermissionsForUser(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all solution permissions for a user.
            </summary>
            <param name="userID">User ID.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetSolutionPermissionType(System.Int32,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns a solution permission type.
            </summary>
            <param name="permissionType">Permission type.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>The requested permission type or null was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetSolutionPermissionTypes(System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all solution permission types for a solution.
            </summary>
            <param name="openCommand">Sql command object or null.</param>
            <returns>An array of permissions.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetSolutionUserPermissions(System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns a solution user permissions table as a DataTable with columns [ColumnNames.USER_ID, ColumnNames.PERMISSION_TYPE_ID].
            </summary>
            <returns>Solution user permissions table as a DataTable with columns [ColumnNames.USER_ID, ColumnNames.PERMISSION_TYPE_ID].</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetUserCustomPermissions(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all user permissions of given type for a key.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="openCommand">Sql command object or null.</param>   
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetUserCustomPermissions(System.Guid,System.Int32,System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all user permissions of given type for a key.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type, if the permission type is -1 all the user permissions for the key are returned.</param>
            <param name="key">Permission key.</param>
            <param name="openCommand">Sql command object or null.</param>   
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetUserModulePermissions(System.Guid,System.Int32,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all user permissions for a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>An array of user module permissions.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetModulePermissionsForUser(System.Guid,System.Int32,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all module permissions of given type for a user.
            </summary>
            <param name="userID">User ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="openCommand">The open command.</param>
            <returns>
            An array of permissions, if the permission type is -1 all the permissions for the user are returned.
            </returns>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GetUserSolutionPermissions(System.Int32,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all user permissions for a solution.
            </summary>
            <param name="permissionType">Permission type, if the permission type is -1 all the user permissions for the key are returned.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>An array of user solution permissions.</returns>
            <exception cref="T:Litium.Foundation.Security.SolutionPermissionTypeDoesNotExistException">Thrown when the solution permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GroupCustomPermissionExists(System.Guid,System.Guid,System.Int32,System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns whether a group custom permission exists.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="key">Permission key.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>True if a permission exists, otherwise false.</returns>
            <exception cref="T:Litium.Foundation.Security.CustomPermissionTypeDoesNotExistException">Thrown when the custom permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GroupModulePermissionExists(System.Guid,System.Guid,System.Int32,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns whether a group module permission exists.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>True if a permission exists, otherwise false.</returns>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModulePermissionTypeDoesNotExistException">Thrown when the module permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.GroupSolutionPermissionExists(System.Guid,System.Int32,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns whether a group solution permission exists.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>True if a permission exists, otherwise false.</returns>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.SolutionPermissionTypeDoesNotExistException">Thrown when the solution permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.UpdateCustomPermissionType(Litium.Foundation.Carriers.CustomPermissionTypeCarrier,System.Data.SqlClient.SqlCommand)">
            <summary>
            Upadates a custom permission type.
            </summary>
            <param name="carrier">carrier.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>The updated permission type.</returns>
            <exception cref="T:Litium.Foundation.Security.CustomPermissionTypeDoesNotExistException">Thrown when the custom permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.UpdateModulePermissionType(Litium.Foundation.Carriers.ModulePermissionTypeCarrier,System.Data.SqlClient.SqlCommand)">
            <summary>
            Upadates a module permission type.
            </summary>
            <param name="carrier">carrier.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>The updated permission type.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModulePermissionTypeDoesNotExistException">Thrown when the module permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.UpdateSolutionPermissionType(Litium.Foundation.Carriers.SolutionPermissionTypeCarrier,System.Data.SqlClient.SqlCommand)">
            <summary>
            Upadates a solution permission type
            </summary>
            <param name="carrier">carrier.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>The updated permission type.</returns>
            <exception cref="T:Litium.Foundation.Security.SolutionPermissionTypeDoesNotExistException">Thrown when the solution permission type does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.UserCustomPermissionExists(System.Guid,System.Guid,System.Int32,System.Guid,System.Boolean,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns whether a user custom permission exists.
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="key">Permission key.</param>
            <param name="includeGroups">Whether to include the permissions of the groups which the user belongs to.</param>
            <param name="openCommand">The open command.</param>
            <returns>
            True if a permission exists, otherwise false.
            </returns>
            <exception cref="T:Litium.Foundation.Security.CustomPermissionTypeDoesNotExistException">Thrown when the custom permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.UserModulePermissionExists(System.Guid,System.Guid,System.Int32,System.Boolean,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns whether a user module permission exists.
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="includeGroups">Wheter to include the permissions of the groups which the user belongs to.</param>
            <param name="openCommand">The open command.</param>
            <returns>
            True if a permission exists, otherwise false.
            </returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Security.ModulePermissionTypeDoesNotExistException">Thrown when the module permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.PermissionDataProvider.UserSolutionPermissionExists(System.Guid,System.Int32,System.Boolean,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns whether a group solution permission exists.
            </summary>
            <param name="userID">User ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="includeGroups">Wheter to include the permissions of the groups which the user belongs to.</param>
            <param name="openCommand">Command object or null.</param>
            <returns>True if a permission exists, otherwise false.</returns>
            <exception cref="T:Litium.Foundation.Security.SolutionPermissionTypeDoesNotExistException">Thrown when the solution permission type does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="T:Litium.Foundation.Data.IEventDataProvider">
            <summary>
            Data provider tier functions for events.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.IEventDataProvider.DeleteEvents(System.Int32)">
            <summary>
            Deletes all the events older than the given seconds.
            </summary>
            <param name="secondsOld">Seconds old.</param>
        </member>
        <member name="M:Litium.Foundation.Data.IEventDataProvider.GetLastEventID">
            <summary>
            Returns id of the last event.
            </summary>
            <returns>Id of the last event.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IEventDataProvider.GetLatestEvents(System.Int64)">
            <summary>
            Returns all the events that are logged after the systems last event.
            </summary>
            <param name="lastEventID">Id of the last event.</param>
            <returns>All the events that are logged after the systems last event.</returns>
        </member>
        <member name="T:Litium.Foundation.Data.MSSQL.GroupDataProvider">
            <summary>
            Data provider tier functions for groups.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Data.IGroupDataProvider">
            <summary>
            Data provider tier functions for groups.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.IGroupDataProvider.CreateGroup(Litium.Foundation.Carriers.GroupCarrier)">
            <summary>
            Creates a new group in the database.
            </summary>
            <param name="group">Group carrier.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupExistsException">Thrown when the group name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IGroupDataProvider.CreateGroups(Litium.Foundation.Carriers.GroupCarrier[])">
            <summary>
            Creates groups in the database.
            </summary>
            <param name="groups">Group carriers.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupExistsException">Thrown when the group name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IGroupDataProvider.DeleteAllGroups(System.Guid)">
            <summary>
            Deletes all groups in the solution.
            </summary>
            <param name="userID">User ID.</param>
        </member>
        <member name="M:Litium.Foundation.Data.IGroupDataProvider.DeleteAllMemberships(System.Guid)">
            <summary>
            Deletes all user memberships for a group.
            </summary>
            <param name="groupID">Group ID.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IGroupDataProvider.DeleteGroup(System.Guid,System.Guid)">
            <summary>
            Deletes a group.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="userID">User ID.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IGroupDataProvider.ExistsGroup(System.Guid)">
            <summary>
            Returns whether a group exists in the database.
            </summary>
            <param name="groupID">Group ID.</param>
            <returns>True if a group exists in the database, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IGroupDataProvider.GetDeletedGroups(System.DateTime)">
            <summary>
            Returns all deleted groups from (and including) a specific date time.
            </summary>
            <param name="fromDate">From date time.</param>
            <returns>An array of deleted groups.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IGroupDataProvider.GetGroup(System.Guid,System.Boolean,System.Boolean)">
            <summary>
            Returns a group.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="includeMembers">Whether to include groups members or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>The requested group or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IGroupDataProvider.GetGroupCount">
            <summary>
            Returns the group count in the solution.
            </summary>
            <returns>The requested group count.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IGroupDataProvider.GetGroupFromName(System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns a group.
            </summary>
            <param name="groupName">Group name.</param>
            <param name="includeMembers">Whether to include groups members or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>The requested group or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IGroupDataProvider.GetGroupFromPath(System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns a group, given a group path.
            </summary>
            <param name="path">Group path.</param>
            <param name="includeMembers">Whether to include groups members or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>The requested group or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IGroupDataProvider.GetGroups(System.Boolean,System.Boolean)">
            <summary>
            Returns all groups in a solution.
            </summary>
            <param name="includeMembers">Whether to include groups members or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>All groups in a solution.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IGroupDataProvider.GetGroups(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns all groups in a solution, with/without central administration.
            </summary>
            <param name="centralAdministration">Only select groups with central administration = true/false.</param>
            <param name="includeMembers">Whether to include groups members or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>All groups in a solution.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IGroupDataProvider.GetGroups(System.Int16,System.Boolean,System.Boolean)">
            <summary>
            Returns all groups of a specified account type in a solution.
            </summary>
            <param name="accountType">Account type, see AccountTypes.</param>
            <param name="includeMembers">Whether to include groups members or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>All groups in a solution.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IGroupDataProvider.GetLatestUpdate(System.Guid)">
            <summary>
            Returns the date time for the latest update.
            This value is always up to date (never cached).
            </summary>
            <param name="groupID">Group ID.</param>
            <returns>Returns the date time for the latest update.</returns>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IGroupDataProvider.GetMemberIDs(System.Guid)">
            <summary>
            Returns the ID's of the users who are members in the specified group.
            </summary>
            <param name="groupID">Group ID.</param>
            <returns>Array of IDs.</returns>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IGroupDataProvider.GetMembers(System.Guid,System.Boolean,System.Boolean)">
            <summary>
            Returns a groups members.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="includeGroups">Whether to include user groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>Array of group members.</returns>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IGroupDataProvider.GetNewGroups(System.DateTime,System.Boolean,System.Boolean)">
            <summary>
            Returns all new groups from (and including) a specific from date time.
            </summary>
            <param name="fromDate">From date time.</param>
            <param name="includeMembers">Whether to include groups members or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>All new groups.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IGroupDataProvider.GetUpdatedGroups(System.DateTime,System.Boolean,System.Boolean)">
            <summary>
            Returns all updated groups from (and including) a specific from date time.
            </summary>
            <param name="fromDate">From date time.</param>
            <param name="includeMembers">Whether to include groups members or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>All updated groups.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IGroupDataProvider.UpdateGroup(Litium.Foundation.Carriers.GroupCarrier)">
            <summary>
            Updates a group.
            </summary>
            <param name="group">Update info.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupExistsException">Thrown when the group name already exists.</exception>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.#ctor(Litium.Foundation.Data.MSSQL.DAL)">
            <summary>
            Constructor.
            </summary>
            <param name="dal">Data access layer.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.CreateGroup(Litium.Foundation.Carriers.GroupCarrier)">
            <summary>
            Creates a new group in the database.
            </summary>
            <param name="group">Group carrier.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupExistsException">Thrown when the group name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.CreateGroups(Litium.Foundation.Carriers.GroupCarrier[])">
            <summary>
            Creates groups in the database.
            </summary>
            <param name="groups">Group carriers.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupExistsException">Thrown when the group name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.DeleteAllGroups(System.Guid)">
            <summary>
            Deletes all groups in the solution.
            </summary>
            <param name="userID">User ID.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.DeleteAllMemberships(System.Guid)">
            <summary>
            Deletes all user memberships for a group.
            </summary>
            <param name="groupID">Group ID.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.DeleteGroup(System.Guid,System.Guid)">
            <summary>
            Deletes a group.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="userID">User ID.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.ExistsGroup(System.Guid)">
            <summary>
            Returns whether a group exists in the database.
            </summary>
            <param name="groupID">Group ID.</param>
            <returns>True if a group exists in the database, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.GetDeletedGroups(System.DateTime)">
            <summary>
            Returns all deleted groups from (and including) a specific date time.
            </summary>
            <param name="fromDate">From date time.</param>
            <returns>An array of deleted groups.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.GetGroup(System.Guid,System.Boolean,System.Boolean)">
            <summary>
            Returns a group.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="includeMembers">Whether to include groups members or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>The requested group or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.GetGroupCount">
            <summary>
            Returns the group count in the solution.
            </summary>
            <returns>The requested group count.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.GetGroupFromName(System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns a group.
            </summary>
            <param name="groupName">Group name.</param>
            <param name="includeMembers">Whether to include groups members or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>The requested group or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.GetGroupFromPath(System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns a group, given a group path.
            </summary>
            <param name="path">Group path.</param>
            <param name="includeMembers">Whether to include groups members or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>The requested group or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.GetGroups(System.Boolean,System.Boolean)">
            <summary>
            Returns all groups in a solution.
            </summary>
            <param name="includeMembers">Whether to include groups members or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>All groups in a solution.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.GetGroups(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns all groups in a solution, with/without central administration.
            </summary>
            <param name="centralAdministration">Only select groups with central administration = true/false.</param>
            <param name="includeMembers">Whether to include groups members or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>All groups in a solution.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.GetGroups(System.Int16,System.Boolean,System.Boolean)">
            <summary>
            Returns all groups of a specified account type in a solution.
            </summary>
            <param name="accountType">Account type, see AccountTypes.</param>
            <param name="includeMembers">Whether to include groups members or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>All groups in a solution.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.GetLatestUpdate(System.Guid)">
            <summary>
            Returns the date time for the latest update.
            This value is always up to date (never cached).
            </summary>
            <param name="groupID">Group ID.</param>
            <returns>Returns the date time for the latest update.</returns>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.GetMemberIDs(System.Guid)">
            <summary>
            Returns the ID's of the users who are members in the specified group.
            </summary>
            <param name="groupID">Group ID.</param>
            <returns>Array of IDs.</returns>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.GetMembers(System.Guid,System.Boolean,System.Boolean)">
            <summary>
            Returns a groups members.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="includeGroups">Whether to include user groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>Array of group members.</returns>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.GetNewGroups(System.DateTime,System.Boolean,System.Boolean)">
            <summary>
            Returns all new groups from (and including) a specific from date time.
            </summary>
            <param name="fromDate">From date time.</param>
            <param name="includeMembers">Whether to include groups members or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>All new groups.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.GetUpdatedGroups(System.DateTime,System.Boolean,System.Boolean)">
            <summary>
            Returns all updated groups from (and including) a specific from date time.
            </summary>
            <param name="fromDate">From date time.</param>
            <param name="includeMembers">Whether to include groups members or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>All updated groups.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.UpdateGroup(Litium.Foundation.Carriers.GroupCarrier)">
            <summary>
            Updates a group.
            </summary>
            <param name="group">Update info.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupExistsException">Thrown when the group name already exists.</exception>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.CreateGroup(Litium.Foundation.Carriers.GroupCarrier,System.Data.SqlClient.SqlCommand)">
            <summary>
            Creates a new group in the database.
            </summary>
            <param name="group">Group carrier.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupExistsException">Thrown when the group name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.CreateGroups(Litium.Foundation.Carriers.GroupCarrier[],System.Data.SqlClient.SqlCommand)">
            <summary>
            Creates groups in the database.
            </summary>
            <param name="groups">Group carriers.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupExistsException">Thrown when the group name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.DeleteAllGroups(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes all groups in the solution.
            </summary>
            <param name="userID">User ID</param>
            <param name="openCommand">Sql command object or null.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.DeleteAllMemberships(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes all user memberships for a group
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.DeleteGroup(System.Guid,System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes a group.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="userID">User ID.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.ExistsGroup(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns whether a group exists in the database.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>True if a group exists in the database, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.GetDeletedGroups(System.DateTime,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all deleted groups from (and including) a specific date time.
            </summary>
            <param name="fromDate">From date time.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>An array of deleted groups.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.GetGroup(System.Guid,System.Boolean,System.Boolean,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns a group.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="includeMembers">Whether to include groups members or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>The requested group or null if none was found.</returns>
            <remarks>
            SP_GET_GROUP returns recordsets in following format and order:
            GroupRecordset[]
            If include permissions is true.
            CustomPermissionRecordset0[]
            CustomPermissionRecordset1[]
            .
            ModulePermissionRecordset0[]
            ModulePermissionRecordset1[]
            .
            SolutionPermissionRecordset0[]
            SolutionPermissionRecordset1[]
            .
            .
            If include members is true.
            MemberRecordset0[]
            MemberRecordset1[]
            .
            .
            </remarks>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.GetGroupCount(System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns the group count in the solution.
            </summary>
            <param name="openCommand">Sql command object or null.</param>
            <returns>The requested group count.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.GetGroupFromName(System.String,System.Boolean,System.Boolean,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns a group.
            </summary>
            <param name="groupName">Group name.</param>
            <param name="includeMembers">Whether to include groups members or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>The requested group or null if none was found.</returns>
            <remarks>
            SP_GET_GROUP_FROM_NAME returns recordsets in following format and order:
            GroupRecordset[]
            If include permissions is true.
            CustomPermissionRecordset0[]
            CustomPermissionRecordset1[]
            .
            ModulePermissionRecordset0[]
            ModulePermissionRecordset1[]
            .
            SolutionPermissionRecordset0[]
            SolutionPermissionRecordset1[]
            .
            .
            If include members is true.
            MemberRecordset0[]
            MemberRecordset1[]
            .
            .
            </remarks>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.GetGroupFromPath(System.String,System.Boolean,System.Boolean,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns a group, given a group path.
            </summary>
            <param name="path">Group path.</param>
            <param name="includeMembers">Whether to include groups members or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>The requested group or null if none was found.</returns>
            <remarks>
            SP_GET_GROUP_FROM_PATH returns recordsets in following format and order:
            GroupRecordset[]
            If include permissions is true.
            CustomPermissionRecordset0[]
            CustomPermissionRecordset1[]
            .
            ModulePermissionRecordset0[]
            ModulePermissionRecordset1[]
            .
            SolutionPermissionRecordset0[]
            SolutionPermissionRecordset1[]
            .
            .
            If include members is true.
            MemberRecordset0[]
            MemberRecordset1[]
            .
            .
            </remarks>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.GetGroups(System.Boolean,System.Boolean,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all groups in a solution.
            </summary>
            <param name="includeMembers">Whether to include groups members or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>All groups in a solution.</returns>
            <remarks>
            SP_GET_GROUPS returns recordsets in following format and order:
            GroupRecordset0[]
            GroupRecordset1[]
            .
            .
            If include permissions is true.
            CustomPermissionRecordset0[]
            CustomPermissionRecordset1[]
            .
            ModulePermissionRecordset0[]
            ModulePermissionRecordset1[]
            .
            SolutionPermissionRecordset0[]
            SolutionPermissionRecordset1[]
            .
            .
            If include members is true.
            MemberRecordset0[]
            MemberRecordset1[]
            .
            .
            </remarks>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.GetGroups(System.Boolean,System.Boolean,System.Boolean,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all groups in a solution, with/without central administration.
            </summary>
            <param name="centralAdministration">Only select groups with central administration = true/false.</param>
            <param name="includeMembers">Whether to include groups members or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>All groups in a solution.</returns>
            <remarks>
            SP_GET_GROUPS_FROM_CENTRAL_ADMINISTRATION returns recordsets in following format and order:
            GroupRecordset0[]
            GroupRecordset1[]
            .
            .
            If include permissions is true.
            CustomPermissionRecordset0[]
            CustomPermissionRecordset1[]
            .
            ModulePermissionRecordset0[]
            ModulePermissionRecordset1[]
            .
            SolutionPermissionRecordset0[]
            SolutionPermissionRecordset1[]
            .
            .
            If include members is true.
            MemberRecordset0[]
            MemberRecordset1[]
            .
            .
            </remarks>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.GetGroups(System.Int16,System.Boolean,System.Boolean,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all groups of a specified account type in a solution.
            </summary>
            <param name="accountType">Account type, see AccountTypes.</param>
            <param name="includeMembers">Whether to include groups members or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>All groups in a solution.</returns>
            <remarks>
            SP_GET_GROUPS_FROM_TYPE returns recordsets in following format and order:
            GroupRecordset0[]
            GroupRecordset1[]
            .
            .
            If include permissions is true.
            CustomPermissionRecordset0[]
            CustomPermissionRecordset1[]
            .
            ModulePermissionRecordset0[]
            ModulePermissionRecordset1[]
            .
            SolutionPermissionRecordset0[]
            SolutionPermissionRecordset1[]
            .
            .
            If include members is true.
            MemberRecordset0[]
            MemberRecordset1[]
            .
            .
            </remarks>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.GetGroupsFromReader(System.Boolean,System.Boolean,System.Data.SqlClient.SqlDataReader)">
            <summary>
            Returns groups from a reader.
            </summary>
            <param name="includeMembers">Whether to include groups members or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="reader">Sql data reader containing recordsets in following format and order:
            GroupRecordset0[]
            GroupRecordset1[]
            .
            .
            If include permissions is true.
            CustomPermissionRecordset0[]
            CustomPermissionRecordset1[]
            .
            ModulePermissionRecordset0[]
            ModulePermissionRecordset1[]
            .
            SolutionPermissionRecordset0[]
            SolutionPermissionRecordset1[]
            .
            .
            If include members is true.
            MemberRecordset0[]
            MemberRecordset1[]
            .
            .
            </param>
            <returns>The requested groups from a reader or an empty array if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.GetLatestUpdate(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns the date time for the latest update.
            This value is always up to date (never cached).
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>Returns the date time for the latest update.</returns>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.GetMemberIDs(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns the ID's of the users who are members in the specified group.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>Array of IDs.</returns>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.GetMembers(System.Guid,System.Boolean,System.Boolean,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns a groups members.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="includeGroups">Whether to include user groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>Array of group members.</returns>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <remarks>
            SP_GET_MEMBERS returns recordsets in following format and order:
            UserRecordset0[]
            UserRecordset1[]
            .
            .
            If include permissions is true.
            CustomPermissionRecordset0[]
            CustomPermissionRecordset1[]
            .
            ModulePermissionRecordset0[]
            ModulePermissionRecordset1[]
            .
            SolutionPermissionRecordset0[]
            SolutionPermissionRecordset1[]
            .
            .
            If include user groups is true.
            GroupRecordset0[]
            GroupRecordset1[]
            .
            .
            </remarks>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.GetNewGroups(System.DateTime,System.Boolean,System.Boolean,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all new groups from (and including) a specific from date time.
            </summary>
            <param name="fromDate">From date time.</param>
            <param name="includeMembers">Whether to include groups members or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>All new groups.</returns>
            <remarks>
            SP_GET_NEW_GROUPS returns recordsets in following format and order:
            GroupRecordset0[]
            GroupRecordset1[]
            .
            .
            If include permissions is true.
            CustomPermissionRecordset0[]
            CustomPermissionRecordset1[]
            .
            ModulePermissionRecordset0[]
            ModulePermissionRecordset1[]
            .
            SolutionPermissionRecordset0[]
            SolutionPermissionRecordset1[]
            .
            .
            If include members is true.
            MemberRecordset0[]
            MemberRecordset1[]
            .
            .
            </remarks>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.GetUpdatedGroups(System.DateTime,System.Boolean,System.Boolean,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all updated groups from (and including) a specific from date time.
            </summary>
            <param name="fromDate">From date time.</param>
            <param name="includeMembers">Whether to include groups members or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>All updated groups.</returns>
            <remarks>
            SP_GET_UPDATED_GROUPS returns recordsets in following format and order:
            GroupRecordset0[]
            GroupRecordset1[]
            .
            .
            If include permissions is true.
            CustomPermissionRecordset0[]
            CustomPermissionRecordset1[]
            .
            ModulePermissionRecordset0[]
            ModulePermissionRecordset1[]
            .
            SolutionPermissionRecordset0[]
            SolutionPermissionRecordset1[]
            .
            .
            If include members is true.
            MemberRecordset0[]
            MemberRecordset1[]
            .
            .
            </remarks>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.UpdateGroup(Litium.Foundation.Carriers.GroupCarrier,System.Data.SqlClient.SqlCommand)">
            <summary>
            Updates a group.
            </summary>
            <param name="group">Update info.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupExistsException">Thrown when the group name already exists.</exception>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.CreateGroupContent(Litium.Foundation.Carriers.GroupCarrier,System.Data.SqlClient.SqlCommand)">
            <summary>
            Creates the content of a new group.
            </summary>
            <param name="group">Group object as GroupCarrier.</param>
            <param name="openCommand">Sql command object can not be null.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.ExistsMember(System.Guid,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Returns true if the given member id exists in the given member id array otherwise false.
            </summary>
            <param name="memberID">Member id.</param>
            <param name="memberIDs">Array with member ids.</param>
            <returns>True if the given member id exists in the given member id array otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.GetGroupFromReader(System.Boolean,System.Boolean,System.Data.SqlClient.SqlDataReader)">
            <summary>
            Returns a group from a reader.
            </summary>
            <param name="includeMembers">Whether to include groups members or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="reader">Sql data reader containing recordsets in following format and order:
            GroupRecordset[]
            If include permissions is true.
            CustomPermissionRecordset0[]
            CustomPermissionRecordset1[]
            .
            ModulePermissionRecordset0[]
            ModulePermissionRecordset1[]
            .
            SolutionPermissionRecordset0[]
            SolutionPermissionRecordset1[]
            .
            .
            If include members is true.
            MemberRecordset0[]
            MemberRecordset1[]
            .
            .
            </param>
            <returns>The requested group from a reader or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.GetGroupContent(Litium.Foundation.Carriers.GroupCarrier,System.Boolean,System.Boolean,System.Data.SqlClient.SqlDataReader)">
            <summary>
            Gets the content of the group and sets the corresponding group property. 
            </summary>
            <param name="group">Group object as GroupCarrier.</param>
            <param name="includeMembers">Whether to include members or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="reader">Sql data reader containing recordsets in following format and order:
            If include permissions is true.
            CustomPermissionRecordset0[]
            CustomPermissionRecordset1[]
            .
            ModulePermissionRecordset0[]
            ModulePermissionRecordset1[]
            .
            SolutionPermissionRecordset0[]
            SolutionPermissionRecordset1[]
            .
            .
            If include members is true.
            MemberRecordset0[]
            MemberRecordset1[]
            .
            .
            </param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.GetGroupsContent(System.Collections.ArrayList,System.Boolean,System.Boolean,System.Data.SqlClient.SqlDataReader)">
            <summary>
            Gets the content of the groups and sets the corresponding group property. 
            </summary>
            <param name="groups">Array lis containint Group objects as GroupCarriers.</param>
            <param name="includeMembers">Whether to include members or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="reader">Sql data reader containing recordsets in following format and order:
            If include permissions is true.
            CustomPermissionRecordset0[]
            CustomPermissionRecordset1[]
            .
            ModulePermissionRecordset0[]
            ModulePermissionRecordset1[]
            .
            SolutionPermissionRecordset0[]
            SolutionPermissionRecordset1[]
            .
            .
            If include members is true.
            MemberRecordset0[]
            MemberRecordset1[]
            .
            .
            </param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.GroupDataProvider.UpdateGroupContent(Litium.Foundation.Carriers.GroupCarrier,System.Data.SqlClient.SqlCommand)">
            <summary>
            Updates the content of a new group.
            </summary>
            <param name="group">Group object as GroupCarrier.</param>
            <param name="openCommand">Sql command object can not be null.</param>
        </member>
        <member name="T:Litium.Foundation.Data.MSSQL.EventDataProvider">
            <summary>
            Data provider tier functions for events.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.EventDataProvider.#ctor(Litium.Foundation.Data.MSSQL.DAL)">
            <summary>
            Constructor.
            </summary>
            <param name="dal">Data access layer.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.EventDataProvider.DeleteEvents(System.Int32)">
            <summary>
            Deletes all the events older than the given seconds.
            </summary>
            <param name="seconds">Seconds old.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.EventDataProvider.GetLastEventID">
            <summary>
            Returns id of the last event.
            </summary>
            <returns>Id of the last event.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.EventDataProvider.GetLatestEvents(System.Int64)">
            <summary>
            Returns all the events that are logged after the systems last event.
            </summary>
            <param name="lastEventID">Id of the last event.</param>
            <returns>All the events that are logged after the systems last event.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.EventDataProvider.DeleteEvents(System.Int32,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes all the events older than the given seconds.
            </summary>
            <param name="secondsOld">Seconds old.</param>
            <param name="openCommand">Sql command objec or null.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.EventDataProvider.GetLastEventID(System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns id of the last event.
            </summary>
            <param name="openCommand">Sql command objec or null.</param>
            <returns>Id of the last event.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.EventDataProvider.GetLatestEvents(System.Int64,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all the events that are logged after the systems last event.
            </summary>
            <param name="lastEventID">Id of the last event.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>All the events that are logged after the systems last event.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.EventDataProvider.GetEvent(System.Int64,System.Int16,System.Guid,System.String,System.String,System.String,System.String,System.String,System.DateTime)">
            <summary>
            Returns appropriate event carrier.
            </summary>
            <param name="eventID">ID of the event.</param>
            <param name="eventType">Type of the event.</param>
            <param name="moduleID">Module id.</param>
            <param name="argument1">Argument 1 (targetID_1 if the event is a Foundation event).</param>
            <param name="argument2">Argument 2 (targetID_2 if the event is a Foundation event).</param>
            <param name="argument3">Arguemnt 3 (permission type id if the event is a Foundation event).</param>
            <param name="argument4">Argument 4 (string key if the event is a Foundation event).</param>
            <param name="argument5">Arguemnt 5 (string value if the event is a Foundation event).</param>
            <param name="timeStamp">Time of the event.</param>
            <returns>Appropriate event carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.EventDataProvider.GetEvents(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Reads and creates appropriate event carrier from the given reader.
            </summary>
            <param name="reader">Data reader.</param>
            <returns>Events from the given reader.</returns>
        </member>
        <member name="T:Litium.Foundation.Data.MSSQL.ModuleDataProvider">
            <summary>
            Data provider tier functions for modules.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Data.IModuleDataProvider">
            <summary>
            Data provider tier functions for modules.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.IModuleDataProvider.CreateModule(Litium.Foundation.Carriers.ModuleCarrier)">
            <summary>
            Creates a new module
            </summary>
            <param name="module">Module carrier.</param>
            <returns>The new module.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleExistsException">Thrown when trying to create a module with a class name or id that already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IModuleDataProvider.DeleteAllModules">
            <summary>
            Deletes all modules
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.IModuleDataProvider.DeleteModule(System.Guid)">
            <summary>
            Deletes a module
            </summary>
            <param name="moduleID">Module ID.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IModuleDataProvider.ExistsModule(System.Guid)">
            <summary>
            Returns whether a module exists in the database.
            </summary>
            <param name="moduleID">Module ID.</param>
            <returns>True if a module exists in the database, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IModuleDataProvider.GetModule(System.Guid,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="includePermissionTypes">Whether to include permissions types or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="includeModuleStrings">Whether to include module strings or not.</param>
            <returns>The requested module or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IModuleDataProvider.GetModuleCount">
            <summary>
            Returns the module count.
            </summary>
            <returns>The requested module count.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IModuleDataProvider.GetModuleFromName(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a module given a module name.
            </summary>
            <param name="moduleName">Module name.</param>
            <param name="includePermissionTypes">Whether to include permissions types or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="includeModuleStrings">Whether to include module strings or not.</param>
            <returns>The requested module or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IModuleDataProvider.GetModules(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns all modules in a solution.
            </summary>
            <param name="includePermissionTypes">Whether to include permissions types or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="includeModuleStrings">Whether to include module strings or not.</param>
            <returns>An array of modules.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IModuleDataProvider.GetModuleStringsForKey(System.String)">
            <summary>
            Returns all module strings for a key.
            </summary>
            <param name="key">Key.</param>
            <returns>All module strings for a key.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IModuleDataProvider.UpdateModule(Litium.Foundation.Carriers.ModuleCarrier)">
            <summary>
            Updates a module.
            </summary>
            <param name="module">Update info.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Modules.ModuleExistsException">Thrown when trying to update a module with a class name that already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.ModuleDataProvider.#ctor(Litium.Foundation.Data.MSSQL.DAL)">
            <summary>
            Constructor.
            </summary>
            <param name="dal">Data access layer.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.ModuleDataProvider.CreateModule(Litium.Foundation.Carriers.ModuleCarrier)">
            <summary>
            Creates a new module.
            </summary>
            <param name="module">Module carrier.</param>
            <returns>The new module.</returns>
            <exception cref="T:Litium.Foundation.Modules.ModuleExistsException">Thrown when trying to create a module with a class name or id that already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.ModuleDataProvider.DeleteAllModules">
            <summary>
            Deletes all modules.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.ModuleDataProvider.DeleteModule(System.Guid)">
            <summary>
            Deletes a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.ModuleDataProvider.ExistsModule(System.Guid)">
            <summary>
            Returns whether a module exists in the database.
            </summary>
            <param name="moduleID">Module ID.</param>
            <returns>True if a module exists in the database, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.ModuleDataProvider.GetModule(System.Guid,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="includePermissionTypes">Whether to include permissions types or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="includeModuleStrings">Whether to include module strings or not.</param>
            <returns>The requested module or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.ModuleDataProvider.GetModuleCount">
            <summary>
            Returns the module count.
            </summary>
            <returns>The requested module count.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.ModuleDataProvider.GetModuleFromName(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a module given a module name.
            </summary>
            <param name="moduleName">Module name.</param>
            <param name="includePermissionTypes">Whether to include permissions types or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="includeModuleStrings">Whether to include module strings or not.</param>
            <returns>The requested module or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.ModuleDataProvider.GetModules(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns all modules in a solution.
            </summary>
            <param name="includePermissionTypes">Whether to include permissions types or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="includeModuleStrings">Whether to include module strings or not.</param>
            <returns>An array of modules.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.ModuleDataProvider.GetModuleStringsForKey(System.String)">
            <summary>
            Returns all module strings for a key.
            </summary>
            <param name="key">Key.</param>
            <returns>All module strings for a key.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.ModuleDataProvider.UpdateModule(Litium.Foundation.Carriers.ModuleCarrier)">
            <summary>
            Updates a module.
            </summary>
            <param name="module">Update info.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Modules.ModuleExistsException">Thrown when trying to update a module with a class name that already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.ModuleDataProvider.CreateModule(Litium.Foundation.Carriers.ModuleCarrier,System.Data.SqlClient.SqlCommand)">
            <summary>
            Creates a new module.
            </summary>
            <param name="module">Module carrier.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleExistsException">Thrown when trying to create a module with a class name or id that already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.ModuleDataProvider.DeleteAllModules(System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes all modules
            </summary>
            <param name="openCommand">Sql command object or null.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.ModuleDataProvider.DeleteModule(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.ModuleDataProvider.ExistsModule(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns whether a module exists in the database.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>True if a module exists in the database, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.ModuleDataProvider.GetModule(System.Guid,System.Boolean,System.Boolean,System.Boolean,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="includePermissionTypes">Whether to include permissions types or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="includeModuleStrings">Whether to include module strings or not.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>The requested module or null if none was found.</returns>
            <remarks>
            SP_GET_MODULE returns recordsets in following format and order:
            ModuleRecordset[]
            If include permission types is true.
            CustomPermissionTypeRecordset0[]
            CustomPermissionTypeRecordset1[]
            .
            ModulePermissionTypeRecordset0[]
            ModulePermissionTypeRecordset1[]
            .
            .
            If include permissions is true.
            CustomGroupPermissionRecordset0[]
            CustomGroupPermissionRecordset1[]
            .
            ModuleGroupPermissionRecordset0[]
            ModuleGroupPermissionRecordset1[]
            .
            CustomUserPermissionRecordset0[]
            CustomUserPermissionRecordset1[]
            .
            ModuleUserPermissionRecordset0[]
            ModuleUserPermissionRecordset1[]
            .
            .
            If include module strings is true.
            StringRecordset0[]
            StringRecordset1[]
            .
            .
            </remarks>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.ModuleDataProvider.GetModuleCount(System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns the module count.
            </summary>
            <param name="openCommand">Sql command object or null.</param>
            <returns>The requested module count.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.ModuleDataProvider.GetModuleFromName(System.String,System.Boolean,System.Boolean,System.Boolean,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns a module given a module name.
            </summary>
            <param name="moduleName">Module name.</param>
            <param name="includePermissionTypes">Whether to include permissions types or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="includeModuleStrings">Whether to include module strings or not.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>The requested module or null if none was found.</returns>
            <remarks>
            SP_GET_MODULE_FROM_NAME returns recordsets in following format and order:
            ModuleRecordset[]
            If include permission types is true.
            CustomPermissionTypeRecordset0[]
            CustomPermissionTypeRecordset1[]
            .
            ModulePermissionTypeRecordset0[]
            ModulePermissionTypeRecordset1[]
            .
            .
            If include permissions is true.
            CustomGroupPermissionRecordset0[]
            CustomGroupPermissionRecordset1[]
            .
            ModuleGroupPermissionRecordset0[]
            ModuleGroupPermissionRecordset1[]
            .
            CustomUserPermissionRecordset0[]
            CustomUserPermissionRecordset1[]
            .
            ModuleUserPermissionRecordset0[]
            ModuleUserPermissionRecordset1[]
            .
            .
            If include module strings is true.
            StringRecordset0[]
            StringRecordset1[]
            .
            .
            </remarks>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.ModuleDataProvider.GetModules(System.Boolean,System.Boolean,System.Boolean,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all modules in a solution.
            </summary>
            <param name="includePermissionTypes">Whether to include permissions types or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="includeModuleStrings">Whether to include module strings or not.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>An array of modules.</returns>
            <remarks>
            SP_GET_MODULES returns recordsets in following format and order:
            ModuleRecordset0[]
            ModuleRecordset1[]
            .
            .
            If include permission types is true.
            CustomPermissionTypeRecordset0[]
            CustomPermissionTypeRecordset1[]
            .
            ModulePermissionTypeRecordset0[]
            ModulePermissionTypeRecordset1[]
            .
            .
            If include permissions is true.
            CustomGroupPermissionRecordset0[]
            CustomGroupPermissionRecordset1[]
            .
            ModuleGroupPermissionRecordset0[]
            ModuleGroupPermissionRecordset1[]
            .
            CustomUserPermissionRecordset0[]
            CustomUserPermissionRecordset1[]
            .
            ModuleUserPermissionRecordset0[]
            ModuleUserPermissionRecordset1[]
            .
            .
            If include module strings is true.
            StringRecordset0[]
            StringRecordset1[]
            .
            .
            </remarks>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.ModuleDataProvider.GetModuleStringsForKey(System.String,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all module strings for a key.
            </summary>
            <param name="key">Key.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>All module strings for a key.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.ModuleDataProvider.UpdateModule(Litium.Foundation.Carriers.ModuleCarrier,System.Data.SqlClient.SqlCommand)">
            <summary>
            Updates a module.
            </summary>
            <param name="module">Update info.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Modules.ModuleExistsException">Thrown when trying to update a module with a class name that already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.ModuleDataProvider.CreateModuleContent(Litium.Foundation.Carriers.ModuleCarrier,System.Data.SqlClient.SqlCommand)">
            <summary>
            Creates the content of a new module.
            </summary>
            <param name="module">Module object as ModuleCarrier.</param>
            <param name="openCommand">Sql command object can not be null.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.ModuleDataProvider.GetModuleFromReader(System.Boolean,System.Boolean,System.Boolean,System.Data.SqlClient.SqlDataReader)">
            <summary>
            Returns a module from a reader.
            </summary>
            <param name="includePermissionTypes">Whether to include permissions types or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="includeModuleStrings">Whether to include module strings or not.</param>
            <param name="reader">Sql data reader containing recordsets in following format and order:
            ModuleRecordset[]
            If include permission types is true.
            CustomPermissionTypeRecordset0[]
            CustomPermissionTypeRecordset1[]
            .
            ModulePermissionTypeRecordset0[]
            ModulePermissionTypeRecordset1[]
            .
            .
            If include permissions is true.
            CustomGroupPermissionRecordset0[]
            CustomGroupPermissionRecordset1[]
            .
            ModuleGroupPermissionRecordset0[]
            ModuleGroupPermissionRecordset1[]
            .
            CustomUserPermissionRecordset0[]
            CustomUserPermissionRecordset1[]
            .
            ModuleUserPermissionRecordset0[]
            ModuleUserPermissionRecordset1[]
            .
            .
            If include module strings is true.
            StringRecordset0[]
            StringRecordset1[]
            .
            .
            </param>
            <returns>The requested module from a reader or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.ModuleDataProvider.GetModuleContent(Litium.Foundation.Carriers.ModuleCarrier,System.Boolean,System.Boolean,System.Boolean,System.Data.SqlClient.SqlDataReader)">
            <summary>
            Gets the content of the module and sets the corresponding module property. 
            </summary>
            <param name="module">Module object as module carrier.</param>
            <param name="includePermissionTypes">Whether to include permissions types or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="includeModuleStrings">Whether to include module strings or not.</param>
            <param name="reader">Sql data reader containing recordsets in following format and order:
            If include permission types is true.
            CustomPermissionTypeRecordset0[]
            CustomPermissionTypeRecordset1[]
            .
            ModulePermissionTypeRecordset0[]
            ModulePermissionTypeRecordset1[]
            .
            .
            If include permissions is true.
            CustomGroupPermissionRecordset0[]
            CustomGroupPermissionRecordset1[]
            .
            ModuleGroupPermissionRecordset0[]
            ModuleGroupPermissionRecordset1[]
            .
            CustomUserPermissionRecordset0[]
            CustomUserPermissionRecordset1[]
            .
            ModuleUserPermissionRecordset0[]
            ModuleUserPermissionRecordset1[]
            .
            .
            If include module strings is true.
            StringRecordset0[]
            StringRecordset1[]
            .
            .
            </param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.ModuleDataProvider.GetModulesFromReader(System.Boolean,System.Boolean,System.Boolean,System.Data.SqlClient.SqlDataReader)">
            <summary>
            Returns modules from a reader.
            </summary>
            <param name="includePermissionTypes">Whether to include permissions types or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="includeModuleStrings">Whether to include module strings or not.</param>
            <param name="reader">Sql data reader containing recordsets in following format and order:
            ModuleRecordset0[]
            ModuleRecordset1[]
            .
            .
            If include permission types is true.
            CustomPermissionTypeRecordset0[]
            CustomPermissionTypeRecordset1[]
            .
            ModulePermissionTypeRecordset0[]
            ModulePermissionTypeRecordset1[]
            .
            .
            If include permissions is true.
            CustomGroupPermissionRecordset0[]
            CustomGroupPermissionRecordset1[]
            .
            ModuleGroupPermissionRecordset0[]
            ModuleGroupPermissionRecordset1[]
            .
            CustomUserPermissionRecordset0[]
            CustomUserPermissionRecordset1[]
            .
            ModuleUserPermissionRecordset0[]
            ModuleUserPermissionRecordset1[]
            .
            .
            If include module strings is true.
            StringRecordset0[]
            StringRecordset1[]
            .
            .
            </param>
            <returns>The requested module from a reader or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.ModuleDataProvider.GetModulesContent(System.Collections.ArrayList,System.Boolean,System.Boolean,System.Boolean,System.Data.SqlClient.SqlDataReader)">
            <summary>
            Gets the content of modules and sets the corresponding module property. 
            </summary>
            <param name="modules">ArrayList containing Module objects as module carriers.</param>
            <param name="includePermissionTypes">Whether to include permissions types or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="includeModuleStrings">Whether to include module strings or not.</param>
            <param name="reader">Sql data reader containing recordsets in following format and order:
            If include permission types is true.
            CustomPermissionTypeRecordset0[]
            CustomPermissionTypeRecordset1[]
            .
            ModulePermissionTypeRecordset0[]
            ModulePermissionTypeRecordset1[]
            .
            .
            If include permissions is true.
            CustomGroupPermissionRecordset0[]
            CustomGroupPermissionRecordset1[]
            .
            ModuleGroupPermissionRecordset0[]
            ModuleGroupPermissionRecordset1[]
            .
            CustomUserPermissionRecordset0[]
            CustomUserPermissionRecordset1[]
            .
            ModuleUserPermissionRecordset0[]
            ModuleUserPermissionRecordset1[]
            .
            .
            If include module strings is true.
            StringRecordset0[]
            StringRecordset1[]
            .
            .
            </param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.ModuleDataProvider.UpdateModuleContent(Litium.Foundation.Carriers.ModuleCarrier,System.Data.SqlClient.SqlCommand)">
            <summary>
            Update the content of a new module.
            </summary>
            <param name="module">Module object as ModuleCarrier.</param>
            <param name="openCommand">Sql command object can not be null.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.ModuleDataProvider.PermissionTypeItemExists(Litium.Foundation.Carriers.PermissionTypeCarrier,Litium.Foundation.Carriers.PermissionTypeCarrier[])">
            <summary>
            Returns true if the item exist in the given array otherwise false.
            </summary>
            <param name="item">Item.</param>
            <param name="array">Array.</param>
            <returns>True if the item exist in the given array otherwise false.</returns>
        </member>
        <member name="T:Litium.Foundation.Data.MSSQL.SolutionDataProvider">
            <summary>
            Data provider tier functions for solution.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Data.ISolutionDataProvider">
            <summary>
            Data provider tier functions for solution.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.ISolutionDataProvider.GetSolution(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns the solution.
            </summary>
            <param name="includeGroups">Whether to include groups or not.</param>
            <param name="includeUsers">Whether to include users or not.</param>
            <param name="includeLanguages">Whether to include languages or not.</param>
            <param name="includeModules">Whether to include modules or not.</param>
            <param name="includePermissionTypes">Whether to include permissions types or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="includeSystemStrings">Whether to include system strings or not.</param>
            <returns>The solution.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.SolutionDataProvider.#ctor(Litium.Foundation.Data.MSSQL.DAL)">
            <summary>
            Constructor.
            </summary>
            <param name="dal">Data access layer.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.SolutionDataProvider.GetSolution(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns the solution.
            </summary>
            <param name="includeGroups">Whether to include groups or not.</param>
            <param name="includeUsers">Whether to include users or not.</param>
            <param name="includeLanguages">Whether to include languages or not.</param>
            <param name="includeModules">Whether to include modules or not.</param>
            <param name="includePermissionTypes">Whether to include permissions types or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="includeSystemStrings">Whether to include system strings or not.</param>
            <returns>The solution.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.SolutionDataProvider.GetSolution(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns the solution.
            </summary>
            <param name="includeGroups">Whether to include groups or not.</param>
            <param name="includeUsers">Whether to include users or not.</param>
            <param name="includeLanguages">Whether to include languages or not.</param>
            <param name="includeModules">Whether to include modules or not.</param>
            <param name="includePermissionTypes">Whether to include permissions types or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="includeSystemStrings">Whether to include system strings or not.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>The solution.</returns>
        </member>
        <member name="T:Litium.Foundation.Data.MSSQL.LanguageDataProvider">
            <summary>
            Data provider tier functions for languages.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Data.ILanguageDataProvider">
            <summary>
            Data provider tier functions for languages.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.ILanguageDataProvider.CreateLanguage(Litium.Foundation.Carriers.LanguageCarrier)">
            <summary>
            Creates a new language in the database.
            </summary>
            <param name="language">Language carrier.</param>
            <returns>The new language.</returns>
            <exception cref="T:Litium.Foundation.Languages.LanguageExistsException">Thrown when trying to create a language with a name that already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.ILanguageDataProvider.CreateLanguages(Litium.Foundation.Carriers.LanguageCarrier[])">
            <summary>
            Creates new languages in the database.
            </summary>
            <param name="languages">Language carriers.</param>
            <returns>The new languages.</returns>
            <exception cref="T:Litium.Foundation.Languages.LanguageExistsException">Thrown when trying to create a language with a name that already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.ILanguageDataProvider.DeleteAllLanguages">
            <summary>
            Deletes all languages in the solution (except the default language).
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.ILanguageDataProvider.DeleteLanguage(System.Guid)">
            <summary>
            Deletes a language.
            </summary>
            <param name="languageID">Language ID.</param>
            <exception cref="T:Litium.Foundation.Languages.LanguageDoesNotExistException">Thrown when a language does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.ILanguageDataProvider.ExistsLanguage(System.Guid)">
            <summary>
            Returns whether a language exists in the database.
            </summary>
            <param name="languageID">Language ID.</param>
            <returns>True if a language exists in the database, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.ILanguageDataProvider.GetDefaultLanguage">
            <summary>
            Returns the default language.
            </summary>
            <returns>The default language or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.ILanguageDataProvider.GetLanguage(System.Guid)">
            <summary>
            Returns a language.
            </summary>
            <param name="languageID">Language ID.</param>
            <returns>The requested language or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.ILanguageDataProvider.GetLanguageCount">
            <summary>
            Returns the language count in the solution.
            </summary>
            <returns>The requested language count.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.ILanguageDataProvider.GetLanguageFromName(System.String)">
            <summary>
            Returns a language given a language name.
            </summary>
            <param name="languageName">Language name.</param>
            <returns>The requested language or null if no such language exists.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.ILanguageDataProvider.GetLanguages">
            <summary>
            Returns all languages.
            </summary>
            <returns>An array of languages.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.ILanguageDataProvider.UpdateLanguage(Litium.Foundation.Carriers.LanguageCarrier)">
            <summary>
            Updates a language.
            </summary>
            <param name="language">Update info.</param>
            <exception cref="T:Litium.Foundation.Languages.LanguageDoesNotExistException">Thrown when a language does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.LanguageDataProvider.#ctor(Litium.Foundation.Data.MSSQL.DAL)">
            <summary>
            Constructor.
            </summary>
            <param name="dal">Data access layer.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.LanguageDataProvider.CreateLanguage(Litium.Foundation.Carriers.LanguageCarrier)">
            <summary>
            Creates a new language in the database.
            </summary>
            <param name="language">Language carrier.</param>
            <exception cref="T:Litium.Foundation.Languages.LanguageExistsException">Thrown when trying to create a language with a name that already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.LanguageDataProvider.CreateLanguages(Litium.Foundation.Carriers.LanguageCarrier[])">
            <summary>
            Creates new languages in the database.
            </summary>
            <param name="languages">Language carriers.</param>
            <returns>The new languages.</returns>
            <exception cref="T:Litium.Foundation.Languages.LanguageExistsException">Thrown when trying to create a language with a name that already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.LanguageDataProvider.DeleteAllLanguages">
            <summary>
            Deletes all languages in the solution (except the default language).
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.LanguageDataProvider.DeleteLanguage(System.Guid)">
            <summary>
            Deletes a language.
            </summary>
            <param name="languageID">Language ID.</param>
            <exception cref="T:Litium.Foundation.Languages.LanguageDoesNotExistException">Thrown when a language does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.LanguageDataProvider.ExistsLanguage(System.Guid)">
            <summary>
            Returns whether a language exists in the database.
            </summary>
            <param name="languageID">Language ID.</param>
            <returns>True if a language exists in the database, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.LanguageDataProvider.GetDefaultLanguage">
            <summary>
            Returns the default language.
            </summary>
            <returns>The default language or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.LanguageDataProvider.GetLanguage(System.Guid)">
            <summary>
            Returns a language.
            </summary>
            <param name="languageID">Language ID.</param>
            <returns>The requested language or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.LanguageDataProvider.GetLanguageCount">
            <summary>
            Returns the language count in the solution.
            </summary>
            <returns>The requested language count.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.LanguageDataProvider.GetLanguageFromName(System.String)">
            <summary>
            Returns a language given a language name.
            </summary>
            <param name="languageName">Language name.</param>
            <returns>The requested language or null if no such language exists.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.LanguageDataProvider.GetLanguages">
            <summary>
            Returns all languages.
            </summary>
            <returns>An array of languages.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.LanguageDataProvider.UpdateLanguage(Litium.Foundation.Carriers.LanguageCarrier)">
            <summary>
            Updates a language.
            </summary>
            <param name="language">Update info.</param>
            <exception cref="T:Litium.Foundation.Languages.LanguageDoesNotExistException">Thrown when a language does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.LanguageDataProvider.CreateLanguage(Litium.Foundation.Carriers.LanguageCarrier,System.Data.SqlClient.SqlCommand)">
            <summary>
            Creates a new language in the database.
            </summary>
            <param name="language">Language carrier.</param>
            <param name="openCommand">Commad object or null.</param>
            <exception cref="T:Litium.Foundation.Languages.LanguageExistsException">Thrown when trying to create a language with a name that already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.LanguageDataProvider.CreateLanguages(Litium.Foundation.Carriers.LanguageCarrier[],System.Data.SqlClient.SqlCommand)">
            <summary>
            Creates new languages in the database.
            </summary>
            <param name="languages">Language carriers.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Languages.LanguageExistsException">Thrown when trying to create a language with a name that already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.LanguageDataProvider.DeleteAllLanguages(System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes all languages in the solution (except the default language).
            </summary>
            <param name="openCommand">Sql command object or null.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.LanguageDataProvider.DeleteLanguage(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes a language.
            </summary>
            <param name="languageID">Language ID.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Languages.LanguageDoesNotExistException">Thrown when a language does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.LanguageDataProvider.ExistsLanguage(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns whether a language exists in the database.
            </summary>
            <param name="languageID">Language ID.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>True if a language exists in the database, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.LanguageDataProvider.GetDefaultLanguage(System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns the default language.
            </summary>
            <param name="openCommand">Sql command object or null.</param>
            <returns>The default language or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.LanguageDataProvider.GetLanguage(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns a language.
            </summary>
            <param name="languageID">Language ID.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>The requested language or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.LanguageDataProvider.GetLanguageCount(System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns the language count in the solution.
            </summary>
            <param name="openCommand">Sql command object or null.</param>
            <returns>The requested language count.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.LanguageDataProvider.GetLanguageFromName(System.String,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns a language given a language name.
            </summary>
            <param name="languageName">Language name.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>The requested language or null if no such language exists.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.LanguageDataProvider.GetLanguages(System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all languages into a solution.
            </summary>
            <param name="openCommand">Sql command object or null.</param>
            <returns>An array of languages.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.LanguageDataProvider.UpdateLanguage(Litium.Foundation.Carriers.LanguageCarrier,System.Data.SqlClient.SqlCommand)">
            <summary>
            Updates a language.
            </summary>
            <param name="language">Update info.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Languages.LanguageDoesNotExistException">Thrown when a language does not exist or has been deleted.</exception>
        </member>
        <member name="T:Litium.Foundation.Data.MSSQL.UserDataProvider">
            <summary>
            Data provider tier functions for Users.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Data.IUserDataProvider">
            <summary>
            Data provider tier functions for Users.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.IUserDataProvider.CreateUser(Litium.Foundation.Carriers.UserCarrier)">
            <summary>
            Creates a new User in the database.
            </summary>
            <param name="user">User carrier.</param>
            <exception cref="T:Litium.Foundation.Accounts.UserExistsException">Thrown when the user login name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IUserDataProvider.CreateUsers(Litium.Foundation.Carriers.UserCarrier[])">
            <summary>
            Creates users in the database.
            </summary>
            <param name="user">User carriers.</param>
            <exception cref="T:Litium.Foundation.Accounts.UserExistsException">Thrown when the user login name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IUserDataProvider.CreateGroupMembership(System.Guid,System.Guid)">
            <summary>
            Creates a membership to the specified group.
            </summary>
            <param name="userID">User ID.</param>
            <param name="groupID">Group ID.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.MembershipExistsException">Thrown when the membership already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IUserDataProvider.DeleteAllGroupMemberships(System.Guid)">
            <summary>
            Deletes all group memberships.
            </summary>
            <param name="userID">User ID.</param>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IUserDataProvider.DeleteAllUsers">
            <summary>
            Deletes all users in the solution (except the System and Anonymous user).
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.IUserDataProvider.DeleteGroupMembership(System.Guid,System.Guid)">
            <summary>
            Deletes the membership to the specified group.
            </summary>
            <param name="userID">User ID.</param>
            <param name="groupID">Group ID.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IUserDataProvider.DeleteUser(System.Guid)">
            <summary>
            Deletes a User.
            </summary>
            <param name="userID">User ID.</param>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IUserDataProvider.ExistsGroupMembership(System.Guid,System.Guid)">
            <summary>
            Returns whether a group membership exists.
            </summary>
            <param name="userID">User ID.</param>
            <param name="groupID">Group ID.</param>
            <returns>True if membership exists.</returns>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IUserDataProvider.ExistsUser(System.Guid)">
            <summary>
            Returns whether a user exists in the database.
            </summary>
            <param name="userID">User ID.</param>
            <returns>True if a user exists in the database, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IUserDataProvider.GetAllSessionsIDs">
            <summary>
            Returns all session ids saved with logged in users.
            </summary>
            <returns>A string array containing all the session ids.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IUserDataProvider.GetAllUsersAsDataSet">
            <summary>
            Returns all users.
            </summary>
            <returns>A data set with the users.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IUserDataProvider.GetAllUsersAsDataSet(System.Int32,System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns all users.
            </summary>
            <param name="pageSize">Page size.</param>
            <param name="requestedPage">The requested page.</param>
            <param name="sortColumn">Sort column.</param>
            <param name="sortAscending">Sort order.</param>
            <param name="centralAdministration">Central administration.</param>
            <returns>A data set with the users.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IUserDataProvider.GetAllUsersAsDataSet(System.Int32,System.Int32,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Returns all users.
            </summary>
            <param name="pageSize">Page size.</param>
            <param name="requestedPage">The requested page.</param>
            <param name="sortColumn">Sort column.</param>
            <param name="sortAscending">Sort order.</param>
            <param name="centralAdministration">Central administration.</param>        
            <param name="searchCriteria">Search text.</param>
            <returns>A data set with the users.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IUserDataProvider.GetAllUsersAsDataSet(System.Guid,System.Int32,System.Int32,System.String,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            Returns all users.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="pageSize">Page size.</param>
            <param name="requestedPage">The requested page.</param>
            <param name="sortColumn">Sort column.</param>
            <param name="sortAscending">Sort order.</param>
            <param name="centralAdministration">Central administration.</param>
            <param name="searchCriteria">Search text.</param>
            <param name="searchNameOnly">Whether to search in name data field only.</param>
            <returns>A data set with the users.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IUserDataProvider.GetDeletedUsers(System.DateTime)">
            <summary>
            Returns all deleted users from (and including) a specific date time.
            </summary>
            <param name="fromDate">From date time.</param>
            <returns>An array of deleted users.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IUserDataProvider.GetGroupMembershipIDs(System.Guid)">
            <summary>
            Returns the ID's of the groups in which the user is a member.
            </summary>
            <param name="userID">User ID.</param>
            <returns>Array of IDs.</returns>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IUserDataProvider.GetGroupMemberships(System.Guid,System.Boolean,System.Boolean)">
            <summary>
            Returns the groups in which the user is a member.
            </summary>
            <param name="userID">User ID.</param>
            <param name="includeMembers">Whether to include groups members or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>Array of Groups.</returns>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IUserDataProvider.GetLatestUpdate(System.Guid)">
            <summary>
            Returns the date time for the latest update.
            This value is always up to date (never cached).
            </summary>
            <param name="userID">User ID.</param>
            <returns>Returns the date time for the latest update.</returns>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IUserDataProvider.GetLoggedInUser(System.String)">
            <summary>
            Returns the logged in user for a specific session.
            </summary>
            <param name="sessionID">Session ID.</param>
            <returns>Returns the ID of the logged in user or Guid.Empty if there is no such session.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IUserDataProvider.GetNewUsers(System.DateTime,System.Boolean,System.Boolean)">
            <summary>
            Returns all new users in a solution from (and including) a specific from date time.
            </summary>
            <param name="fromDate">From date time.</param>
            <param name="includeGroups">Whether to include user groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>All new users.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IUserDataProvider.GetNewUsers(System.DateTime,System.Guid,System.Boolean,System.Boolean)">
            <summary>
            Returns all new users from (and including) a specific from date time belonging to a specific group.
            </summary>
            <param name="fromDate">From date time.</param>
            <param name="groupID">Group ID.</param>
            <param name="includeGroups">Whether to include user groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>All new users.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IUserDataProvider.GetSystemUser(System.Boolean,System.Boolean)">
            <summary>
            Returns the system user.
            </summary>
            <param name="includeGroups">Whether to include user groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>The system user.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IUserDataProvider.GetUpdatedUsers(System.DateTime,System.Boolean,System.Boolean)">
            <summary>
            Returns all updated users from a specific from date time.
            </summary>
            <param name="fromDate">From date time.</param>
            <param name="includeGroups">Whether to include user groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>All updated users.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IUserDataProvider.GetUpdatedUsers(System.DateTime,System.Guid,System.Boolean,System.Boolean)">
            <summary>
            Returns all updated users from a specific from date time belonging to a specific group.
            </summary>
            <param name="fromDate">From date time.</param>
            <param name="groupID">Group ID.</param>
            <param name="includeGroups">Whether to include user groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>All updated users.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IUserDataProvider.GetUser(System.Guid,System.Boolean,System.Boolean)">
            <summary>
            Returns a User.
            </summary>
            <param name="userID">User ID.</param>
            <param name="includeGroups">Whether to include user groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>The requested User or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IUserDataProvider.GetUserCount">
            <summary>
            Returns the user count in the solution.
            </summary>
            <returns>The requested user count.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IUserDataProvider.GetUsersFromEmail(System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns a User.
            </summary>
            <param name="email">User email.</param>
            <param name="includeGroups">Whether to include user groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>The requested User or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IUserDataProvider.GetUserFromLoginName(System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns a User.
            </summary>
            <param name="loginName">User login name.</param>
            <param name="includeGroups">Whether to include user groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>The requested User or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IUserDataProvider.GetUserFromPath(System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns a User, given the users path.
            </summary>
            <param name="path">User path.</param>
            <param name="includeGroups">Whether to include user groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>The requested User or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IUserDataProvider.GetUsers(System.Boolean,System.Boolean)">
            <summary>
            Returns all Users in a solution.
            </summary>
            <param name="includeGroups">Whether to include user groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>All users.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IUserDataProvider.GetUsers(System.Int16,System.Boolean,System.Boolean)">
            <summary>
            Returns all users of a specified account type.
            </summary>
            <param name="accountType">Account type, see AccountTypes.</param>
            <param name="includeGroups">Whether to include user groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>All users of a specified account type.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IUserDataProvider.GetUsers(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns all users, with/without central administration.
            </summary>
            <param name="centralAdministration">Only select groups with central administration = true/false.</param>
            <param name="includeGroups">Whether to include user groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>All users with/without central administration.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IUserDataProvider.GetUsers(System.Guid,System.Boolean,System.Boolean)">
            <summary>
            Returns all users belonging to a specific group.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="includeGroups">Whether to include user groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>All users belonging to a specific group.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IUserDataProvider.GetUsersWithSession(System.Boolean,System.Boolean)">
            <summary>
            Returns all users with a sessionid.
            </summary>
            <param name="includeGroups">Whether to include user groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>All users belonging to a specific group.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IUserDataProvider.IsUserLoggedIn(System.String)">
            <summary>
            Returns whether a user is currently logged in.
            </summary>
            <param name="loginName">Login name.</param>
            <returns>True if the user is currently logged in, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IUserDataProvider.IsUserLoggedIn(System.Guid)">
            <summary>
            Returns whether a user is currently logged in.
            </summary>
            <param name="userID">User ID.</param>
            <returns>True if the user is currently logged in, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.IUserDataProvider.LoginUser(System.Guid,System.String)">
            <summary>
            User login.
            </summary>
            <param name="userID">User ID.</param>
            <param name="sessionID">Session ID.</param>
        </member>
        <member name="M:Litium.Foundation.Data.IUserDataProvider.LogoutUser(System.Guid)">
            <summary>
            User logout.
            </summary>
            <param name="userID">User ID.</param>
        </member>
        <member name="M:Litium.Foundation.Data.IUserDataProvider.LogoutUsers(System.DateTime)">
            <summary>
            Logout all users where the last login date time is older than lastLoginDateTime.
            </summary>
            <param name="lastLoginDateTime">User sessions older than this value are cleared.</param>
        </member>
        <member name="M:Litium.Foundation.Data.IUserDataProvider.UpdateUser(Litium.Foundation.Carriers.UserCarrier)">
            <summary>
            Updates a user.
            </summary>
            <param name="user">Update info.</param>
            <exception cref="T:Litium.Foundation.Accounts.UserExistsException">Thrown when the user login name already exists.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.#ctor(Litium.Foundation.Data.MSSQL.DAL)">
            <summary>
            Constructor.
            </summary>
            <param name="dal">Data access layer.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.CreateUsers(Litium.Foundation.Carriers.UserCarrier[])">
            <summary>
            Creates users in the database.
            </summary>
            <param name="users">User carriers.</param>
            <exception cref="T:Litium.Foundation.Accounts.UserExistsException">Thrown when the user login name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.CreateUser(Litium.Foundation.Carriers.UserCarrier)">
            <summary>
            Creates a new User in the database.
            </summary>
            <param name="user">User carrier.</param>
            <exception cref="T:Litium.Foundation.Accounts.UserExistsException">Thrown when the user login name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.CreateGroupMembership(System.Guid,System.Guid)">
            <summary>
            Creates a membership to the specified group.
            </summary>
            <param name="userID">User ID.</param>
            <param name="groupID">Group ID.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.MembershipExistsException">Thrown when the membership already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.DeleteAllGroupMemberships(System.Guid)">
            <summary>
            Deletes all group memberships.
            </summary>
            <param name="userID">User ID.</param>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.DeleteAllUsers">
            <summary>
            Deletes all users in the solution (except the System and Anonymous user).
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.DeleteGroupMembership(System.Guid,System.Guid)">
            <summary>
            Deletes the membership to the specified group.
            </summary>
            <param name="userID">User ID.</param>
            <param name="groupID">Group ID.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.DeleteUser(System.Guid)">
            <summary>
            Deletes a User.
            </summary>
            <param name="userID">User ID.</param>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.ExistsGroupMembership(System.Guid,System.Guid)">
            <summary>
            Returns whether a group membership exists.
            </summary>
            <param name="userID">User ID.</param>
            <param name="groupID">Group ID.</param>
            <returns>True if membership exists.</returns>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.ExistsUser(System.Guid)">
            <summary>
            Returns whether a user exists in the database.
            </summary>
            <param name="userID">User ID.</param>
            <returns>True if a user exists in the database, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetAllSessionsIDs">
            <summary>
            Returns all session ids saved with logged in users.
            </summary>
            <returns>A string array containing all the session ids.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetAllUsersAsDataSet">
            <summary>
            Returns all users.
            </summary>
            <returns>A data set with the users.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetAllUsersAsDataSet(System.Int32,System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns all users.
            </summary>
            <param name="pageSize">Page size.</param>
            <param name="requestedPage">The requested page.</param>
            <param name="sortColumn">Sort column.</param>
            <param name="sortAscending">Sort order.</param>
            <param name="centralAdministration">Central administration.</param>
            <returns>A data set with the users.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetAllUsersAsDataSet(System.Int32,System.Int32,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Returns all users.
            </summary>
            <param name="pageSize">Page size.</param>
            <param name="requestedPage">The requested page.</param>
            <param name="sortColumn">Sort column.</param>
            <param name="sortAscending">Sort order.</param>
            <param name="centralAdministration">Central administration.</param>
            <param name="searchCriteria">Search text.</param>
            <returns>A data set with the users.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetAllUsersAsDataSet(System.Guid,System.Int32,System.Int32,System.String,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            Returns all users.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="pageSize">Page size.</param>
            <param name="requestedPage">The requested page.</param>
            <param name="sortColumn">Sort column.</param>
            <param name="sortAscending">Sort order.</param>
            <param name="centralAdministration">Central administration.</param>
            <param name="searchCriteria">Search text.</param>
            <param name="searchNameOnly">Whether to search in name data field only.</param>
            <returns>A data set with the users.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetDeletedUsers(System.DateTime)">
            <summary>
            Returns all deleted users from (and including) a specific date time.
            </summary>
            <param name="fromDate">From date time.</param>
            <returns>An array of deleted users.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetGroupMembershipIDs(System.Guid)">
            <summary>
            Returns the ID's of the groups in which the user is a member.
            </summary>
            <param name="userID">User ID.</param>
            <returns>Array of IDs.</returns>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetGroupMemberships(System.Guid,System.Boolean,System.Boolean)">
            <summary>
            Returns the groups in which the user is a member.
            </summary>
            <param name="userID">User ID.</param>
            <param name="includeMembers">Whether to include groups members or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>Array of Groups.</returns>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetLatestUpdate(System.Guid)">
            <summary>
            Returns the date time for the latest update.
            This value is always up to date (never cached).
            </summary>
            <param name="userID">User ID.</param>
            <returns>Returns the date time for the latest update.</returns>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetLoggedInUser(System.String)">
            <summary>
            Returns the logged in user for a specific session.
            </summary>
            <param name="sessionID">Session ID.</param>
            <returns>Returns the ID of the logged in user or Guid.Empty if there is no such session.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetNewUsers(System.DateTime,System.Boolean,System.Boolean)">
            <summary>
            Returns all new users in a solution from (and including) a specific from date time.
            </summary>
            <param name="fromDate">From date time.</param>
            <param name="includeGroups">Whether to include user groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>All new users.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetNewUsers(System.DateTime,System.Guid,System.Boolean,System.Boolean)">
            <summary>
            Returns all new users from (and including) a specific from date time belonging to a specific group.
            </summary>
            <param name="fromDate">From date time.</param>
            <param name="groupID">Group ID.</param>
            <param name="includeGroups">Whether to include user groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>All new users.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetSystemUser(System.Boolean,System.Boolean)">
            <summary>
            Returns the system user.
            </summary>
            <param name="includeGroups">Whether to include user groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>The system user.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetUpdatedUsers(System.DateTime,System.Boolean,System.Boolean)">
            <summary>
            Returns all updated users from (and including) a specific from date time.
            </summary>
            <param name="fromDate">From date time.</param>
            <param name="includeGroups">Whether to include user groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>All updated users.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetUpdatedUsers(System.DateTime,System.Guid,System.Boolean,System.Boolean)">
            <summary>
            Returns all updated users from (and including) a specific from date time belonging to a specific group.
            </summary>
            <param name="fromDate">From date time.</param>
            <param name="groupID">Group ID.</param>
            <param name="includeGroups">Whether to include user groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>All updated users.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetUser(System.Guid,System.Boolean,System.Boolean)">
            <summary>
            Returns a User.
            </summary>
            <param name="userID">User ID.</param>
            <param name="includeGroups">Whether to include user groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>The requested User or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetUserCount">
            <summary>
            Returns the user count in the solution.
            </summary>
            <returns>The requested user count.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetUsersFromEmail(System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns a User.
            </summary>
            <param name="email">User email.</param>
            <param name="includeGroups">Whether to include user groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>The requested User or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetUserFromLoginName(System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns a User.
            </summary>
            <param name="loginName">User login name.</param>
            <param name="includeGroups">Whether to include user groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>The requested User or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetUserFromPath(System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns a User, given the users path.
            </summary>
            <param name="path">User path.</param>
            <param name="includeGroups">Whether to include user groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>The requested User or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetUsers(System.Boolean,System.Boolean)">
            <summary>
            Returns all Users in a solution.
            </summary>
            <param name="includeGroups">Whether to include user groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>All users.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetUsers(System.Int16,System.Boolean,System.Boolean)">
            <summary>
            Returns all users of a specified account type.
            </summary>
            <param name="accountType">Account type, see AccountTypes.</param>
            <param name="includeGroups">Whether to include user groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>All users of a specified account type.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetUsers(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns all users, with/without central administration.
            </summary>
            <param name="centralAdministration">Only select groups with central administration = true/false.</param>
            <param name="includeGroups">Whether to include user groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>All users with/without central administration.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetUsers(System.Guid,System.Boolean,System.Boolean)">
            <summary>
            Returns all users belonging to a specific group.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="includeGroups">Whether to include user groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>All users belonging to a specific group.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetUsersWithSession(System.Boolean,System.Boolean)">
            <summary>
            Returns all users with a sessionid.
            </summary>
            <param name="includeGroups">Whether to include user groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>All users belonging to a specific group.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.IsUserLoggedIn(System.String)">
            <summary>
            Returns whether a user is currently logged in.
            </summary>
            <param name="loginName">Login name.</param>
            <returns>True if the user is currently logged in, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.IsUserLoggedIn(System.Guid)">
            <summary>
            Returns whether a user is currently logged in.
            </summary>
            <param name="userID">User ID.</param>
            <returns>True if the user is currently logged in, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.LoginUser(System.Guid,System.String)">
            <summary>
            User login.
            </summary>
            <param name="userID">User ID.</param>
            <param name="sessionID">Session ID.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.LogoutUser(System.Guid)">
            <summary>
            User logout.
            </summary>
            <param name="userID">User ID.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.LogoutUsers(System.DateTime)">
            <summary>
            Logout all users where the last login date time is older than lastLoginDateTime.
            </summary>
            <param name="lastLoginDateTime">User sessions older than this value are cleared.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.UpdateUser(Litium.Foundation.Carriers.UserCarrier)">
            <summary>
            Updates a user.
            </summary>
            <param name="user">Update info.</param>
            <exception cref="T:Litium.Foundation.Accounts.UserExistsException">Thrown when the user login name already exists.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.CreateGroupMembership(System.Guid,System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Creates a membership to the specified group.
            </summary>
            <param name="userID">User ID.</param>
            <param name="groupID">Group ID.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.MembershipExistsException">Thrown when the membership already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.CreateUser(Litium.Foundation.Carriers.UserCarrier,System.Data.SqlClient.SqlCommand)">
            <summary>
            Creates a new User in the database.
            </summary>
            <param name="user">User carrier.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Accounts.UserExistsException">Thrown when the user login name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.CreateUsers(Litium.Foundation.Carriers.UserCarrier[],System.Data.SqlClient.SqlCommand)">
            <summary>
            Creates users in the database.
            </summary>
            <param name="users">User carriers.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Accounts.UserExistsException">Thrown when the user login name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.DeleteAllGroupMemberships(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes all group memberships
            </summary>
            <param name="userID">User ID.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.DeleteAllUsers(System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes all users in the solution (except the System and Anonymous user).
            </summary>
            <param name="openCommand">Sql command object or null.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.DeleteGroupMembership(System.Guid,System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes the membership to the specified group.
            </summary>
            <param name="userID">User ID.</param>
            <param name="groupID">Group ID.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.DeleteUser(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Deletes a User.
            </summary>
            <param name="userID">User ID.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.ExistsGroupMembership(System.Guid,System.Guid[])">
            <summary>
            Returns true if the given group id exists in the given group-membership id array otherwise false.
            </summary>
            <param name="groupID">Member id.</param>
            <param name="groupIDs">Array with group ids.</param>
            <returns>True if the given group id exists in the given group-membership id array otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.ExistsGroupMembership(System.Guid,System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns whether a group membership exists.
            </summary>
            <param name="userID">User ID.</param>
            <param name="groupID">Group ID.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>True if membership exists.</returns>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.ExistsUser(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns whether a user exists in the database.
            </summary>
            <param name="userID">User ID.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>True if a user exists in the database, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetAllSessionsIDs(System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all session ids saved with logged in users.
            </summary>
            <param name="openCommand">Sql command object or null.</param>
            <returns>A string array containing all the session ids.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetAllUsersAsDataSet(System.Guid,System.Int32,System.Int32,System.String,System.Boolean,System.Boolean,System.String,System.Boolean,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all users.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="pageSize">Page size.</param>
            <param name="requestedPage">The requested page.</param>
            <param name="sortColumn">Sort column.</param>
            <param name="sortAscending">Sort order.</param>
            <param name="centralAdministration">if set to <c>true</c> [central administration].</param>
            <param name="searchCriteria">Search text.</param>
            <param name="searchNameOnly">Whether to search in name data field only.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>A data set with the users.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetDeletedUsers(System.DateTime,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all deleted users from (and including) a specific date time.
            </summary>
            <param name="fromDate">From date time.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>An array of deleted users.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetGroupMembershipIDs(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns the ID's of the groups in which the user is a member.
            </summary>
            <param name="userID">User ID.</param>
            <returns>Array of IDs.</returns>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetGroupMemberships(System.Guid,System.Boolean,System.Boolean,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns the groups in which the user is a member.
            </summary>
            <param name="userID">User ID.</param>
            <param name="includeMembers">Whether to include groups members or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>Array of Groups.</returns>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
            <remarks>
            SP_GET_GROUP_MEMBERSHIPS returns recordsets in following format and order:
            GroupRecordset0[]
            GroupRecordset1[]
            .
            .
            If include permissions is true.
            CustomPermissionRecordset0[]
            CustomPermissionRecordset1[]
            .
            ModulePermissionRecordset0[]
            ModulePermissionRecordset1[]
            .
            SolutionPermissionRecordset0[]
            SolutionPermissionRecordset1[]
            .
            .
            If include members is true.
            MemberRecordset0[]
            MemberRecordset1[]
            .
            .
            </remarks>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetLatestUpdate(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns the date time for the latest update.
            This value is always up to date (never cached).
            </summary>
            <param name="userID">User ID.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>Returns the date time for the latest update.</returns>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetLoggedInUser(System.String,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns the logged in user for a specific session.
            </summary>
            <param name="sessionID">Session ID.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>Returns the ID of the logged in user or Guid.Empty if there is no such session.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetNewUsers(System.DateTime,System.Boolean,System.Boolean,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all new users in a solution from (and including) a specific from date time.
            </summary>
            <param name="fromDate">From date time.</param>
            <param name="includeGroups">Whether to include user groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>All new users.</returns>
            <remarks>
            SP_GET_NEW_USERS returns recordsets in following format and order:
            UserRecordset0[]
            UserRecordset1[]
            .
            .
            If include permissions is true.
            CustomPermissionRecordset0[]
            CustomPermissionRecordset1[]
            .
            ModulePermissionRecordset0[]
            ModulePermissionRecordset1[]
            .
            SolutionPermissionRecordset0[]
            SolutionPermissionRecordset1[]
            .
            .
            If include user groups is true.
            GroupRecordset0[]
            GroupRecordset1[]
            .
            .
            </remarks>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetNewUsers(System.DateTime,System.Guid,System.Boolean,System.Boolean,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all new users from (and including) a specific from date time belonging to a specific group.
            </summary>
            <param name="fromDate">From date time.</param>
            <param name="groupID">Group ID.</param>
            <param name="includeGroups">Whether to include user groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>All new users.</returns>
            <remarks>
            SP_GET_NEW_USERS_OF_GROUP returns recordsets in following format and order:
            UserRecordset0[]
            UserRecordset1[]
            .
            .
            If include permissions is true.
            CustomPermissionRecordset0[]
            CustomPermissionRecordset1[]
            .
            ModulePermissionRecordset0[]
            ModulePermissionRecordset1[]
            .
            SolutionPermissionRecordset0[]
            SolutionPermissionRecordset1[]
            .
            .
            If include user groups is true.
            GroupRecordset0[]
            GroupRecordset1[]
            .
            .
            </remarks>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetUpdatedUsers(System.DateTime,System.Boolean,System.Boolean,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all updated users from (and including) a specific from date time.
            </summary>
            <param name="fromDate">From date time.</param>
            <param name="includeGroups">Whether to include user groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>All updated users.</returns>
            <remarks>
            SP_GET_UPDATED_USERS returns recordsets in following format and order:
            UserRecordset0[]
            UserRecordset1[]
            .
            .
            If include permissions is true.
            CustomPermissionRecordset0[]
            CustomPermissionRecordset1[]
            .
            ModulePermissionRecordset0[]
            ModulePermissionRecordset1[]
            .
            SolutionPermissionRecordset0[]
            SolutionPermissionRecordset1[]
            .
            .
            If include user groups is true.
            GroupRecordset0[]
            GroupRecordset1[]
            .
            .
            </remarks>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetUpdatedUsers(System.DateTime,System.Guid,System.Boolean,System.Boolean,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all updated users from (and including) a specific from date time belonging to a specific group.
            </summary>
            <param name="fromDate">From date time.</param>
            <param name="groupID">Group ID.</param>
            <param name="includeGroups">Whether to include user groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>All updated users.</returns>
            <remarks>
            SP_GET_UPDATED_USERS_OF_GROUP returns recordsets in following format and order:
            UserRecordset0[]
            UserRecordset1[]
            .
            .
            If include permissions is true.
            CustomPermissionRecordset0[]
            CustomPermissionRecordset1[]
            .
            ModulePermissionRecordset0[]
            ModulePermissionRecordset1[]
            .
            SolutionPermissionRecordset0[]
            SolutionPermissionRecordset1[]
            .
            .
            If include user groups is true.
            GroupRecordset0[]
            GroupRecordset1[]
            .
            .
            </remarks>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetUser(System.Guid,System.Boolean,System.Boolean,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns a User.
            </summary>
            <param name="userID">User ID.</param>
            <param name="includeGroups">Whether to include user groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="openCommand">The open command.</param>
            <returns>
            The requested User or null if none was found.
            </returns>
            <remarks>
            SP_GET_USER returns recordsets in following format and order:
            UserRecordset[]
            If include permissions is true.
            CustomPermissionRecordset0[]
            CustomPermissionRecordset1[]
            .
            ModulePermissionRecordset0[]
            ModulePermissionRecordset1[]
            .
            SolutionPermissionRecordset0[]
            SolutionPermissionRecordset1[]
            .
            .
            If include user groups is true.
            GroupRecordset0[]
            GroupRecordset1[]
            .
            .
            </remarks>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetUserCount(System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns the user count in the solution.
            </summary>
            <param name="openCommand">Sql command object or null.</param>
            <returns>The requested user count.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetUsersFromEmail(System.String,System.Boolean,System.Boolean,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns a User.
            </summary>
            <param name="email">User email.</param>
            <param name="includeGroups">Whether to include user groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="openCommand">The open command.</param>
            <returns>
            The requested User or null if none was found.
            </returns>
            <remarks>
            SP_GET_USER_FROM_EMAIL returns recordsets in following format and order:
            UserRecordset[]
            If include permissions is true
            CustomPermissionRecordset0[]
            CustomPermissionRecordset1[]
            .
            ModulePermissionRecordset0[]
            ModulePermissionRecordset1[]
            .
            SolutionPermissionRecordset0[]
            SolutionPermissionRecordset1[]
            .
            .
            If include user groups is true
            GroupRecordset0[]
            GroupRecordset1[]
            .
            .
            </remarks>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetUserFromLoginName(System.String,System.Boolean,System.Boolean,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns a User.
            </summary>
            <param name="loginName">User login name.</param>
            <param name="includeGroups">Whether to include user groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="openCommand">The open command.</param>
            <returns>
            The requested User or null if none was found.
            </returns>
            <remarks>
            SP_GET_USER_FROM_LOGIN_NAME returns recordsets in following format and order:
            UserRecordset[]
            If include permissions is true
            CustomPermissionRecordset0[]
            CustomPermissionRecordset1[]
            .
            ModulePermissionRecordset0[]
            ModulePermissionRecordset1[]
            .
            SolutionPermissionRecordset0[]
            SolutionPermissionRecordset1[]
            .
            .
            If include user groups is true
            GroupRecordset0[]
            GroupRecordset1[]
            .
            .
            </remarks>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetUserFromPath(System.String,System.Boolean,System.Boolean,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns a User, given the users path.
            </summary>
            <param name="path">User path.</param>
            <param name="includeGroups">Whether to include user groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>The requested User or null if none was found.</returns>
            <remarks>
            SP_GET_USER_FROM_PATH returns recordsets in following format and order:
            UserRecordset[]
            If include permissions is true
            CustomPermissionRecordset0[]
            CustomPermissionRecordset1[]
            .
            ModulePermissionRecordset0[]
            ModulePermissionRecordset1[]
            .
            SolutionPermissionRecordset0[]
            SolutionPermissionRecordset1[]
            .
            .
            If include user groups is true
            GroupRecordset0[]
            GroupRecordset1[]
            .
            .
            </remarks>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetUsers(System.Boolean,System.Boolean,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all Users in a solution.
            </summary>
            <param name="includeGroups">Whether to include user groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="openCommand">Command object or null.</param>
            <returns>All users.</returns>
            <remarks>
            SP_GET_USERS returns recordsets in following format and order:
            UserRecordset0[]
            UserRecordset1[]
            .
            .
            If include permissions is true.
            CustomPermissionRecordset0[]
            CustomPermissionRecordset1[]
            .
            ModulePermissionRecordset0[]
            ModulePermissionRecordset1[]
            .
            SolutionPermissionRecordset0[]
            SolutionPermissionRecordset1[]
            .
            .
            If include user groups is true.
            GroupRecordset0[]
            GroupRecordset1[]
            .
            .
            </remarks>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetUsers(System.Int16,System.Boolean,System.Boolean,System.Data.SqlClient.SqlCommand)">
            <summary>
            Gets the users.
            </summary>
            <param name="accountType">Type of the account.</param>
            <param name="includeGroups">if set to <c>true</c> [include groups].</param>
            <param name="includePermissions">if set to <c>true</c> [include permissions].</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>All users of a specified account type.</returns>
            <remarks>
            SP_GET_USERS_FROM_TYPE returns recordsets in following format and order:
            UserRecordset0[]
            UserRecordset1[]
            .
            .
            If include permissions is true.
            CustomPermissionRecordset0[]
            CustomPermissionRecordset1[]
            .
            ModulePermissionRecordset0[]
            ModulePermissionRecordset1[]
            .
            SolutionPermissionRecordset0[]
            SolutionPermissionRecordset1[]
            .
            .
            If include user groups is true.
            GroupRecordset0[]
            GroupRecordset1[]
            .
            .
            </remarks>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetUsers(System.Boolean,System.Boolean,System.Boolean,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all users, with/without central administration.
            </summary>
            <param name="centralAdministration">Only select groups with central administration = true/false.</param>
            <param name="includeGroups">Whether to include user groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>All users with/without central administration.</returns>
            <remarks>
            SP_GET_USERS_FROM_CENTRAL_ADMINISTRATION returns recordsets in following format and order:
            UserRecordset0[]
            UserRecordset1[]
            .
            .
            
            If include permissions is true.
            CustomPermissionRecordset0[]
            CustomPermissionRecordset1[]
            .
            ModulePermissionRecordset0[]
            ModulePermissionRecordset1[]
            .
            SolutionPermissionRecordset0[]
            SolutionPermissionRecordset1[]
            .
            .
            If include user groups is true.
            GroupRecordset0[]
            GroupRecordset1[]
            .
            .
            </remarks>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetUsers(System.Guid,System.Boolean,System.Boolean,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all users belonging to a specific group.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="includeGroups">Whether to include user groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>All users belonging to a specific group.</returns>
            <remarks>
            SP_GET_USERS_OF_GROUP returns recordsets in following format and order:
            UserRecordset0[]
            UserRecordset1[]
            .
            .
            If include permissions is true.
            CustomPermissionRecordset0[]
            CustomPermissionRecordset1[]
            .
            ModulePermissionRecordset0[]
            ModulePermissionRecordset1[]
            .
            SolutionPermissionRecordset0[]
            SolutionPermissionRecordset1[]
            .
            .
            If include user groups is true.
            GroupRecordset0[]
            GroupRecordset1[]
            .
            .
            </remarks>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetUsersWithSession(System.Boolean,System.Boolean,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns all users belonging to a specific group.
            </summary>
            <param name="includeGroups">Whether to include user groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>All users belonging to a specific group.</returns>
            <remarks>
            SP_GET_USERS_OF_GROUP returns recordsets in following format and order:
            UserRecordset0[]
            UserRecordset1[]
            .
            .
            If include permissions is true.
            CustomPermissionRecordset0[]
            CustomPermissionRecordset1[]
            .
            ModulePermissionRecordset0[]
            ModulePermissionRecordset1[]
            .
            SolutionPermissionRecordset0[]
            SolutionPermissionRecordset1[]
            .
            .
            If include user groups is true.
            GroupRecordset0[]
            GroupRecordset1[]
            .
            .
            </remarks>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetUsersFromReader(System.Boolean,System.Boolean,System.Data.SqlClient.SqlDataReader)">
            <summary>
            Returns users from a reader.
            </summary>
            <param name="includeGroups">Whether to include groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="reader">Sql data reader containing recordsets in following format and order:
            UserRecordset0[]
            UserRecordset1[]
            .
            .
            If include permissions is true.
            CustomPermissionRecordset0[]
            CustomPermissionRecordset1[]
            .
            ModulePermissionRecordset0[]
            ModulePermissionRecordset1[]
            .
            SolutionPermissionRecordset0[]
            SolutionPermissionRecordset1[]
            .
            .
            If include members is true.
            GroupRecordset0[]
            GroupRecordset1[]
            .
            .
            </param>
            <returns>Users from a reader or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.IsUserLoggedIn(System.String,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns whether a user is currently logged in.
            </summary>
            <param name="loginName">Login name.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>True if the user is currently logged in, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.IsUserLoggedIn(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns whether a user is currently logged in.
            </summary>
            <param name="userID">User ID.</param>
            <param name="openCommand">Sql command object or null.</param>
            <returns>True if the user is currently logged in, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.LoginUser(System.Guid,System.String,System.Data.SqlClient.SqlCommand)">
            <summary>
            User login.
            </summary>
            <param name="userID">User ID.</param>
            <param name="sessionID">Session ID.</param>
            <param name="openCommand">Sql command object or null.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.LogoutUser(System.Guid,System.Data.SqlClient.SqlCommand)">
            <summary>
            User logout.
            </summary>
            <param name="userID">User ID.</param>
            <param name="openCommand">Sql command object or null.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.LogoutUsers(System.DateTime,System.Data.SqlClient.SqlCommand)">
            <summary>
            Logout all users where the last login date time is older than lastLoginDateTime.
            </summary>
            <param name="lastLoginDateTime">User sessions older than this value are cleared.</param>
            <param name="openCommand">Sql command object or null.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.UpdateUser(Litium.Foundation.Carriers.UserCarrier,System.Data.SqlClient.SqlCommand)">
            <summary>
            Updates a user.
            </summary>
            <param name="user">Update info.</param>
            <param name="openCommand">Sql command object or null.</param>
            <exception cref="T:Litium.Foundation.Accounts.UserExistsException">Thrown when the user login name already exists.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.CreateUserContent(Litium.Foundation.Carriers.UserCarrier,System.Data.SqlClient.SqlCommand)">
            <summary>
            Creates the content of the user.
            </summary>
            <param name="user">Group object as UserCarrier.</param>
            <param name="openCommand">The open command.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetUserFromReader(System.Boolean,System.Boolean,System.Data.SqlClient.SqlDataReader)">
            <summary>
            Returns a user from a reader.
            </summary>
            <param name="includeGroups">Whether to include groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="reader">Sql data reader containing recordsets in following format and order:
            UserRecordset[]
            If include permissions is true.
            CustomPermissionRecordset0[]
            CustomPermissionRecordset1[]
            .
            ModulePermissionRecordset0[]
            ModulePermissionRecordset1[]
            .
            SolutionPermissionRecordset0[]
            SolutionPermissionRecordset1[]
            .
            .
            If include members is true.
            GroupRecordset0[]
            GroupRecordset1[]
            .
            .
            </param>
            <returns>The requested user from a reader or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetUserContent(Litium.Foundation.Carriers.UserCarrier,System.Boolean,System.Boolean,System.Data.SqlClient.SqlDataReader)">
            <summary>
            Reads the content of the user and sets the corresponding user property. 
            </summary>
            <param name="user">User object as UserCarrier.</param>
            <param name="includeGroups">Whether to include groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="reader">Sql data reader containing recordsets in following format and order:
            If include permissions is true.
            CustomPermissionRecordset0[]
            CustomPermissionRecordset1[]
            .
            ModulePermissionRecordset0[]
            ModulePermissionRecordset1[]
            .
            SolutionPermissionRecordset0[]
            SolutionPermissionRecordset1[]
            .
            .
            If include members is true.
            GroupRecordset0[]
            GroupRecordset1[]
            .
            .
            </param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetUsersContent(System.Collections.Generic.List{Litium.Foundation.Carriers.UserCarrier},System.Boolean,System.Boolean,System.Data.SqlClient.SqlDataReader)">
            <summary>
            Reads the content of the users and sets the corresponding user property from a reader.
            </summary>
            <param name="users">ArrayList containing users as UserCarrier.</param>
            <param name="includeGroups">Whether to include groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="reader">Sql data reader containing recordsets in following format and order:
            If include permissions is true.
            CustomPermissionRecordset0[]
            CustomPermissionRecordset1[]
            .
            ModulePermissionRecordset0[]
            ModulePermissionRecordset1[]
            .
            SolutionPermissionRecordset0[]
            SolutionPermissionRecordset1[]
            .
            .
            If include members is true.
            GroupRecordset0[]
            GroupRecordset1[]
            .
            .
            </param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.UpdateUserContent(Litium.Foundation.Carriers.UserCarrier,System.Data.SqlClient.SqlCommand)">
            <summary>
            Updates the content of the user.
            </summary>
            <param name="user">Group object as UserCarrier.</param>
            <param name="openCommand">The open command.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.AddMembership(System.Collections.Hashtable,System.Guid,System.Guid[])">
            <summary>
            Adds a membership to an hashtable with the given key.
            </summary>
            <param name="hashtable">Hashtable.</param>
            <param name="key">Key.</param>
            <param name="membership">Guid array containing membership [GroupID,UserID].</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.UserDataProvider.GetUserMembershipIDs(System.Guid,System.Collections.Hashtable)">
            <summary>
            Returns the group ids that the user is member of.
            </summary>
            <param name="userID">User id.</param>
            <param name="hashtable">Hashtable containing the memberships.</param>
            <returns>The group ids that the user is member of.</returns>
        </member>
        <member name="T:Litium.Foundation.Data.MSSQL.Utilities.MSSQLUtilities">
            <summary>
            Utility functions for database driver.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.Utilities.MSSQLUtilities.CommitTransaction(System.Data.SqlClient.SqlTransaction)">
            <summary>
            Commit transaction in specified command if a transaction exists.
            </summary>
            <param name="transaction">Transaction to commit.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.Utilities.MSSQLUtilities.OpenCommand(System.Data.SqlClient.SqlCommand)">
            <summary>
            Creates a sql command with a sql connection to the database.
            </summary>
            <param name="sqlCommand">An open sql command or null.</param>
            <returns>An open sql command.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.Utilities.MSSQLUtilities.OpenCommand(System.Data.SqlClient.SqlCommand,System.String)">
            <summary>
            Creates a sql command with a sql connection to the database, sets the Timeout for the command depending of the config.
            </summary>
            <param name="sqlCommand">An open sql command or null.</param>
            <param name="storeProcedure">Store procedure.</param>
            <returns>An open sql command.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.Utilities.MSSQLUtilities.OpenCommand(System.Data.SqlClient.SqlCommand,System.Data.CommandType,System.String)">
            <summary>
            Creates a sql command with a sql connection to the database, sets the Timeout for the command depending of the config.
            </summary>
            <param name="sqlCommand">An open sql command or null.</param>
            <param name="commandType">Command type.</param>
            <param name="commandText">Command text.</param>
            <returns>An open sql command.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.Utilities.MSSQLUtilities.OpenConnection(System.Data.SqlClient.SqlConnection)">
            <summary>
            Creates a sql connection to the database.
            </summary>
            <param name="openConnection">An open sql connection or null.</param>
            <returns>An open sql connection.</returns>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.Utilities.MSSQLUtilities.RollbackTransaction(System.Data.SqlClient.SqlTransaction)">
            <summary>
            Roll back transaction in specified commande if a transaction exists.
            </summary>
            <param name="transaction">Transaction to rollback.</param>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.Utilities.MSSQLUtilities.RollbackTransaction(System.Data.SqlClient.SqlTransaction,System.Boolean)">
            <summary>
            Roll back transaction in specified commande if a transaction exists.
            </summary>
            <param name="transaction">Transaction to rollback.</param>
            <param name="raiseException">If true may raise a <see cref="T:Litium.Foundation.Data.DALException"/> if rollback fails.</param>
            <remarks>A log entry is created irrespective of a exception is raised or not, if rollback fails.</remarks>
            <exception cref="T:Litium.Foundation.Data.DALException">Raised if <paramref name="raiseException"/> is true and rollback operation fails.</exception>
        </member>
        <member name="T:Litium.Foundation.Events.EventDispatcher">
            <summary>
            The EventDispatcher raises Foundation events or dispatches events to the target module.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Events.EventDispatcher.Init">
            <summary>
            Inits the event manager by setting the last event ID.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Events.EventDispatcher.ReadLastEventIDFromDisc">
            <summary>
            Reads the last event ID from disc.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Events.EventDispatcher.WriteLastEventIDToDisc(System.Int64)">
            <summary>
            Writes the last event ID to disc.
            </summary>
            <param name="eventID">The event ID.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Events.EventDispatcher.RaiseEvents(Litium.Foundation.Carriers.Events.EventCarrier[])">
            <summary>
            Raise event.
            </summary>
            <param name="events">An array of event carriers.</param>
        </member>
        <member name="P:Litium.Foundation.Events.EventDispatcher.LastEventID">
            <summary>
            Last event ID.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Languages.Spelling.SpellingDictionary">
            <summary>
            Spelling dictionary
            </summary>
        </member>
        <member name="M:Litium.Foundation.Languages.Spelling.SpellingDictionary.#ctor(Litium.Foundation.Languages.Spelling.SpellingBaseDictionary,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Languages.Spelling.SpellingDictionary"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="token">The token.</param>
        </member>
        <member name="M:Litium.Foundation.Languages.Spelling.SpellingDictionary.Add(System.String)">
            <summary>
            Adds the specified word.
            </summary>
            <param name="word">The word.</param>
        </member>
        <member name="M:Litium.Foundation.Languages.Spelling.SpellingDictionary.Remove(System.String)">
            <summary>
            Removes the specified word.
            </summary>
            <param name="word">The word.</param>
        </member>
        <member name="M:Litium.Foundation.Languages.Spelling.SpellingDictionary.Update(Litium.Foundation.Carriers.SpellingDictionaryCarrier)">
            <summary>
            Updates the specified dictionary carrier.
            </summary>
            <param name="dictionaryCarrier">The dictionary carrier.</param>
        </member>
        <member name="M:Litium.Foundation.Languages.Spelling.SpellingDictionary.SaveDictionary">
            <summary>
            Saves the dictionary.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Languages.Spelling.SpellingDictionary.BaseWords">
            <summary>
            Gets the base words.
            </summary>
            <value>The base words.</value>
        </member>
        <member name="P:Litium.Foundation.Languages.Spelling.SpellingDictionary.PhoneticRules">
            <summary>
            Gets the phonetic rules.
            </summary>
            <value>The phonetic rules.</value>
        </member>
        <member name="P:Litium.Foundation.Languages.Spelling.SpellingDictionary.PrefixRules">
            <summary>
            Gets the prefix rules.
            </summary>
            <value>The prefix rules.</value>
        </member>
        <member name="P:Litium.Foundation.Languages.Spelling.SpellingDictionary.ReplaceCharacters">
            <summary>
            Gets the replace characters.
            </summary>
            <value>The replace characters.</value>
        </member>
        <member name="P:Litium.Foundation.Languages.Spelling.SpellingDictionary.SuffixRules">
            <summary>
            Gets the suffix rules.
            </summary>
            <value>The suffix rules.</value>
        </member>
        <member name="P:Litium.Foundation.Languages.Spelling.SpellingDictionary.TryCharacters">
            <summary>
            Gets the try characters.
            </summary>
            <value>The try characters.</value>
        </member>
        <member name="P:Litium.Foundation.Languages.Spelling.SpellingDictionary.UserWords">
            <summary>
            Gets the user words.
            </summary>
            <value>The user words.</value>
        </member>
        <member name="T:Litium.Foundation.Log.Log4NetAppender">
            <summary>
            Log4Net ADO appender.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Log.Log4NetAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            Insert the event into the database.
            </summary>
            <param name="loogingEvent">The event to insert into the database.</param>
        </member>
        <member name="T:Litium.Foundation.Log.LogLevels">
            <summary>
            Log levels. 
            </summary>
        </member>
        <member name="F:Litium.Foundation.Log.LogLevels.DEBUG">
            <summary>
            Debug.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Log.LogLevels.INFO">
            <summary>
            Info.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Log.LogLevels.WARN">
            <summary>
            Warn.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Log.LogLevels.MINOR_ERROR">
            <summary>
            Minor. Same as Error in log4net
            </summary>
        </member>
        <member name="F:Litium.Foundation.Log.LogLevels.ERROR">
            <summary>
            Error.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Log.LogLevels.MAJOR_ERROR">
            <summary>
            Major. Same as Fatal in log4net
            </summary>
        </member>
        <member name="F:Litium.Foundation.Log.LogLevels.FATAL">
            <summary>
            Fatal.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Modules.ModuleExistsException">
            <summary>
            Thrown when trying to create a module with a class name or module id that already exists.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Modules.ModuleExistsException.m_moduleID">
            <summary>
            Module ID
            </summary>
        </member>
        <member name="M:Litium.Foundation.Modules.ModuleExistsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Modules.ModuleExistsException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Modules.ModuleExistsException.#ctor(System.Guid)">
            <summary>
            Constructor
            </summary>
            <param name="moduleID">Module ID.</param>
        </member>
        <member name="M:Litium.Foundation.Modules.ModuleExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Modules.ModuleExistsException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Litium.Foundation.Modules.ModuleExistsException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="P:Litium.Foundation.Modules.ModuleExistsException.ModuleID">
            <summary>
            Module ID.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Search.Constants.SearchDomains">
            <summary>
            String constants that are used for indentifying query and index configurations.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Search.Constants.SearchDomains.ProductCatalogModule">
            <summary>
            Product Catalog query identifier.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Search.Constants.SearchDomains.ProductsAndProductGroups">
            <summary>
            Public site product query identifier.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Search.Constants.SearchDomains.ArticleGroups">
            <summary>
            ArticleGroup query and index identifier.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Search.Constants.SearchDomains.Articles">
            <summary>
            Article query and index identifier.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Search.Constants.SearchDomains.Assortments">
            <summary>
            Assortment query and index identifier.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Search.Constants.SearchDomains.ProductGroups">
            <summary>
            ProductGroup query and index identifier.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Search.Constants.SearchDomains.Products">
            <summary>
            Product query and index identifier.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Search.Constants.SearchDomains.VariantGroups">
            <summary>
            VariantGroup query and index identifier.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Search.Constants.SearchDomains.ArticleVariantGroups">
            <summary>
            ArticleGrid query and index identifier.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Search.Constants.SearchDomains.CmsModule">
            <summary>
            CMS query identifier.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Search.Constants.SearchDomains.Pages">
            <summary>
            Page query and index identifier.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Search.Constants.SearchDomains.PageContents">
            <summary>
            Page content query and index identifier.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Search.Constants.SearchDomains.WorkingCopies">
            <summary>
            WorkingCopy query and index identifier.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Search.Constants.SearchDomains.MediaArchiveModule">
            <summary>
            MediaArchive query identifier.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Search.Constants.SearchDomains.Files">
            <summary>
            File query and index identifier.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Search.Constants.SearchDomains.Folders">
            <summary>
            Folder query and index identifier.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Search.Constants.SearchDomains.RelationsModule">
            <summary>
            Relations query identifier.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Search.Constants.SearchDomains.Persons">
            <summary>
            Person query and index identifier.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Search.Constants.SearchDomains.Groups">
            <summary>
            Group query and index identifier.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Search.Constants.SearchDomains.Organizations">
            <summary>
            Organization query and index identifier.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Search.Constants.SearchDomains.ECommerceModule">
            <summary>
            ECommerce query identifier.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Search.Constants.SearchDomains.Orders">
            <summary>
            Order query and index identifier.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Search.Constants.SearchDomains.NewsletterModule">
            <summary>
            Newsletter query identifier.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Search.Constants.SearchDomains.Circulars">
            <summary>
            Circular query and index identifier.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Search.Constants.SearchDomains.AddressLists">
            <summary>
            AddressList query and index identifier.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Search.FileReader">
            <summary>
            A reader capable of reading the textual contents of file types  
            with available <see cref="T:Litium.Foundation.Search.Filter.IFilter"/> implementations.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.FileReader.Read(System.String)">
            <summary>
            Reads the textual content of a file.
            </summary>
            <param name="fileName">The file name of the file that should be read.</param>
            <returns>The textual content of the file, or null if a supporting <see cref="T:Litium.Foundation.Search.Filter.IFilter"/> could not be instantiated.</returns>
        </member>
        <member name="F:Litium.Foundation.Search.Filter.Enums.FilterReturnCodes.S_OK">
            
            Success
            
        </member>
        <member name="F:Litium.Foundation.Search.Filter.Enums.FilterReturnCodes.E_ACCESSDENIED">
            
            The function was denied access to the filter file. 
            
        </member>
        <member name="F:Litium.Foundation.Search.Filter.Enums.FilterReturnCodes.E_HANDLE">
            
            The function encountered an invalid handle, probably due to a low-memory situation. 
            
        </member>
        <member name="F:Litium.Foundation.Search.Filter.Enums.FilterReturnCodes.E_INVALIDARG">
            
            The function received an invalid parameter.
            
        </member>
        <member name="F:Litium.Foundation.Search.Filter.Enums.FilterReturnCodes.E_OUTOFMEMORY">
            
            Out of memory
            
        </member>
        <member name="F:Litium.Foundation.Search.Filter.Enums.FilterReturnCodes.E_NOTIMPL">
            
            Not implemented
            
        </member>
        <member name="F:Litium.Foundation.Search.Filter.Enums.FilterReturnCodes.E_FAIL">
            
            Unknown error
            
        </member>
        <member name="F:Litium.Foundation.Search.Filter.Enums.FilterReturnCodes.FILTER_E_PASSWORD">
            
            File not filtered due to password protection
            
        </member>
        <member name="F:Litium.Foundation.Search.Filter.Enums.FilterReturnCodes.FILTER_E_UNKNOWNFORMAT">
            
            The document format is not recognised by the filter
            
        </member>
        <member name="F:Litium.Foundation.Search.Filter.Enums.FilterReturnCodes.FILTER_E_NO_TEXT">
            
            No text in current chunk
            
        </member>
        <member name="F:Litium.Foundation.Search.Filter.Enums.FilterReturnCodes.FILTER_E_END_OF_CHUNKS">
            
            No more chunks of text available in object
            
        </member>
        <member name="F:Litium.Foundation.Search.Filter.Enums.FilterReturnCodes.FILTER_E_NO_MORE_TEXT">
            
            No more text available in chunk
            
        </member>
        <member name="F:Litium.Foundation.Search.Filter.Enums.FilterReturnCodes.FILTER_E_NO_MORE_VALUES">
            
            No more property values available in chunk
            
        </member>
        <member name="F:Litium.Foundation.Search.Filter.Enums.FilterReturnCodes.FILTER_E_ACCESS">
            
            Unable to access object
            
        </member>
        <member name="F:Litium.Foundation.Search.Filter.Enums.FilterReturnCodes.FILTER_W_MONIKER_CLIPPED">
            
            Moniker doesn't cover entire region
            
        </member>
        <member name="F:Litium.Foundation.Search.Filter.Enums.FilterReturnCodes.FILTER_E_EMBEDDING_UNAVAILABLE">
            
            Unable to bind IFilter for embedded object
            
        </member>
        <member name="F:Litium.Foundation.Search.Filter.Enums.FilterReturnCodes.FILTER_E_LINK_UNAVAILABLE">
            
            Unable to bind IFilter for linked object
            
        </member>
        <member name="F:Litium.Foundation.Search.Filter.Enums.FilterReturnCodes.FILTER_S_LAST_TEXT">
            
            This is the last text in the current chunk
            
        </member>
        <member name="F:Litium.Foundation.Search.Filter.Enums.FilterReturnCodes.FILTER_S_LAST_VALUES">
            
            This is the last value in the current chunk
            
        </member>
        <member name="T:Litium.Foundation.Search.Filter.FilterFactory">
            <summary>
            A factory for <see cref="T:Litium.Foundation.Search.Filter.IFilter"/> capable of creating instances of <see cref="T:Litium.Foundation.Search.Filter.IFilter"/> implementations.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.Filter.FilterFactory.Load(System.String)">
            <summary>
            Creates an instance of <see cref="T:Litium.Foundation.Search.Filter.IFilter"/>.
            </summary>
            <returns>An instance of <see cref="T:Litium.Foundation.Search.Filter.IFilter"/></returns>
        </member>
        <member name="T:Litium.Foundation.Search.Filter.FilterInitializer">
            <summary>
            Initialization facility for <see cref="T:Litium.Foundation.Search.Filter.IFilter"/>.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.Filter.FilterInitializer.#ctor(Litium.Foundation.Search.Filter.FilterFactory)">
            <summary>
            Creates a new instance of <see cref="T:Litium.Foundation.Search.Filter.FilterInitializer"/>.
            </summary>
            <param name="filterFactory">The factory responsible for creating IFilter implementation instances.</param>
        </member>
        <member name="M:Litium.Foundation.Search.Filter.FilterInitializer.Initialize(System.String)">
            <summary>
            Creates and initializes an <see cref="T:Litium.Foundation.Search.Filter.IFilter"/>, 
            using the underlying <see cref="P:Litium.Foundation.Search.Filter.FilterInitializer.FilterFactory"/>.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.Filter.FilterInitializer.CreateInitializationOptions">
            <summary>
            Creates the flags used when initializing an IFilter.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Search.Filter.FilterReader">
            <summary>
            Reader that reads from an <see cref="T:Litium.Foundation.Search.Filter.IFilter"/>.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.Filter.FilterReader.Read(Litium.Foundation.Search.Filter.IFilter)">
            <summary>
            Reads and returns the textual content of a storage object, using its IFilter implementation.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Search.Filter.IFilter">
            <summary>
            This is a wrapper for IFilter, which is an interface for scanning documents for text and properties.
            More info here: http://msdn.microsoft.com/en-us/library/ms691105%28VS.85%29.aspx
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.Filter.IFilter.Init(Litium.Foundation.Search.Filter.Enums.IFILTER_INIT,System.UInt32,Litium.Foundation.Search.Filter.Enums.FULLPROPSPEC[],System.UInt32@)">
            <summary>
            Initializes a filtering session.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.Filter.IFilter.GetChunk(Litium.Foundation.Search.Filter.Enums.STAT_CHUNK@)">
            <summary>
            Positions filter at beginning of first or next chunk and returns a descriptor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.Filter.IFilter.GetText(System.UInt32@,System.Text.StringBuilder)">
            <summary>
            Retrieves text from the current chunk.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.Filter.IFilter.GetValue(System.UIntPtr@)">
            <summary>
            Retrieves values from the current chunk.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.Filter.IFilter.BindRegion(Litium.Foundation.Search.Filter.Enums.FILTERREGION,System.Guid@,System.UIntPtr@)">
            <summary>
            Retrieves an interface representing the specified portion of object. Currently reserved for future use.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Search.HitComparer">
            <summary>
            Hit comparer.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.HitComparer.Equals(Litium.Framework.Search.Hit,Litium.Framework.Search.Hit)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <see cref="T:Litium.Framework.Search.Hit"/> to compare.</param>
            <param name="y">The second object of type <see cref="T:Litium.Framework.Search.Hit"/> to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:Litium.Foundation.Search.HitComparer.GetHashCode(Litium.Framework.Search.Hit)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="obj">The obj.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.
            </exception>
        </member>
        <member name="T:Litium.Foundation.Search.IndexHelper">
            <summary>
            Indexing helper utility.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.IndexHelper.ResolveIndexPath(System.String,System.Guid)">
            <summary>
            Combines an index name and language ID, appended to a base path
            defined in <see cref="P:Litium.Foundation.Data.DataSettings.FilesDirectory"/>, to create a physical path
            to an index directory.
            </summary>
            <param name="indexName">The name of the index.</param>
            <param name="languageId">The language ID, or Guid.Empty if the indexing domain is not multi-lingual.</param>
            <returns>The physical path of the index directory.</returns>
        </member>
        <member name="T:Litium.Foundation.Search.IndexJobLocator">
            <summary>
            Locates and creates instances of <see cref="T:Litium.Framework.Search.Indexing.IndexJob"/>.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.IndexJobLocator.#ctor(Litium.Foundation.Search.IPersistingSearchConfigurationService)">
            <summary>
            Creates a new instance of <see cref="T:Litium.Foundation.Search.IndexJobLocator"/>.
            </summary>
            <param name="configurationService"></param>
        </member>
        <member name="M:Litium.Foundation.Search.IndexJobLocator.Locate(System.String)">
            <summary>
            Creates an instance of <see cref="T:Litium.Framework.Search.Indexing.IndexJob"/>.
            </summary>
            <param name="componentId">The identifyer of the component.</param>
            <returns>An instance of <see cref="T:Litium.Framework.Search.Indexing.IndexJob"/></returns>
        </member>
        <member name="P:Litium.Foundation.Search.IndexJobLocator.ConfigurationService">
            <summary>
            The <see cref="T:Litium.Foundation.Search.IPersistingSearchConfigurationService"/> instance.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Search.IndexRebuilder">
            <summary>
            Calls the <see cref="M:Litium.Framework.Search.Indexing.IIndexingService.Add(System.Collections.Generic.IEnumerable{Litium.Framework.Search.Indexing.IndexDocument},System.String,System.String,System.Boolean)"/> method and check for out of memory exceptions.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.IndexRebuilder.RebuildIndex(Litium.Foundation.Search.IndexRebuilder.IIndexingService_AddHandler,System.String,System.String,System.Collections.ObjectModel.Collection{Litium.Framework.Search.Indexing.IndexDocument},System.Boolean)">
            <summary>
            Rebuilds the index.
            </summary>
            <param name="indexRebuildHandler">The index rebuild handler.</param>
            <param name="indexName">Name of the index.</param>
            <param name="languageId">The language id.</param>
            <param name="languageDocuments">The language documents.</param>
            <param name="optimize">if set to <c>true</c> [optimize].</param>
        </member>
        <member name="P:Litium.Foundation.Search.IndexRebuilder.IndexDocCollectionSize">
            <summary>
            Gets the size of the index doc collection.
            </summary>
            <value>The size of the index doc collection.</value>
        </member>
        <member name="T:Litium.Foundation.Search.IndexRebuilder.IIndexingService_AddHandler">
            <summary>
            This method should be called to rebuild the index.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Search.IndexSynchronizer">
            <summary>
            Event subscriber and listener that enables indexing services 
            to keep their indexes synchronized with the underlying data repository.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.IndexSynchronizer.Initialize">
            <summary>
            Initialization that subscribes to the appropriate events.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.IndexSynchronizer.SubscribeToEvents">
            <summary>
            Calls <see cref="M:Litium.Foundation.Search.IndexSynchronizer.RegisterEventHandlers"/> if <see cref="M:Litium.Foundation.Search.IndexSynchronizer.IsChangeTrackingEnabled"/> is true.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.IndexSynchronizer.IsChangeTrackingEnabled">
            <summary>
            Reads the application configuration file and returns its value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Search.IndexSynchronizer.RegisterEventHandlers">
            <summary>
            Register event handlers to react to changes in the underlying data repository.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Search.IndexUpdateJob">
            <summary>
            Base class for indexing synchronization strategies.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Search.IndexUpdateJob.IncubationTimeAsSeconds">
            <summary>
            The time from instance creation to the time the job should be executed, 
            at the very earliest.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.IndexUpdateJob.#ctor(Litium.Framework.Search.Indexing.IIndexingService)">
            <summary>
            Creates a new instance of <see cref="T:Litium.Foundation.Search.IndexUpdateJob"/>.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.IndexUpdateJob.IsDue(System.TimeSpan)">
            <summary>
            Indicates if a job should be executed. 
            Determined by comparing the clockTime paramter to the <see cref="P:Litium.Foundation.Search.IndexUpdateJob.DueTimeOfDay"/>.
            <see cref="P:Litium.Foundation.Search.IndexUpdateJob.DueTimeOfDay"/> is set by the constructor, by adding <see cref="F:Litium.Foundation.Search.IndexUpdateJob.IncubationTimeAsSeconds"/> to DateTime.Now.
            </summary>
            <param name="clockTime">The time to compare agains.</param>
            <returns>True if the job is due, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Search.IndexUpdateJob.Equals(Litium.Foundation.Search.IndexUpdateJob)">
            <summary>
            Indicates whether the current job is equal to another job.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.IndexUpdateJob.Execute">
            <summary>
            Called by consumers if <see cref="M:Litium.Foundation.Search.IndexUpdateJob.IsDue(System.TimeSpan)"/> is true.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.IndexUpdateJob.GetPriority">
            <summary>
            Gets the priority.
            </summary>
            <returns>Priority value, default 0. Used for sorting jobs.</returns>
        </member>
        <member name="M:Litium.Foundation.Search.IndexUpdateJob.CompareTo(Litium.Foundation.Search.IndexUpdateJob)">
            <summary>
            High priortity get sorteded first, if same, sort on due date.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Litium.Foundation.Search.IndexUpdateJob.IndexingProvider">
            <summary>
            The <see cref="T:Litium.Framework.Search.Indexing.IIndexingService"/> instance.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Search.IndexUpdateJob.DueTimeOfDay">
            <summary>
            The due time of the job.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Search.IndexUpdateJob.UniqueId">
            <summary>
            The unique identifier of the update job.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Search.IndexUpdateJobConsumer">
            <summary>
            Timed worker that consumes <see cref="T:Litium.Foundation.Search.IndexUpdateJob"/> instances that have been queued in <see cref="T:Litium.Foundation.Search.IndexUpdateJobQueue"/>.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Search.IndexUpdateJobConsumer.m_sync">
            <summary>
            The synchronization object to lock on for thread safety.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.IndexUpdateJobConsumer.Start">
            <summary>
            Starts the worker cycles.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.IndexUpdateJobConsumer.Stop">
            <summary>
            Stops the worker cycles.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.IndexUpdateJobConsumer.ConsumeJobs">
            <summary>
            Executes all jobs that are due for processing.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.IndexUpdateJobConsumer.Initialize">
            <summary>
            Initializes and starts the worker cycles.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.IndexUpdateJobConsumer.OnTimerTick(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Timer event handler.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Search.IndexUpdateJobConsumer.Timer">
            <summary>
            The <see cref="P:Litium.Foundation.Search.IndexUpdateJobConsumer.Timer"/> instance.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Search.IndexUpdateJobConsumer.State">
            <summary>
            The current worker state.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Search.IndexUpdateJobQueue">
            <summary>
            Job queue for <see cref="T:Litium.Foundation.Search.IndexUpdateJob"/> instances.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.IndexUpdateJobQueue.Enqueue(Litium.Foundation.Search.IndexUpdateJob)">
            <summary>
            Adds a job to the end of the queue.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.IndexUpdateJobQueue.DequeueAll">
            <summary>
            Dequeues all currently queued items that are due for processing.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Litium.Foundation.Search.IndexUpdateJobQueue.QueueLength">
            <summary>
            Number of Indexjobs in queue.
            </summary>
            <value>The length of the queue.</value>
        </member>
        <member name="T:Litium.Foundation.Search.OptimizationJob">
            <summary>
            Scheduled job that optimizes an index, making querying against it faster.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.OptimizationJob.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Litium.Foundation.Search.OptimizationJob"/>.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.OptimizationJob.Execute(Litium.Framework.Search.Indexing.IIndexingService)">
            <summary>
            Executes the job.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Search.Providers.IndexingProvider">
            <summary>
            Indexing service capable of writing and maintaining index files.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.Providers.IndexingProvider.#ctor(Litium.Framework.Search.Configuration.IConfigurationService)">
            <summary>
            Creates a new instance of <see cref="T:Litium.Foundation.Search.Providers.IndexingProvider"/>.
            </summary>
            <param name="configurationService"></param>
        </member>
        <member name="T:Litium.Foundation.Search.IndexingService">
            <summary>
            Base class for indexing facitilies managing one or more indices.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.IndexingService.#ctor(Litium.Framework.Search.Indexing.IIndexingService,Litium.Foundation.Search.IPersistingSearchConfigurationService)">
            <summary>
            Creates a new instance of <see cref="T:Litium.Foundation.Search.IndexingService"/>.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.IndexingService.Initialize">
            <summary>
            Initializes the indexing: registers the index with the <see cref="T:Litium.Foundation.Search.SearchConfigurationService"/>, 
            ensures index directories exists and subscribes to events (if enabled) to keep the indexes in synch 
            with the data repository.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.IndexingService.RebuildIndex(Litium.Foundation.Security.SecurityToken)">
            <summary>
            Rebuilds the index from scratch, without optimization.
            </summary>
            <param name="securityToken">The security token.</param>
        </member>
        <member name="M:Litium.Foundation.Search.IndexingService.RebuildIndex(Litium.Foundation.Security.SecurityToken,System.Boolean)">
            <summary>
            Rebuilds the index, without optimization.
            </summary>
            <param name="securityToken">The security token.</param>
            <param name="rebuildFromScratch">if set to <c>true</c> rebuilds index from scratch, deletes and rebuilds.</param>
        </member>
        <member name="M:Litium.Foundation.Search.IndexingService.OptimizeIndex(Litium.Foundation.Security.SecurityToken)">
            <summary>
            Optimizes the index for faster searching.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.IndexingService.RegisterIndices">
            <summary>
            Register index configurations to the current 
            <see cref="T:Litium.Foundation.Search.IPersistingSearchConfigurationService"/> instance.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.IndexingService.EnsureIndexExists">
            <summary>
            Ensure the index exists.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Search.IndexingService.IndexingProvider">
            <summary>
            The <see cref="T:Litium.Framework.Search.Indexing.IIndexingService"/> instance.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Search.IndexingService.ConfigurationService">
            <summary>
            The <see cref="T:Litium.Foundation.Search.IPersistingSearchConfigurationService"/> instance.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Search.IPersistingSearchConfigurationService">
            <summary>
            In-memory extension of <see cref="T:Litium.Framework.Search.Configuration.IConfigurationService"/>.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.IPersistingSearchConfigurationService.RegisterIndexConfiguration(Litium.Framework.Search.Configuration.IndexConfigurationElement)">
            <summary>
            Adds an index configuration element to the in-memory configuration registry.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.IPersistingSearchConfigurationService.RegisterQueryConfiguration(Litium.Framework.Search.Configuration.QueryConfigurationElement)">
            <summary>
            Adds query configuration element to the in-memory configuration registry.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.IPersistingSearchConfigurationService.GetIndexJob(System.String)">
            <summary>
            Gets a registered index optimization job.
            </summary>
            <param name="key">The componentId of the index job.</param>
        </member>
        <member name="T:Litium.Foundation.Search.Constants.QueryComponentIds">
            <summary>
            String constants that are used when caching and retreiving <see cref="T:Litium.Framework.Search.Lucene.Querying.SearchQuery"/> instances.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Search.Constants.QueryComponentIds.Default">
            <summary>
            Default query component identifyer. Term search, must hit all.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Search.Constants.QueryComponentIds.Literal">
            <summary>
            Default query component identifyer. Literal search, hits  on terms in query.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Search.Constants.QueryComponentIds.Fuzzy">
            <summary>
            Fuzzy query component identifyer.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Search.Constants.QueryComponentIds.Operator">
            <summary>
            Operator query component identifyer.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Search.Providers.IndexOptimizer">
            <summary>
            Worker facility that consumes <see cref="T:Litium.Foundation.Search.OptimizationJob"/>. 
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.Providers.IndexOptimizer.#ctor(Litium.Framework.Search.Indexing.IIndexingService,Litium.Framework.Search.Configuration.IConfigurationService,Litium.Framework.Search.Indexing.IIndexJobLocator,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:Litium.Foundation.Search.Providers.IndexOptimizer"/>.
            </summary>
            <param name="indexingService">Indexing service.</param>
            <param name="configurationService">Configuration service.</param>
            <param name="indexJobLocator">Job locator facility.</param>
            <param name="intervalMs">Time between worker cycles.</param>
        </member>
        <member name="T:Litium.Foundation.Search.QueryLocator">
            <summary>
            In-memory implementation of a <see cref="T:Litium.Framework.Search.Lucene.IQueryLocator"/>. 
            Stores <see cref="T:Litium.Framework.Search.Lucene.Querying.SearchQuery"/> instances in a <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.QueryLocator.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Litium.Foundation.Search.QueryLocator"/>.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.QueryLocator.Locate(System.String,System.String)">
            <summary>
            Returns a cached <see cref="T:Litium.Framework.Search.Lucene.Querying.SearchQuery"/> instance.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Search.QueryRequest">
            <summary>
            Provides the data neccessary for an <see cref="T:Litium.Framework.Search.ISearchService"/> to build a query 
            and execute it on one or more indexes.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.QueryRequest.#ctor(System.Guid,System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a new instance of <see cref="T:Litium.Foundation.Search.QueryRequest"/>.
            </summary>
            <param name="languageId">The language ID of the current context.</param>
            <param name="queryName">The name of the query. 
            This is used to identify a query configuration, 
            which provides information on which indices should be targeted by the query.</param>
            <param name="securityToken">The security token of the current context.</param>
        </member>
        <member name="P:Litium.Foundation.Search.QueryRequest.SecurityToken">
            <summary>
            The security token of the current context.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Search.ResultItem">
            <summary>
            Base class for search result grid items.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Search.ResultItem.Id">
            <summary>
            The ID of the entity.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Search.ResultItem.IconImageUrl">
            <summary>
            The Image URL of the icon associated with the entity.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Search.ResultItem.TypeName">
            <summary>
            Human-readable type description.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Search.ResultItem.ViewUrl">
            <summary>
            The URL of the view page associated with the entity.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Search.ResultItem.EditUrl">
            <summary>
            The URL of the edit page associated with the entity.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Search.ResultItemFactory`1">
            <summary>
            Base class for result item factories.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.ResultItemFactory`1.MapItems(System.Collections.ObjectModel.Collection{Litium.Framework.Search.Hit})">
            <summary>
            Transforms a collection of <see cref="T:Litium.Framework.Search.Hit"/> items 
            into a collection of <see cref="T:Litium.Foundation.Search.ResultItem"/> items. 
            The resulting collection can be used as a data source for search result grids.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.ResultItemFactory`1.MapItem(Litium.Framework.Search.Hit)">
            <summary>
            Transforms a of <see cref="T:Litium.Framework.Search.Hit"/> into a <see cref="T:Litium.Foundation.Search.ResultItem"/> item. 
            </summary>
        </member>
        <member name="T:Litium.Foundation.Search.SearchConfigurationService">
            <summary>
            In-memory search configuration registry.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.SearchConfigurationService.GetAllIndexConfigurations">
            <summary>
            Returns all registered index configuration elements.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.SearchConfigurationService.GetIndexConfiguration(System.String,System.String)">
            <summary>
            Gets an index configuration element by name and language.
            </summary>
            <param name="indexName">The name of the index.</param>
            <param name="languageId">The language ID of the current context.</param>
        </member>
        <member name="M:Litium.Foundation.Search.SearchConfigurationService.GetQueryConfiguration(System.String,System.String)">
            <summary>
            Gets a query configuration element by name and language.
            </summary>
            <param name="queryName">The name of the query.</param>
            <param name="languageId">The language ID of the current context.</param>
        </member>
        <member name="M:Litium.Foundation.Search.SearchConfigurationService.RegisterIndexConfiguration(Litium.Framework.Search.Configuration.IndexConfigurationElement)">
            <summary>
            Adds an index configuration element to the in-memory configuration registry.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.SearchConfigurationService.RegisterQueryConfiguration(Litium.Framework.Search.Configuration.QueryConfigurationElement)">
            <summary>
            Adds a query configuration element to the in-memory configuration registry.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.SearchConfigurationService.GetIndexJob(System.String)">
            <summary>
            Gets a registered index optimization job.
            </summary>
            <param name="key">The componentId of the index job.</param>
        </member>
        <member name="M:Litium.Foundation.Search.SearchConfigurationService.GetOverridedLanguageIdForSearchDomain(System.String,System.String)">
            <summary>
            Overrides the language ID for domains that are not multi-lingual. 
            For simplicity and in the sake of upholding a high degree of usability for 
            outside developers one should always set the LanguageId of the <see cref="T:Litium.Foundation.Search.QueryRequest"/> 
            to the language ID string value of the current context, and then let this override 
            take care of parsing the correct language identifier.
            </summary>
            <param name="searchDomain">The search domain string constant.</param>
            <param name="languageId">The string representation of the language ID of the current context.</param>
            <returns>Guid.Empty.ToString() if the domain is not multi-lingual, 
            otherwise the language ID string representation of the current language context.</returns>
        </member>
        <member name="M:Litium.Foundation.Search.SearchConfigurationService.Clear">
            <summary>
            Clears this instance from registered configurations.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Search.Providers.SearchProvider">
            <summary>
            Search facility capable of free text searching in index files.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.Providers.SearchProvider.#ctor(Litium.Framework.Search.Configuration.IConfigurationService,Litium.Framework.Search.Lucene.IQueryLocator)">
            <summary>
            Creates a new instance of <see cref="T:Litium.Foundation.Search.Providers.SearchProvider"/>.
            </summary>
            <param name="configurationService">Configuration service.</param>
            <param name="queryLocator">Query locator facility.</param>
        </member>
        <member name="T:Litium.Foundation.Search.SearchInitializer">
            <summary>
            Base class for facilities that registers query configuration elements.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.SearchInitializer.#ctor(Litium.Foundation.Search.IPersistingSearchConfigurationService)">
            <summary>
            Creates a new instance of <see cref="T:Litium.Foundation.Search.SearchInitializer"/>.
            </summary>
            <param name="configurationService"></param>
        </member>
        <member name="M:Litium.Foundation.Search.SearchInitializer.Initialize">
            <summary>
            Call this to cause the query configuration elements to become registered.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.SearchInitializer.RegisterQueries">
            <summary>
            Register query configurations with the current <see cref="T:Litium.Foundation.Search.IPersistingSearchConfigurationService"/> instance.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Search.SearchInitializer.ConfigurationService">
            <summary>
            The <see cref="T:Litium.Foundation.Search.IPersistingSearchConfigurationService"/> instance.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Search.SearchService">
            <summary>
            Search facility capable of executing queries across one or more indexes, 
            as defined by the query and index configurations.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.SearchService.#ctor(Litium.Framework.Search.ISearchService,Litium.Foundation.Search.IPersistingSearchConfigurationService)">
            <summary>
            Creates a new instance of <see cref="T:Litium.Foundation.Search.SearchService"/>.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.SearchService.Search(Litium.Foundation.Search.QueryRequest)">
            <summary>
            Execute a query.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.SearchService.FlushIndexQueue">
            <summary>
            Flushes the index queue, manually triggers the Timer tick.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Search.SearchService.IndexProvider">
            <summary>
            Gets the <see cref="T:Litium.Framework.Search.Indexing.IIndexingService"/> instance.
            </summary>
            <value>The index provider.</value>
        </member>
        <member name="P:Litium.Foundation.Search.SearchService.SearchProvider">
            <summary>
            The <see cref="T:Litium.Framework.Search.ISearchService"/> instance.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Search.SearchService.ConfigurationService">
            <summary>
            The <see cref="T:Litium.Foundation.Search.IPersistingSearchConfigurationService"/> instance.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Search.Constants.TagNames">
            <summary>
            String constants for naming and identifying tags (<see cref="T:Litium.Framework.Search.Tag"/>) on index documents (<see cref="T:Litium.Framework.Search.Indexing.IndexDocument"/>).
            </summary>
        </member>
        <member name="F:Litium.Foundation.Search.Constants.TagNames.IndexName">
            <summary>
            Index name tag name.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Search.Constants.TagNames.Permission">
            <summary>
            Permissions tag name.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Search.Constants.TagNames.FileId">
            <summary>
            FileId tag name.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Search.Constants.TagNames.GetTagNameForProperty(System.String)">
            <summary>
            Get the tagname of a property.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="T:Litium.Foundation.Security.AuthenticationManager">
            <summary>
            Use the AuthenticationManager to get a SecurityToken for a user.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.AuthenticationManager.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.AuthenticationManager.AuthenticateActiveDirectoryUser(System.Security.Principal.IIdentity)">
            <summary>
            Authenticates an Active Directory user.
            </summary>	
            <param name="identity">An authenticated windows identity.</param>
            <returns>A security token if authentication succeded, otherwise null.</returns>
        </member>
        <member name="M:Litium.Foundation.Security.AuthenticationManager.AuthenticateActiveDirectoryUser(System.String,System.String)">
            <summary>
            Authenticates the currently logged in Active Directory user.
            </summary>	
            <param name="verifyLoginName">Login name used to verify group against the Active Directory.</param>
            <param name="verifyPassword">Password used to verify group against the Active Directory.</param>
            <returns>A security token if authentication succeded, otherwise null.</returns>
        </member>
        <member name="M:Litium.Foundation.Security.AuthenticationManager.AuthenticateActiveDirectoryUser(System.Security.Principal.IIdentity,System.String,System.String)">
            <summary>
            Authenticates an Active Directory user.
            </summary>	
            <param name="identity">An authenticated windows identity.</param>
            <param name="verifyLoginName">Login name used to verify group against the Active Directory.</param>
            <param name="verifyPassword">Password used to verify group against the Active Directory.</param>
            <returns>A security token if authentication succeded, otherwise null.</returns>
        </member>
        <member name="M:Litium.Foundation.Security.AuthenticationManager.AuthenticateInternalUser(System.String,System.String)">
            <summary>
            Authenticates an internal user.
            </summary>
            <param name="loginName">User login name.</param>
            <param name="password">User password (not encrypted).</param>
            <returns>A security token if authentication succeded, otherwise null.</returns>
        </member>
        <member name="M:Litium.Foundation.Security.AuthenticationManager.AuthenticateNovellUser(System.String,System.String)">
            <summary>
            Authenticates a Novell user.
            </summary>
            <param name="loginName">User login name.</param>
            <param name="password">User password (not encrypted).</param>
            <returns>A security token if authentication succeded, otherwise null.</returns>
        </member>
        <member name="T:Litium.Foundation.Accounts.CannotDeleteAnonymousUserExeption">
            <summary>
            Thrown when trying to delete the anonymous user.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Accounts.CannotDeleteAnonymousUserExeption.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Accounts.CannotDeleteAnonymousUserExeption.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Accounts.CannotDeleteAnonymousUserExeption"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Litium.Foundation.Accounts.CannotDeleteSystemUserExeption">
            <summary>
            Thrown when trying to delete the system user.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Accounts.CannotDeleteSystemUserExeption.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Accounts.CannotDeleteSystemUserExeption.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Accounts.CannotDeleteSystemUserExeption"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Litium.Foundation.Carriers.DeletedUserCarrier">
            <summary>
            The DeletedUserCarrier describes a deleted user.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.DeletedUserCarrier.ATTRIBUTE_DELETED_DATE">
            <summary>
            XML Constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.DeletedUserCarrier.ATTRIBUTE_ID">
            <summary>
            XML Constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.DeletedUserCarrier.ATTRIBUTE_LOGIN_NAME">
            <summary>
            XML Constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.DeletedUserCarrier.ELEMENT_NAME">
            <summary>
            XML Constant.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.DeletedUserCarrier.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.DeletedUserCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor.
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.DeletedUserCarrier.#ctor(System.Guid,System.String,System.DateTime)">
            <summary>
            Constructor.
            </summary>
            <param name="userID">User ID.</param>
            <param name="loginName">Login name.</param>
            <param name="deletedDate">Deleted date.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.DeletedUserCarrier.Clone">
            <summary>
            Returns a clone of the carrier.
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.DeletedUserCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.DeletedUserCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier ax an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml element.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.DeletedUserCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.DeletedUserCarrier.SetValues(System.Guid,System.String,System.DateTime)">
            <summary>
            Set carrier values.
            </summary>
            <param name="userID">User ID.</param>
            <param name="loginName">Login name.</param>
            <param name="deletedDate">Deleted date.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.DeletedUserCarrier.DeletedDate">
            <summary>
            Deleted date.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.DeletedUserCarrier.ID">
            <summary>
            User ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.DeletedUserCarrier.LoginName">
            <summary>
            Login name.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.GroupMembershipCreatedEventCarrier">
            <summary>
            The GroupMembershipEventCreated describes the event of a created group membership.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.GroupMembershipCreatedEventCarrier.ATTRIBUTE_GROUP_ID">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.GroupMembershipCreatedEventCarrier.ATTRIBUTE_USER_ID">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.GroupMembershipCreatedEventCarrier.ELEMENT_NAME">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupMembershipCreatedEventCarrier.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupMembershipCreatedEventCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor.
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupMembershipCreatedEventCarrier.#ctor(System.Int64,System.DateTime,System.Guid,System.Guid)">
            <summary>
            Constructor.
            </summary>
            /// <param name="eventID">Event ID.</param>
            <param name="timeStamp">Time stamp.</param>
            <param name="groupID">Group ID.</param>
            <param name="userID">User ID.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupMembershipCreatedEventCarrier.Clone">
            <summary>
            Returns a clone of the carrier.
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupMembershipCreatedEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupMembershipCreatedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier ax an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml element.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupMembershipCreatedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument,System.String)">
            <summary>
            Returns the carrier ax an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <param name="elementName">Element name.</param>
            <returns>The xml element.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupMembershipCreatedEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupMembershipCreatedEventCarrier.SetValues(System.Int64,System.DateTime,System.Guid,System.Guid)">
            <summary>
            Set carrier values.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="userID">User ID.</param>
            <param name="eventID">Event ID.</param>
            <param name="timestamp">Time stamp.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.GroupMembershipCreatedEventCarrier.GroupID">
            <summary>
            Group ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.GroupMembershipCreatedEventCarrier.EventName">
            <summary>
            Returns the event name.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.GroupMembershipCreatedEventCarrier.UserID">
            <summary>
            User ID.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.GroupMembershipDeletedEventCarrier">
            <summary>
            The GroupMembershipEventDeleted describes the event of a deleted group membership.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.GroupMembershipDeletedEventCarrier.ATTRIBUTE_GROUP_ID">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.GroupMembershipDeletedEventCarrier.ATTRIBUTE_USER_ID">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.GroupMembershipDeletedEventCarrier.ELEMENT_NAME">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupMembershipDeletedEventCarrier.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupMembershipDeletedEventCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor.
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupMembershipDeletedEventCarrier.#ctor(System.Int64,System.DateTime,System.Guid,System.Guid)">
            <summary>
            Constructor.
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Time stamp.</param>
            <param name="groupID">Group ID.</param>
            <param name="userID">User ID.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupMembershipDeletedEventCarrier.Clone">
            <summary>
            Returns a clone of the carrier.
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupMembershipDeletedEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupMembershipDeletedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier ax an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml element.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupMembershipDeletedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument,System.String)">
            <summary>
            Returns the carrier ax an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            /// <param name="elementName">Name of the top element.</param>
            <returns>The xml element.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupMembershipDeletedEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupMembershipDeletedEventCarrier.SetValues(System.Int64,System.DateTime,System.Guid,System.Guid)">
            <summary>
            Set carrier values.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="userID">User ID.</param>
            <param name="eventID">Event ID.</param>
            <param name="timestamp">Time stamp.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.GroupMembershipDeletedEventCarrier.EventName">
            <summary>
            Returns the event name.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.GroupMembershipDeletedEventCarrier.GroupID">
            <summary>
            Group ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.GroupMembershipDeletedEventCarrier.UserID">
            <summary>
            User ID.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.ModuleStringCarrier">
            <summary>
            The ModuleStringCarrier describes a module string.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.ModuleStringCarrier.ELEMENT_NAME">
            <summary>
            Carrier element name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.ModuleStringCarrier.ATTRIBUTE_KEY">
            <summary>
            Key attribute
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.ModuleStringCarrier.ATTRIBUTE_LANGUAGE_ID">
            <summary>
            Language ID attribute
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.ModuleStringCarrier.ATTRIBUTE_MODULE_ID">
            <summary>
            Module ID attribute
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.ModuleStringCarrier.ATTRIBUTE_VALUE">
            <summary>
            Module string value attribute
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.ModuleStringCarrier.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.ModuleStringCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor.
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.ModuleStringCarrier.#ctor(System.Guid,System.String,System.Guid,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="languageID">Language ID.</param>
            <param name="key">Key.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.ModuleStringCarrier.Clone">
            <summary>
            Returns a clone of the carrier.
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.ModuleStringCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.ModuleStringCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier ax an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml element.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.ModuleStringCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.ModuleStringCarrier.SetValues(System.Guid,System.String,System.Guid,System.String)">
            <summary>
            Set carrier values.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="languageID">Language ID.</param>
            <param name="key">Key.</param>
            <param name="value">Value.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.ModuleStringCarrier.Key">
            <summary>
            Key.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.ModuleStringCarrier.LanguageID">
            <summary>
            Language ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.ModuleStringCarrier.ModuleID">
            <summary>
            Module ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.ModuleStringCarrier.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.ModuleStringCreatedEventCarrier">
            <summary>
            The ModuleStringCreatedEventCarrier describes the event of a created module string.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.ModuleStringCreatedEventCarrier.ELEMENT_NAME">
            <summary>
            Xml-carrier element name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.ModuleStringCreatedEventCarrier.ATTRIBUTE_KEY">
            <summary>
            Key attribute
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.ModuleStringCreatedEventCarrier.ATTRIBUTE_LANGUAGE_ID">
            <summary>
            Language ID attribute
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.ModuleStringCreatedEventCarrier.ATTRIBUTE_MODULE_ID">
            <summary>
            Module ID attribute
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.ModuleStringCreatedEventCarrier.ATTRIBUTE_VALUE">
            <summary>
            Value attribute name
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleStringCreatedEventCarrier.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleStringCreatedEventCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor.
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleStringCreatedEventCarrier.#ctor(System.Int64,System.DateTime,System.Guid,System.String,System.Guid,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Time stamp.</param>
            <param name="moduleID">Module ID.</param>
            <param name="languageID">Language ID.</param>
            <param name="key">Key.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleStringCreatedEventCarrier.Clone">
            <summary>
            Returns a clone of the carrier.
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleStringCreatedEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleStringCreatedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier ax an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml element.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleStringCreatedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument,System.String)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <param name="elementName">Element name.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleStringCreatedEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleStringCreatedEventCarrier.SetValues(System.Int64,System.DateTime,System.Guid,System.String,System.Guid,System.String)">
            <summary>
            Set carrier values.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="key">Key.</param>
            <param name="languageID">Language ID.</param>
            <param name="value">Value.</param>
            <param name="eventID">Event ID.</param>
            <param name="timestamp">Time stamp.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.ModuleStringCreatedEventCarrier.EventName">
            <summary>
            Returns the event name.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.ModuleStringCreatedEventCarrier.Key">
            <summary>
            Key.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.ModuleStringCreatedEventCarrier.LanguageID">
            <summary>
            Language ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.ModuleStringCreatedEventCarrier.ModuleID">
            <summary>
            Module ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.ModuleStringCreatedEventCarrier.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.ModuleStringDeletedEventCarrier">
            <summary>
            The ModuleStringDeletedEventCarrier describes the event of a deleted module string.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.ModuleStringDeletedEventCarrier.ELEMENT_NAME">
            <summary>
            Xmlcarrier element name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.ModuleStringDeletedEventCarrier.ATTRIBUTE_KEY">
            <summary>
            Key attribute
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.ModuleStringDeletedEventCarrier.ATTRIBUTE_LANGUAGE_ID">
            <summary>
            Language ID attribute
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.ModuleStringDeletedEventCarrier.ATTRIBUTE_MODULE_ID">
            <summary>
            Module ID attribute
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.ModuleStringDeletedEventCarrier.ATTRIBUTE_VALUE">
            <summary>
            Value attribute name
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleStringDeletedEventCarrier.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleStringDeletedEventCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor.
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleStringDeletedEventCarrier.#ctor(System.Int64,System.DateTime,System.Guid,System.String,System.Guid,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Time stamp.</param>
            <param name="moduleID">Module ID.</param>
            <param name="languageID">Language ID.</param>
            <param name="key">Key.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleStringDeletedEventCarrier.Clone">
            <summary>
            Returns a clone of the carrier.
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleStringDeletedEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleStringDeletedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier ax an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml element.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleStringDeletedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument,System.String)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <param name="elementName">Element name.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleStringDeletedEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleStringDeletedEventCarrier.SetValues(System.Int64,System.DateTime,System.Guid,System.String,System.Guid,System.String)">
            <summary>
            Set carrier values.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="key">Key.</param>
            <param name="languageID">Language ID.</param>
            <param name="value">Value.</param>
            <param name="eventID">Event ID.</param>
            <param name="timestamp">Time stamp.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.ModuleStringDeletedEventCarrier.EventName">
            <summary>
            Returns the event name.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.ModuleStringDeletedEventCarrier.Key">
            <summary>
            Key.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.ModuleStringDeletedEventCarrier.LanguageID">
            <summary>
            Language ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.ModuleStringDeletedEventCarrier.ModuleID">
            <summary>
            Module ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.ModuleStringDeletedEventCarrier.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.ModuleStringUpdatedEventCarrier">
            <summary>
            The ModuleStringUpdatedEventCarrier describes the event of a updated module string.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.ModuleStringUpdatedEventCarrier.ELEMENT_NAME">
            <summary>
            Xmlcarrier element name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.ModuleStringUpdatedEventCarrier.ATTRIBUTE_KEY">
            <summary>
            Key attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.ModuleStringUpdatedEventCarrier.ATTRIBUTE_LANGUAGE_ID">
            <summary>
            Language ID attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.ModuleStringUpdatedEventCarrier.ATTRIBUTE_MODULE_ID">
            <summary>
            Module ID attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.ModuleStringUpdatedEventCarrier.ATTRIBUTE_VALUE">
            <summary>
            Value attribute name
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleStringUpdatedEventCarrier.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleStringUpdatedEventCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor.
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleStringUpdatedEventCarrier.#ctor(System.Int64,System.DateTime,System.Guid,System.String,System.Guid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Carriers.Events.ModuleStringUpdatedEventCarrier"/> class.
            </summary>
            <param name="eventID">The event ID.</param>
            <param name="timeStamp">The time stamp.</param>
            <param name="moduleID">The module ID.</param>
            <param name="key">The key.</param>
            <param name="languageID">The language ID.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleStringUpdatedEventCarrier.Clone">
            <summary>
            Returns a clone of the carrier.
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleStringUpdatedEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleStringUpdatedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier ax an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml element.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleStringUpdatedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument,System.String)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <param name="elementName">Element name.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleStringUpdatedEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleStringUpdatedEventCarrier.SetValues(System.Int64,System.DateTime,System.Guid,System.Guid,System.String,System.String)">
            <summary>
            Set carrier values.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="languageID">Language ID.</param>
            <param name="key">Key.</param>
            <param name="value">Value.</param>
            <param name="eventID">Event ID.</param>
            <param name="timestamp">Time stamp.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.ModuleStringUpdatedEventCarrier.EventName">
            <summary>
            Returns the event name.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.ModuleStringUpdatedEventCarrier.Key">
            <summary>
            Key.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.ModuleStringUpdatedEventCarrier.LanguageID">
            <summary>
            Language ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.ModuleStringUpdatedEventCarrier.ModuleID">
            <summary>
            Module ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.ModuleStringUpdatedEventCarrier.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.SystemStringCarrier">
            <summary>
            The SystemStringCarrier describes a system string.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.SystemStringCarrier.ELEMENT_NAME">
            <summary>
            XmlCarrier element name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.SystemStringCarrier.ATTRIBUTE_KEY">
            <summary>
            Key attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.SystemStringCarrier.ATTRIBUTE_LANGUAGE_ID">
            <summary>
            Language ID attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.SystemStringCarrier.ATTRIBUTE_VALUE">
            <summary>
            Value attribute name
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.SystemStringCarrier.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.SystemStringCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor.
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.SystemStringCarrier.#ctor(System.String,System.Guid,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="languageID">Language ID.</param>
            <param name="key">Key.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.SystemStringCarrier.Clone">
            <summary>
            Returns a clone of the carrier.
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.SystemStringCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.SystemStringCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier ax an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml element.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.SystemStringCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.SystemStringCarrier.SetValues(System.String,System.Guid,System.String)">
            <summary>
            Set carrier values.
            </summary>
            <param name="key">Key.</param>
            <param name="languageID">Language ID.</param>
            <param name="value">Value.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.SystemStringCarrier.Key">
            <summary>
            Key.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.SystemStringCarrier.LanguageID">
            <summary>
            Language ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.SystemStringCarrier.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.SystemStringCreatedEventCarrier">
            <summary>
            The SystemStringCreatedEventCarrier describes the event of a created system string.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.SystemStringCreatedEventCarrier.ELEMENT_NAME">
            <summary>
            Xmlcarrier element name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.SystemStringCreatedEventCarrier.ATTRIBUTE_KEY">
            <summary>
            Key attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.SystemStringCreatedEventCarrier.ATTRIBUTE_LANGUAGE_ID">
            <summary>
            Language ID attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.SystemStringCreatedEventCarrier.ATTRIBUTE_VALUE">
            <summary>
            Value attribute name
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SystemStringCreatedEventCarrier.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SystemStringCreatedEventCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor.
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SystemStringCreatedEventCarrier.#ctor(System.Int64,System.DateTime,System.String,System.Guid,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Time stamp.</param>
            <param name="languageID">Language ID.</param>
            <param name="key">Key.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SystemStringCreatedEventCarrier.Clone">
            <summary>
            Returns a clone of the carrier.
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SystemStringCreatedEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SystemStringCreatedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier ax an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml element.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SystemStringCreatedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument,System.String)">
            <summary>
            Returns the carrier ax an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <param name="elementName">Element name.</param>
            <returns>The xml element.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SystemStringCreatedEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SystemStringCreatedEventCarrier.SetValues(System.Int64,System.DateTime,System.String,System.Guid,System.String)">
            <summary>
            Set carrier values.
            </summary>
            <param name="key">Key.</param>
            <param name="languageID">Language ID.</param>
            <param name="value">Value.</param>
            <param name="eventID">Event ID.</param>
            <param name="timestamp">Time stamp.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.SystemStringCreatedEventCarrier.EventName">
            <summary>
            Returns the event name.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.SystemStringCreatedEventCarrier.Key">
            <summary>
            Key.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.SystemStringCreatedEventCarrier.LanguageID">
            <summary>
            Language ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.SystemStringCreatedEventCarrier.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.SystemStringDeletedEventCarrier">
            <summary>
            The SystemStringDeletedEventCarrier describes the event of a deleted system string.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.SystemStringDeletedEventCarrier.ELEMENT_NAME">
            <summary>
            Xmlcarrier element name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.SystemStringDeletedEventCarrier.ATTRIBUTE_KEY">
            <summary>
            Key attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.SystemStringDeletedEventCarrier.ATTRIBUTE_LANGUAGE_ID">
            <summary>
            Language ID attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.SystemStringDeletedEventCarrier.ATTRIBUTE_VALUE">
            <summary>
            Value attribute name
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SystemStringDeletedEventCarrier.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SystemStringDeletedEventCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor.
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SystemStringDeletedEventCarrier.#ctor(System.Int64,System.DateTime,System.String,System.Guid,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Time stamp.</param>
            <param name="languageID">Language ID.</param>
            <param name="key">Key.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SystemStringDeletedEventCarrier.Clone">
            <summary>
            Returns a clone of the carrier.
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SystemStringDeletedEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SystemStringDeletedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier ax an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml element.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SystemStringDeletedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument,System.String)">
            <summary>
            Returns the carrier ax an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <param name="elementName">Element name.</param>
            <returns>The xml element.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SystemStringDeletedEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SystemStringDeletedEventCarrier.SetValues(System.Int64,System.DateTime,System.String,System.Guid,System.String)">
            <summary>
            Set carrier values.
            </summary>
            <param name="key">Key.</param>
            <param name="languageID">Language ID.</param>
            <param name="value">Value.</param>
            <param name="eventID">Event ID.</param>
            <param name="timestamp">Time stamp.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.SystemStringDeletedEventCarrier.EventName">
            <summary>
            Returns the event name.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.SystemStringDeletedEventCarrier.Key">
            <summary>
            Key.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.SystemStringDeletedEventCarrier.LanguageID">
            <summary>
            Language ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.SystemStringDeletedEventCarrier.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.SystemStringUpdatedEventCarrier">
            <summary>
            The SystemStringUpdatedEventCarrier describes the event of a updated system string.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.SystemStringUpdatedEventCarrier.ELEMENT_NAME">
            <summary>
            Xmlcarrier element name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.SystemStringUpdatedEventCarrier.ATTRIBUTE_KEY">
            <summary>
            Key attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.SystemStringUpdatedEventCarrier.ATTRIBUTE_LANGUAGE_ID">
            <summary>
            Language ID attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.SystemStringUpdatedEventCarrier.ATTRIBUTE_VALUE">
            <summary>
            Value attribute name
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SystemStringUpdatedEventCarrier.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SystemStringUpdatedEventCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor.
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SystemStringUpdatedEventCarrier.#ctor(System.Int64,System.DateTime,System.String,System.Guid,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Time stamp.</param>
            <param name="languageID">Language ID.</param>
            <param name="key">Key.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SystemStringUpdatedEventCarrier.Clone">
            <summary>
            Returns a clone of the carrier.
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SystemStringUpdatedEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SystemStringUpdatedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier ax an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml element.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SystemStringUpdatedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument,System.String)">
            <summary>
            Returns the carrier ax an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <param name="elementName">Element name.</param>
            <returns>The xml element.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SystemStringUpdatedEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SystemStringUpdatedEventCarrier.SetValues(System.Int64,System.DateTime,System.String,System.Guid,System.String)">
            <summary>
            Set carrier values.
            </summary>
            <param name="key">Key.</param>
            <param name="languageID">Language ID.</param>
            <param name="value">Value.</param>
            <param name="eventID">Event ID.</param>
            <param name="timestamp">Time stamp.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.SystemStringUpdatedEventCarrier.EventName">
            <summary>
            Returns the event name.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.SystemStringUpdatedEventCarrier.Key">
            <summary>
            Key.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.SystemStringUpdatedEventCarrier.LanguageID">
            <summary>
            Language ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.SystemStringUpdatedEventCarrier.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Security.ChangePasswordException">
            <summary>
            Change password exception.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.ChangePasswordException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.ChangePasswordException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.ChangePasswordException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.ChangePasswordException"/> class.
            </summary>
            <param name="title">Exception title.</param>
        </member>
        <member name="M:Litium.Foundation.Security.ChangePasswordException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.ChangePasswordException"/> class.
            </summary>
            <param name="title">The title.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Litium.Foundation.Security.ChangePasswordException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.ChangePasswordException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Litium.Foundation.Security.RandomStringGenerator">
            <summary>
            Generate random passwords.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.RandomStringGenerator.Generate">
            <summary>
            Generates a random password.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Security.RandomStringGenerator.Generate(System.Int32)">
            <summary>
            Generates a random password.
            </summary>
            <param name="length">Password length.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Security.RandomStringGenerator.Generate(System.Int32,System.Int32)">
            <summary>
            Generates a random password.
            </summary>
            <param name="minLength">Minimum number of characters in password.</param>
            <param name="maxLength">Maximum number of characters in password.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Security.RandomStringGenerator.Generate(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates a random password.
            </summary>
            <param name="lower">Number of lower characters in password.</param>
            <param name="upper">Number of upper characters in password.</param>
            <param name="symbols">Number of symbols in password.</param>
            <param name="digits">Number of digits in password.</param>
            <returns></returns>
        </member>
        <member name="T:Litium.Foundation.Security.LoginManager">
            <summary>
            Use the LoginManager to change the logged in user or to get information about the currently logged in user.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.LoginManager.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.LoginManager.GetLoggedInToken(System.Web.SessionState.HttpSessionState)">
            <summary>
            Get the currently logged in token.
            </summary>
            <param name="session">Session state.</param>
            <returns>The currently logged in token.</returns>
        </member>
        <member name="M:Litium.Foundation.Security.LoginManager.GetLoggedInUser(System.String)">
            <summary>
            Get the currently logged in user given a Session ID.
            </summary>
            <param name="sessionID">Session ID.</param>
            <returns>A User instance if the session exists, otherwise null.</returns>
        </member>
        <member name="M:Litium.Foundation.Security.LoginManager.GetAllLoggedInUser">
            <summary>
            Get all currently logged in users.
            </summary>
            <returns>All user instances with a session info (no groups and permissions are feteched), otherwise null.</returns>
        </member>
        <member name="M:Litium.Foundation.Security.LoginManager.GetLoggedInUserID(System.String)">
            <summary>
            Get the currently logged in user id given a Session ID.
            </summary>
            <param name="sessionID">Session ID.</param>
            <returns>User id of the logged in user if the session exists, otherwise null.</returns>
        </member>
        <member name="M:Litium.Foundation.Security.LoginManager.IsUserLoggedIn(System.Guid)">
            <summary>
            Returns whether a user is currently logged in.
            </summary>
            <param name="userID">User ID.</param>
            <returns>Whether a user is currently logged in.</returns>
        </member>
        <member name="M:Litium.Foundation.Security.LoginManager.IsUserLoggedIn(System.String)">
            <summary>
            Returns whether a user is currently logged in.
            </summary>
            <param name="loginName">Login name.</param>
            <returns>Whether a user is currently logged in.</returns>
        </member>
        <member name="M:Litium.Foundation.Security.LoginManager.Login(Litium.Foundation.Security.SecurityToken,System.Web.SessionState.HttpSessionState)">
            <summary>
            Login method when using Foundation through a web application.
            The logged in token is saved in the session state.
            </summary>
            <param name="token">Security token to log in with.</param>
            <param name="session">Session state.</param>
        </member>
        <member name="M:Litium.Foundation.Security.LoginManager.Login(System.String,System.String,System.Web.SessionState.HttpSessionState)">
            <summary>
            Login method when using Foundation through a web application.
            The logged in token is saved in the session state.
            </summary>
            <param name="loginName">Login name.</param>
            <param name="password">Password.</param>
            <param name="session">Session state.</param>
            <returns>The logged in token or null if login failed.</returns>
            <exception cref="T:Litium.Foundation.Security.ChangePasswordException">If user have to change password before login.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.LoginManager.Login(System.String,System.String,System.String,System.Web.SessionState.HttpSessionState)">
            <summary>
            Login method when using Foundation through a web application.
            The logged in token is saved in the session state.
            </summary>
            <param name="loginName">Login name.</param>
            <param name="password">Password.</param>
            <param name="newPassword">New password</param>
            <param name="session">Session state.</param>
            <returns>The logged in token or null if login failed.</returns>
            <exception cref="T:Litium.Foundation.Security.ChangePasswordException">If user have to change password before login.</exception>
            <exception cref="T:Litium.Foundation.Security.PasswordComplexityException">If not users new password is accepted by the password rules.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.LoginManager.Logout(System.Web.SessionState.HttpSessionState)">
            <summary>
            Logout (equal to login with the anonymous token).
            </summary>
            <param name="session">Session state.</param>
        </member>
        <member name="M:Litium.Foundation.Security.LoginManager.Logout(Litium.Foundation.Security.SecurityToken)">
            <summary>
            Logouts the specified token.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="P:Litium.Foundation.Security.LoginManager.AnonymousToken">
            <summary>
            Returns the anonymous user token.
            </summary>
            <returns>The anonymous user token.</returns>
        </member>
        <member name="T:Litium.Foundation.Accounts.EntryDoesNotExistInDirectoryException">
            <summary>
            Thrown when an entry does not exist in the Active Directory.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Accounts.EntryDoesNotExistInDirectoryException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Accounts.EntryDoesNotExistInDirectoryException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Accounts.EntryDoesNotExistInDirectoryException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="ldapPath">Ldap path.</param>
        </member>
        <member name="P:Litium.Foundation.Accounts.EntryDoesNotExistInDirectoryException.LDAPPath">
            <summary>
            The LDAP path.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Accounts.GroupCollection">
            <summary>
            A collection of all groups. 
            Enumerates over Group instances.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Accounts.GroupCollection.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Accounts.GroupCollection.GetEnumerator">
            <summary>
            Returns an Enumerator of all the groups in the collection.
            Enumerates over Group instances.
            </summary>
            <returns>The Enumerator of the collection.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.GroupCollection.CreateActiveDirectoryGroup(System.String,System.Boolean,System.String,System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a new Active Directory group.
            </summary>
            <param name="entryPath">Entry path (example: "CN=Domain Users,CN=Users,DC=litium,DC=se").</param>
            <param name="centralAdministration">Whether the account is to be handled via the central administration gui or not.</param>
            <param name="verifyLoginName">Login name used to verify group against the Active Directory.</param>
            <param name="verifyPassword">Password used to verify group against the Active Directory.</param>
            <param name="token">Security token.</param>
            <returns>The new group.</returns>
            <exception cref="T:Litium.Foundation.Accounts.EntryDoesNotExistInDirectoryException">Thrown when the group does not exist in the AD.</exception>
            <exception cref="T:Litium.Foundation.Accounts.GroupExistsException">Thrown when the group name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.GroupCollection.CreateActiveDirectoryGroup(System.Guid,System.String,System.Boolean,System.String,System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a new Active Directory group.
            </summary>
            <param name="id">Group ID.</param>
            <param name="entryPath">Entry path (example: "CN=Domain Users,CN=Users,DC=litium,DC=se").</param>
            <param name="centralAdministration">Whether the account is to be handled via the central administration gui or not.</param>
            <param name="verifyLoginName">Login name used to verify group against the Active Directory.</param>
            <param name="verifyPassword">Password used to verify group against the Active Directory.</param>
            <param name="token">Security token.</param>
            <returns>The new group.</returns>
            <exception cref="T:Litium.Foundation.Accounts.EntryDoesNotExistInDirectoryException">Thrown when the group does not exist in the AD.</exception>
            <exception cref="T:Litium.Foundation.Accounts.GroupExistsException">Thrown when the group name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.GroupCollection.CreateActiveDirectoryGroupFromCarrier(Litium.Foundation.Carriers.GroupCarrier,System.String,System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a new Active Directory group from a carrier class.
            </summary>
            <param name="carrier">Group carrier.</param>
            <param name="verifyLoginName">Login name used to verify group against the Active Directory.</param>
            <param name="verifyPassword">Password used to verify group against the Active Directory.</param>
            <param name="token">Security token.</param>
            <returns>The new group.</returns>
            <exception cref="T:Litium.Foundation.Accounts.EntryDoesNotExistInDirectoryException">Thrown when the group does not exist in the AD.</exception>
            <exception cref="T:Litium.Foundation.Accounts.GroupExistsException">Thrown when the group name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.GroupCollection.CreateGroupsFromCarriers(Litium.Foundation.Carriers.GroupCarrier[],Litium.Foundation.Security.SecurityToken)">
            <summary>
            Create groups from carriers.
            </summary>
            <param name="carriers">Array of carriers.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupExistsException">Thrown when the group name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.GroupCollection.CreateInternalGroup(System.String,System.String,System.Boolean,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a new internal group.
            </summary>
            <param name="name">Group name.</param>
            <param name="displayName">Group display name.</param>
            <param name="centralAdministration">Whether the account is to be handled via the central administration gui or not.</param>
            <param name="token">Security token.</param>
            <returns>The new group.</returns>
            <exception cref="T:Litium.Foundation.Accounts.GroupExistsException">Thrown when the group name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.GroupCollection.CreateInternalGroup(System.Guid,System.String,System.String,System.Boolean,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a new internal group.
            </summary>
            <param name="id">Group ID.</param>
            <param name="name">Group name.</param>
            <param name="displayName">Group display name.</param>
            <param name="centralAdministration">Whether the account is to be handled via the central administration gui or not.</param>
            <param name="token">Security token.</param>
            <returns>The new group.</returns>
            <exception cref="T:Litium.Foundation.Accounts.GroupExistsException">Thrown when the group name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.GroupCollection.CreateInternalGroupFromCarrier(Litium.Foundation.Carriers.GroupCarrier,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a new internal group from a carrier class.
            </summary>
            <param name="carrier">Group carrier.</param>
            <param name="token">Security token.</param>
            <returns>The new group.</returns>
            <exception cref="T:Litium.Foundation.Accounts.GroupExistsException">Thrown when the group name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.GroupCollection.CreateNovellGroup(System.String,System.Boolean,System.String,System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a new Novell group.
            </summary>
            <param name="entryPath">Entry path (example: "cn=sales,o=demo").</param>
            <param name="centralAdministration">Whether the account is to be handled via the central administration gui or not.</param>
            <param name="verifyLoginName">Login name used to verify group against the Novell Directory.</param>
            <param name="verifyPassword">Password used to verify group against the Novell Directory.</param>
            <param name="token">Security token.</param>
            <returns>The new group.</returns>
            <exception cref="T:Litium.Foundation.Accounts.EntryDoesNotExistInDirectoryException">Thrown when the group does not exist in the Novell Directory.</exception>
            <exception cref="T:Litium.Foundation.Accounts.GroupExistsException">Thrown when the group name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.GroupCollection.CreateNovellGroup(System.Guid,System.String,System.Boolean,System.String,System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a new Novell group.
            </summary>
            <param name="id">Group ID.</param>
            <param name="entryPath">Entry path (example: "cn=sales,o=demo").</param>
            <param name="centralAdministration">Whether the account is to be handled via the central administration gui or not.</param>
            <param name="verifyLoginName">Login name used to verify group against the Novell Directory.</param>
            <param name="verifyPassword">Password used to verify group against the Novell Directory.</param>
            <param name="token">Security token.</param>
            <returns>The new group.</returns>
            <exception cref="T:Litium.Foundation.Accounts.EntryDoesNotExistInDirectoryException">Thrown when the group does not exist in the Novell Directory.</exception>
            <exception cref="T:Litium.Foundation.Accounts.GroupExistsException">Thrown when the group name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.GroupCollection.CreateNovellGroupFromCarrier(Litium.Foundation.Carriers.GroupCarrier,System.String,System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a new Novell group from a carrier class.
            </summary>
            <param name="carrier">Group carrier.</param>
            <param name="token">Security token.</param>
            <param name="verifyLoginName">Login name used to verify group against the Novell Directory.</param>
            <param name="verifyPassword">Password used to verify group against the Novell Directory.</param>
            <returns>The new group.</returns>
            <exception cref="T:Litium.Foundation.Accounts.EntryDoesNotExistInDirectoryException">Thrown when the group does not exist in the Novell Directory.</exception>
            <exception cref="T:Litium.Foundation.Accounts.GroupExistsException">Thrown when the group name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.GroupCollection.DeleteAllGroups(Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes all groups in the solution.
            </summary>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.GroupCollection.GetAllGroupsAsCarriers(System.Boolean,System.Boolean)">
            <summary>
            Returns all groups as carriers.
            </summary>
            <param name="includeMembers">Whether to include groups members or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <returns>Returns all groups as carriers.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.GroupCollection.GetDeletedGroups(System.DateTime)">
            <summary>
            Returns info on all deleted group from (and including) a date time.
            </summary>
            <param name="fromTime">From date time.</param>
            <returns>An array of info carriers.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.GroupCollection.GetGroup(System.Guid)">
            <summary>
            Returns a group.
            </summary>
            <param name="groupID">ID of group to return.</param>
            <returns>The requested Group or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.GroupCollection.GetGroupFromName(System.String)">
            <summary>
            Returns a group given an group name.
            </summary>
            <param name="groupName">Name of group to return.</param>
            <returns>The requested Group or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.GroupCollection.GetGroupFromPath(System.String)">
            <summary>
            Returns a group given a path.
            </summary>
            <param name="path">Path.</param>
            <returns>The requested Group or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.GroupCollection.GetNewGroups(System.DateTime)">
            <summary>
            Returns all new groups from (and including) a date time.
            </summary>
            <param name="fromTime">From date time.</param>
            <returns>An array of group instances.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.GroupCollection.GetUpdatedGroups(System.DateTime)">
            <summary>
            Returns all updated groups from (and including) a date time.
            </summary>
            <param name="fromTime">From date time.</param>
            <returns>An array of group instances.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.GroupCollection.CreateActiveDirectoryGroupFromCarrier(Litium.Foundation.Carriers.GroupCarrier,System.String,System.String)">
            <summary>
            Creates a new Active Directory group from a carrier class.
            </summary>
            <param name="carrier">Group carrier.</param>
            <param name="verifyLoginName">Login name used to verify group against the Active Directory.</param>
            <param name="verifyPassword">Password used to verify group against the Active Directory.</param>
            <returns>The new group.</returns>
            <exception cref="T:Litium.Foundation.Accounts.EntryDoesNotExistInDirectoryException">Thrown when the group does not exist in the AD.</exception>
            <exception cref="T:Litium.Foundation.Accounts.GroupExistsException">Thrown when the group name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.GroupCollection.CreateInternalGroupFromCarrier(Litium.Foundation.Carriers.GroupCarrier)">
            <summary>
            Creates a new internal group from a carrier class.
            </summary>
            <param name="carrier">Group carrier.</param>
            <returns>The new group.</returns>
            <exception cref="T:Litium.Foundation.Accounts.GroupExistsException">Thrown when the group name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.GroupCollection.CreateNovellGroupFromCarrier(Litium.Foundation.Carriers.GroupCarrier,System.String,System.String)">
            <summary>
            Creates a new Novell group from a carrier class.
            </summary>
            <param name="carrier">Group carrier.</param>
            <param name="verifyLoginName">Login name used to verify group against the Novell Directory.</param>
            <param name="verifyPassword">Password used to verify group against the Novell Directory.</param>
            <returns>The new group.</returns>
            <exception cref="T:Litium.Foundation.Accounts.EntryDoesNotExistInDirectoryException">Thrown when the group does not exist in the Novell Directory.</exception>
            <exception cref="T:Litium.Foundation.Accounts.GroupExistsException">Thrown when the group name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.GroupCollection.GetGroupInstanceFromCarrier(Litium.Foundation.Carriers.GroupCarrier)">
            <summary>
            Returns a group instance from a group carrier.
            </summary>
            <param name="carrier">Carrier</param>
            <returns>A group instance from a group carrier.</returns>
        </member>
        <member name="P:Litium.Foundation.Accounts.GroupCollection.Count">
            <summary>
            Returns the number of groups in the solution.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.GroupCollection.Item(System.Guid)">
            <summary>
            Returns a group.
            </summary>
            <returns>The requested group.</returns>
        </member>
        <member name="P:Litium.Foundation.Accounts.GroupCollection.Item(System.String)">
            <summary>
            Returns a group given the group name.
            </summary>
            <returns>The requested group.</returns>
        </member>
        <member name="P:Litium.Foundation.Accounts.GroupCollection.GroupIDs">
            <summary>
            Returns all group IDs.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.GroupCollection.GroupIDsInCentralAdministration">
            <summary>
            Returns all group IDs which are handled in the central administration GUI.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.GroupCollection.GroupIDsNotInCentralAdministration">
            <summary>
            Returns all group IDs which are not handled in the central administration GUI.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Accounts.GroupDoesNotExistException">
            <summary>
            Thrown when the group does not exist or has been deleted.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Accounts.GroupDoesNotExistException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Accounts.GroupDoesNotExistException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.GroupDoesNotExistException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="M:Litium.Foundation.Accounts.GroupDoesNotExistException.#ctor(System.Guid)">
            <summary>
            Constructor.
            </summary>
            <param name="groupID">Group ID.</param>
        </member>
        <member name="P:Litium.Foundation.Accounts.GroupDoesNotExistException.GroupID">
            <summary>
            Group ID.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Accounts.GroupExistsException">
            <summary>
            Thrown when the group name already exists in the solution.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Accounts.GroupExistsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Accounts.GroupExistsException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Accounts.GroupExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Accounts.GroupExistsException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.GroupExistsException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="M:Litium.Foundation.Accounts.GroupExistsException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="groupName">Group name.</param>
        </member>
        <member name="P:Litium.Foundation.Accounts.GroupExistsException.GroupName">
            <summary>
            The group name.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Accounts.GroupMembershipCollection">
            <summary>
            A collection of group memberships.
            Enumerates over group IDs.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Accounts.GroupMembershipCollection.#ctor(System.Guid)">
            <summary>
            Constructor.
            </summary>
            <param name="userID">User ID.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.GroupMembershipCollection.CreateMembership(System.Guid,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a new membership.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.GroupMembershipCollection.DeleteAllMemberships(Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes all group memberships for the current user.
            </summary>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.GroupMembershipCollection.DeleteMembership(System.Guid,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Delete membership for the specified group
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.GroupMembershipCollection.IsMember(System.Guid)">
            <summary>
            Returns whether the current user is member in the specified group.
            </summary>
            <param name="groupID">Group ID.</param>
            <returns>True if membership exists, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.GroupMembershipCollection.IsMember(System.String)">
            <summary>
            Returns whether the current user is member in the specified group.
            </summary>
            <param name="groupName">Group name.</param>
            <returns>True if membership exists, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.GroupMembershipCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Litium.Foundation.Accounts.GroupMembershipCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Litium.Foundation.Accounts.GroupMembershipCollection.Item(System.Guid)">
            <summary>
            Returns whether the user is member in the specified group.
            </summary>
            <returns>True if the user is a member, otherwise false.</returns>
        </member>
        <member name="P:Litium.Foundation.Accounts.GroupMembershipCollection.Item(System.String)">
            <summary>
            Returns whether the user is member in the specified group.
            </summary>
            <returns>True if the user is a member, otherwise false.</returns>
        </member>
        <member name="P:Litium.Foundation.Accounts.GroupMembershipCollection.Count">
            <summary>
            Returns the number of groups the user is a member of.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Accounts.Internal.InternalGroup">
            <summary>
            Internal group.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Accounts.Internal.InternalGroup.#ctor(Litium.Foundation.Carriers.GroupCarrier)">
            <summary>
            Constructor.
            </summary>
            <param name="group">Group carrier.</param>
        </member>
        <member name="T:Litium.Foundation.Accounts.Internal.InternalUser">
            <summary>
            Internal user.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Accounts.Internal.InternalUser.#ctor(Litium.Foundation.Carriers.UserCarrier)">
            <summary>
            Constructor.
            </summary>
            <param name="user">User carrier.</param>
        </member>
        <member name="T:Litium.Foundation.Accounts.NovellEDirectory.NovellGroup">
            <summary>
            Novell E-Directory group.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Accounts.NovellEDirectory.NovellGroup.#ctor(Litium.Foundation.Carriers.GroupCarrier)">
            <summary>
            Constructor.
            </summary>
            <param name="group">Group carrier. Path = complete Novell Directory LDAP path (example: "LDAP://litium.se/CN=Domain Users,CN=Users,DC=litium,DC=se").</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.NovellEDirectory.NovellGroup.Sync(System.String,System.String)">
            <summary>
            Synchronizes the group with the Novell Directory:
            - Updates the corresponding Foundation group with the Novell display name.
            - If the Novell group no longer exists, the corresponding Foundation group is disabled.
            - Checks that all members registred in Foundation still exist and that they are 
            members of the group. If not, these users are removed from the memberships list.
            </summary>
            <param name="verifyLoginName">Login name used to verify group against the Novell Directory.</param>
            <param name="verifyPassword">Password used to verify group against the Novell Directory.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.NovellEDirectory.NovellGroup.Sync">
            <summary>
            Synchronizes the group with the Novell Directory:
            - Updates the corresponding Foundation group with the Novell display name.
            - If the Novell group no longer exists, the corresponding Foundation group is disabled.
            - Checks that all members registred in Foundation still exist and that they are 
            members of the group. If not, these users are removed from the memberships list.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Accounts.NovellEDirectory.NovellUser">
            <summary>
            Novell Directory user.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Accounts.NovellEDirectory.NovellUser.#ctor(Litium.Foundation.Carriers.UserCarrier)">
            <summary>
            Constructor.
            </summary>
            <param name="user">User carrier. LoginName = cn. Path = complete Novell Directory LDAP path (example: "LDAP://litium.se/CN=Domain Users,CN=Users,DC=litium,DC=se").</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.NovellEDirectory.NovellUser.Sync(System.String,System.String)">
            <summary>
            Synchronizes the user with the Novell Directory:
            - Updates the corresponding Foundation user with the Novell display name and email.
            - If the Novell user no longer exists, the corresponding Foundation user is disabled.
            - Checks that all members registred in Foundation still exist and that they are 
            members of the group. If not, these users are removed from the memberships list.
            </summary>
            <param name="verifyLoginName">Login name used to verify group against the Novell Directory.</param>
            <param name="verifyPassword">Password used to verify group against the Novell Directory.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.NovellEDirectory.NovellUser.Sync">
            <summary>
            Synchronizes the user with the Novell Directory:
            - Updates the corresponding Foundation user with the Novell display name and email.
            - If the Novell user no longer exists, the corresponding Foundation user is disabled.
            - Checks that all members registred in Foundation still exist and that they are 
            members of the group. If not, these users are removed from the memberships list.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Accounts.NovellEDirectory.NovellUser.SetDisplayName(System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Set display name not allowed on an Novell Directory user.
            </summary>
            <param name="displayName">Display name.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.NovellEDirectory.NovellUser.SetEmail(System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Set email not allowed on an Novell Directory user.
            </summary>
            <param name="email">Email.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.NovellEDirectory.NovellUser.SetPassword(System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Set password not allowed on an Novell Directory user.
            </summary>
            <param name="password">New password (not encrypted).</param>
            <param name="token">Security token.</param>
        </member>
        <member name="T:Litium.Foundation.Accounts.NovellEDirectory.NovellUtils">
            <summary>
            Novell Directory utilities.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Accounts.NovellEDirectory.NovellUtils.AuthenticateNovellUser(System.String,System.String,System.String)">
            <summary>
            Authenticates a Novell user.
            </summary>
            <param name="serverPath">LDAP server path (example: "jonkoping.office.se").</param>
            <param name="entryPath">Entry path (example: "cn=Stefan,ou=sale,o=demo").</param>
            <param name="password">User password (not encrypted).</param>
            <returns>true authentication succeded, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.NovellEDirectory.NovellUtils.EntryExists(System.String,System.String,System.String,System.String)">
            <summary>
            Returns whether an entry exists in LDAP.
            </summary>
            <param name="serverPath">LDAP server path (example: "jonkoping.office.se").</param>
            <param name="entryPath">Entry path (example: "cn=sales,o=demo").</param>
            <param name="verifyLoginName">Login name used to verify group against the Directory.</param>
            <param name="verifyPassword">Password used to verify group against the Directory.</param>
            <returns>True if group exists, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.NovellEDirectory.NovellUtils.GetDisplayName(System.String,System.String,System.String,System.String)">
            <summary>
            Returns the display name for a user or group.
            </summary>
            <param name="serverPath">LDAP server path (example: "jonkoping.office.se").</param>
            <param name="entryPath">Entry path (example: "CN=Domain Users,CN=Users,DC=litium,DC=se).</param>
            <param name="verifyLoginName">Login name used to connect against the Novell Directory.</param>
            <param name="verifyPassword">Password used to connect against the Novell Directory.</param>
            <returns>Display name or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.NovellEDirectory.NovellUtils.GetDisplayName(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Returns the display name for a user or group.
            </summary>
            <param name="serverPath">LDAP server path (example: "jonkoping.office.se").</param>
            <param name="entryPath">Entry path (example: "CN=Domain Users,CN=Users,DC=litium,DC=se).</param>
            <param name="displayNameProperty">Name of "Display name" property.</param>
            <param name="verifyLoginName">Login name used to connect against the Active Directory.</param>
            <param name="verifyPassword">Password used to connect against the Active Directory.</param>
            <returns>Display name or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.NovellEDirectory.NovellUtils.GetEmail(System.String,System.String,System.String,System.String)">
            <summary>
            Returns the email for a user.
            </summary>
            <param name="serverPath">LDAP server path (example: "jonkoping.office.se").</param>
            <param name="entryPath">Entry path (example: "CN=Domain Users,CN=Users,DC=litium,DC=se).</param>
            <param name="verifyLoginName">Login name used to connect against the Novell Directory.</param>
            <param name="verifyPassword">Password used to connect against the Novell Directory.</param>
            <returns>Email or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.NovellEDirectory.NovellUtils.GetEmail(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Returns the email for a user.
            </summary>
            <param name="serverPath">LDAP server path (example: "jonkoping.office.se").</param>
            <param name="entryPath">Entry path (example: "CN=Domain Users,CN=Users,DC=litium,DC=se).</param>
            <param name="emailProperty">Name of "email" property.</param>
            <param name="verifyLoginName">Login name used to connect against the Active Directory.</param>
            <param name="verifyPassword">Password used to connect against the Active Directory.</param>
            <returns>Email or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.NovellEDirectory.NovellUtils.GetEntryName(System.String,System.String,System.String,System.String)">
            <summary>
            Returns the CN name of an entry, not including "CN=" (not display name).
            </summary>
            <param name="serverPath">LDAP server path (example: "jonkoping.office.se").</param>
            <param name="entryPath">Entry path (example: "CN=Domain Users,CN=Users,DC=litium,DC=se).</param>
            <param name="verifyLoginName">Login name used to connect against the Directory.</param>
            <param name="verifyPassword">Password used to connect against the Directory.</param>
            <returns>The namn of the entry.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.NovellEDirectory.NovellUtils.GetGroupMembershipIDs(System.String,System.String,System.String,System.String)">
            <summary>
            Returns the ID of all registred Novell-groups in which the Novell-user is a member.
            </summary>
            <param name="serverPath">LDAP server path (example: "jonkoping.office.se").</param>
            <param name="entryPath">Entry path (example: "CN=Domain Users,CN=Users,DC=litium,DC=se).</param>
            <param name="verifyLoginName">Login name used to connect against the Novell Directory.</param>
            <param name="verifyPassword">Password used to connect against the Novell Directory.</param>
            <returns>The ID of all groups in which the user is a member.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.NovellEDirectory.NovellUtils.GetLoginName(System.String,System.String,System.String,System.String)">
            <summary>
            Returns the login name property of an entry.
            </summary>
            <param name="serverPath">LDAP server path (example: "jonkoping.office.se").</param>
            <param name="entryPath">Entry path (example: "CN=Domain Users,CN=Users,DC=litium,DC=se).</param>
            <param name="verifyLoginName">Login name used to connect against the Directory.</param>
            <param name="verifyPassword">Password used to connect against the Directory.</param>
            <returns>The login name of the entry.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.NovellEDirectory.NovellUtils.GetMemberIDs(System.String,System.String,System.String,System.String)">
            <summary>
            Returns all member IDs in a group, checked against the Novell Directory.
            </summary>
            <param name="serverPath">LDAP server path (example: "jonkoping.office.se").</param>
            <param name="entryPath">Entry path (example: "CN=Domain Users,CN=Users,DC=litium,DC=se).</param>
            <param name="verifyLoginName">Login name used to connect against the Novell Directory.</param>
            <param name="verifyPassword">Password used to connect against the Novell Directory.</param>
            <returns>All member IDs in a group.</returns>
        </member>
        <member name="T:Litium.Foundation.Accounts.UserCollection">
            <summary>
            A collection of all users. 
            Enumerates over User instances.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserCollection.GetEnumerator">
            <summary>
            Returns an Enumerator of all the users in the collection.
            Enumerates over User instances.
            </summary>
            <returns>The Enumerator of the collection.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserCollection.CreateActiveDirectoryUser(System.String,System.String,System.Boolean,System.String,System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a new Active Directory user.
            </summary>
            <param name="loginName">Domain and login name ("DOMAIN\LOGIN_NAME" or "LOGIN_NAME@DOMAIN").</param>
            <param name="entryPath">Entry path (example: "cn=admin,o=demo").</param>
            <param name="centralAdministration">Whether the account is to be handled via the central administration gui or not.</param>
            <param name="verifyLoginName">Login name used to verify user against the Active Directory.</param>
            <param name="verifyPassword">Password used to verify user against the Active Directory.</param>
            <param name="token">Security token.</param>
            <returns>The new user.</returns>
            <exception cref="T:Litium.Foundation.Accounts.EntryDoesNotExistInDirectoryException">Thrown when the user does not exist in the AD.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserExistsException">Thrown when the user login name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserCollection.CreateActiveDirectoryUser(System.String,System.String,System.Boolean,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a new Active Directory user.
            </summary>
            <param name="loginName">Domain and login name ("DOMAIN\LOGIN_NAME" or "LOGIN_NAME@DOMAIN").</param>
            <param name="entryPath">Entry path (example: "cn=admin,o=demo").</param>
            <param name="centralAdministration">Whether the account is to be handled via the central administration gui or not.</param>
            <param name="token">Security token.</param>
            <returns>The new user.</returns>
            <exception cref="T:Litium.Foundation.Accounts.EntryDoesNotExistInDirectoryException">Thrown when the user does not exist in the AD.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserExistsException">Thrown when the user login name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserCollection.CreateActiveDirectoryUser(System.Guid,System.String,System.String,System.Boolean,System.String,System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a new Active Directory user.
            </summary>
            <param name="id">User ID.</param>
            <param name="loginName">Domain and login name ("DOMAIN\LOGIN_NAME" or "LOGIN_NAME@DOMAIN").</param>
            <param name="entryPath">Entry path (example: "cn=admin,o=demo").</param>
            <param name="centralAdministration">Whether the account is to be handled via the central administration gui or not.</param>
            <param name="verifyLoginName">Login name used to verify user against the Active Directory.</param>
            <param name="verifyPassword">Password used to verify user against the Active Directory.</param>
            <param name="token">Security token.</param>
            <returns>The new user.</returns>
            <exception cref="T:Litium.Foundation.Accounts.EntryDoesNotExistInDirectoryException">Thrown when the user does not exist in the AD.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserExistsException">Thrown when the user login name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserCollection.CreateActiveDirectoryUser(System.Guid,System.String,System.String,System.Boolean,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a new Active Directory user.
            </summary>
            <param name="id">User ID.</param>
            <param name="loginName">Domain and login name ("DOMAIN\LOGIN_NAME" or "LOGIN_NAME@DOMAIN").</param>
            <param name="entryPath">Entry path (example: "cn=admin,o=demo").</param>
            <param name="centralAdministration">Whether the account is to be handled via the central administration gui or not.</param>
            <param name="token">Security token.</param>
            <returns>The new user.</returns>
            <exception cref="T:Litium.Foundation.Accounts.EntryDoesNotExistInDirectoryException">Thrown when the user does not exist in the AD.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserExistsException">Thrown when the user login name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserCollection.CreateActiveDirectoryUser(System.String,System.Boolean,System.String,System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a new Active Directory user.
            </summary>
            <param name="loginName">Domain and login name ("DOMAIN\LOGIN_NAME" or "LOGIN_NAME@DOMAIN").</param>
            <param name="centralAdministration">Whether the account is to be handled via the central administration gui or not.</param>
            <param name="verifyLoginName">Login name used to verify user against the Active Directory.</param>
            <param name="verifyPassword">Password used to verify user against the Active Directory.</param>
            <param name="token">Security token.</param>
            <returns>The new user.</returns>
            <exception cref="T:Litium.Foundation.Accounts.EntryDoesNotExistInDirectoryException">Thrown when the user does not exist in the AD.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserExistsException">Thrown when the user login name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserCollection.CreateActiveDirectoryUser(System.Guid,System.String,System.Boolean,System.String,System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a new Active Directory user.
            </summary>
            <param name="id">User ID.</param>
            <param name="loginName">Domain and login name ("DOMAIN\LOGIN_NAME" or "LOGIN_NAME@DOMAIN").</param>
            <param name="centralAdministration">Whether the account is to be handled via the central administration gui or not.</param>
            <param name="verifyLoginName">Login name used to verify user against the Active Directory.</param>
            <param name="verifyPassword">Password used to verify user against the Active Directory.</param>
            <param name="token">Security token.</param>
            <returns>The new user.</returns>
            <exception cref="T:Litium.Foundation.Accounts.EntryDoesNotExistInDirectoryException">Thrown when the user does not exist in the AD.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserExistsException">Thrown when the user login name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserCollection.CreateActiveDirectoryUser(System.Guid,System.String,System.Boolean,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a new Active Directory user.
            </summary>
            <param name="id">User ID.</param>
            <param name="loginName">Domain and login name ("DOMAIN\LOGIN_NAME" or "LOGIN_NAME@DOMAIN").</param>
            <param name="centralAdministration">Whether the account is to be handled via the central administration gui or not.</param>
            <param name="token">Security token.</param>
            <returns>The new user.</returns>
            <exception cref="T:Litium.Foundation.Accounts.EntryDoesNotExistInDirectoryException">Thrown when the user does not exist in the AD.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserExistsException">Thrown when the user login name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserCollection.CreateActiveDirectoryUserFromCarrier(Litium.Foundation.Carriers.UserCarrier,System.String,System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a new Active Directory user from a carrier class.
            </summary>
            <param name="carrier">User carrier.</param>
            <param name="verifyLoginName">Login name used to verify user against the Active Directory.</param>
            <param name="verifyPassword">Password used to verify user against the Active Directory.</param>
            <param name="token">Security token.</param>
            <returns>The new user.</returns>
            <exception cref="T:Litium.Foundation.Accounts.EntryDoesNotExistInDirectoryException">Thrown when the user does not exist in the AD.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserExistsException">Thrown when the user login name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserCollection.CreateActiveDirectoryUserFromCarrier(Litium.Foundation.Carriers.UserCarrier,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a new Active Directory user from a carrier class.
            </summary>
            <param name="carrier">User carrier.</param>
            <param name="token">Security token.</param>
            <returns>The new user.</returns>
            <exception cref="T:Litium.Foundation.Accounts.EntryDoesNotExistInDirectoryException">Thrown when the user does not exist in the AD.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserExistsException">Thrown when the user login name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserCollection.CreateInternalUser(System.String,System.String,System.String,System.String,System.Boolean,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a new internal user.
            </summary>
            <param name="loginName">User login name.</param>
            <param name="password">User password (not encrypted).</param>
            <param name="displayName">User display name.</param>
            <param name="email">User email.</param>
            <param name="centralAdministration">Whether the account is to be handled via the central administration gui or not.</param>
            <param name="token">Security token.</param>
            <returns>The new user.</returns>
            <exception cref="T:Litium.Foundation.Accounts.UserExistsException">Thrown when the user login name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserCollection.CreateInternalUser(System.String,System.String,System.String,System.String,System.Boolean,Litium.Foundation.Accounts.UserStatus,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a new internal user.
            </summary>
            <param name="loginName">User login name.</param>
            <param name="password">User password (not encrypted).</param>
            <param name="displayName">User display name.</param>
            <param name="email">User email.</param>
            <param name="centralAdministration">Whether the account is to be handled via the central administration gui or not.</param>
            <param name="status">User status.</param>
            <param name="token">Security token.</param>
            <returns>The new user.</returns>
            <exception cref="T:Litium.Foundation.Accounts.UserExistsException">Thrown when the user login name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserCollection.CreateInternalUser(System.Guid,System.String,System.String,System.String,System.String,System.Boolean,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a new internal user.
            </summary>
            <param name="id">User ID.</param>
            <param name="loginName">User login name.</param>
            <param name="password">User password (not encrypted).</param>
            <param name="displayName">User display name.</param>
            <param name="email">User email.</param>
            <param name="centralAdministration">Whether the account is to be handled via the central administration gui or not.</param>
            <param name="token">Security token.</param>
            <returns>The new user.</returns>
            <exception cref="T:Litium.Foundation.Accounts.UserExistsException">Thrown when the user login name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserCollection.CreateInternalUser(System.Guid,System.String,System.String,System.String,System.String,System.Boolean,Litium.Foundation.Accounts.UserStatus,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a new internal user.
            </summary>
            <param name="id">User ID.</param>
            <param name="loginName">User login name.</param>
            <param name="password">User password (not encrypted).</param>
            <param name="displayName">User display name.</param>
            <param name="email">User email.</param>
            <param name="centralAdministration">Whether the account is to be handled via the central administration gui or not.</param>
            <param name="status">User status.</param>
            <param name="token">Security token.</param>
            <returns>The new user.</returns>
            <exception cref="T:Litium.Foundation.Accounts.UserExistsException">Thrown when the user login name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserCollection.CreateInternalUserFromCarrier(Litium.Foundation.Carriers.UserCarrier,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a new internal user from a carrier class (with the encrypted password included in the carrier).
            </summary>
            <param name="carrier">User carrier.</param>
            <param name="token">Security token.</param>
            <returns>The new user.</returns>
            <exception cref="T:Litium.Foundation.Accounts.UserExistsException">Thrown when the user login name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserCollection.CreateInternalUserFromCarrier(Litium.Foundation.Carriers.UserCarrier,System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a new internal user from a carrier class, with the password from the supplied password parameter (not from the carrier).
            </summary>
            <param name="carrier">User carrier.</param>
            <param name="password">User password (not encrypted).</param>
            <param name="token">Security token.</param>
            <returns>The new user.</returns>
            <exception cref="T:Litium.Foundation.Accounts.UserExistsException">Thrown when the user login name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserCollection.CreateNovellUser(System.String,System.Boolean,System.String,System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a new Novell Directory user.
            </summary>
            <param name="entryPath">Entry path (example: "cn=admin,o=demo").</param>
            <param name="centralAdministration">Whether the account is to be handled via the central administration gui or not.</param>
            <param name="verifyLoginName">Login name used to verify user against the Novell Directory.</param>
            <param name="verifyPassword">Password used to verify user against the Novell Directory.</param>
            <param name="token">Security token.</param>
            <returns>The new user.</returns>
            <exception cref="T:Litium.Foundation.Accounts.EntryDoesNotExistInDirectoryException">Thrown when the user does not exist in the Novell Directory.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserExistsException">Thrown when the user login name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserCollection.CreateNovellUser(System.Guid,System.String,System.Boolean,System.String,System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a new Novell Directory user.
            </summary>
            <param name="id">User ID.</param>
            <param name="entryPath">Entry path (example: "cn=admin,o=demo").</param>
            <param name="centralAdministration">Whether the account is to be handled via the central administration gui or not.</param>
            <param name="verifyLoginName">Login name used to verify user against the Novell Directory.</param>
            <param name="verifyPassword">Password used to verify user against the Novell Directory.</param>
            <param name="token">Security token.</param>
            <returns>The new user.</returns>
            <exception cref="T:Litium.Foundation.Accounts.EntryDoesNotExistInDirectoryException">Thrown when the user does not exist in the Novell Directory.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserExistsException">Thrown when the user login name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserCollection.CreateNovellUserFromCarrier(Litium.Foundation.Carriers.UserCarrier,System.String,System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a new Novell Directory user from a carrier class.
            </summary>
            <param name="carrier">User carrier.</param>
            <param name="verifyLoginName">Login name used to verify user against the Novell Directory.</param>
            <param name="verifyPassword">Password used to verify user against the Novell Directory.</param>
            <param name="token">Security token.</param>
            <returns>The new user.</returns>
            <exception cref="T:Litium.Foundation.Accounts.EntryDoesNotExistInDirectoryException">Thrown when the user does not exist in the Novell Directory.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserExistsException">Thrown when the user login name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserCollection.CreateUsersFromCarriers(Litium.Foundation.Carriers.UserCarrier[],Litium.Foundation.Security.SecurityToken)">
            <summary>
            Create users from carriers.
            </summary>
            <param name="carriers">Array of carriers.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.Accounts.UserExistsException">Thrown when the user login name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserCollection.DeleteAllUsers(Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes all users in the solution (except the System and Anonymous user).
            </summary>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserCollection.GetAllUsersAsCarriers(System.Boolean,System.Boolean,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Returns all users as carriers.
            </summary>
            <param name="includeGroups">Whether to include user groups or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="token">Security token.</param>
            <returns>Returns all users as carriers.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserCollection.GetAllUsersAsDataset(Litium.Foundation.Security.SecurityToken)">
            <summary>
            Returns all users as a data set.
            </summary>
            <param name="token">Security token.</param>
            <returns>Returns all users as a data set.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserCollection.GetAllUsersAsDataset(System.Int32,System.Int32,System.String,System.Boolean,System.Boolean,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Returns all users as a data set.
            </summary>
            <param name="pageSize">Page size.</param>
            <param name="requestedPage">Requested page.</param>
            <param name="sortColumn">Sort column.</param>
            <param name="sortAscending">Sort ascending.</param>
            <param name="centralAdministration">Central administration.</param>
            <param name="token">Security token.</param>
            <returns>Returns all users as a data set.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserCollection.GetAllUsersAsDataset(System.Int32,System.Int32,System.String,System.Boolean,System.Boolean,System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Returns all users as a data set.
            </summary>
            <param name="pageSize">Page size.</param>
            <param name="requestedPage">Requested page.</param>
            <param name="sortColumn">Sort column.</param>
            <param name="sortAscending">Sort ascending.</param>
            <param name="centralAdministration">Central administration.</param>
            <param name="searchCriteria">Search criteria.</param>
            <param name="token">Security token.</param>
            <returns>Returns all users as a data set.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserCollection.GetAllUsersAsDataset(System.Guid,System.Int32,System.Int32,System.String,System.Boolean,System.Boolean,System.String,System.Boolean,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Returns all users as a data set.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="pageSize">Page size.</param>
            <param name="requestedPage">Requested page.</param>
            <param name="sortColumn">Sort column.</param>
            <param name="sortAscending">Sort ascending.</param>
            <param name="centralAdministration">Central administration.</param>
            <param name="searchCriteria">Search criteria.</param>
            <param name="searchNameOnly">Whether to search name data field only.</param>
            <param name="token">Security token.</param>
            <returns>Returns all users as a data set.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserCollection.GetDeletedUsers(System.DateTime)">
            <summary>
            Returns info on all deleted user from (and including) a date time.
            </summary>
            <param name="fromTime">From date time.</param>
            <returns>An array of info carriers.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserCollection.GetNewUsers(System.DateTime)">
            <summary>
            Returns all new users from (and including) a date time.
            </summary>
            <param name="fromTime">From date time.</param>
            <returns>An array of user instances.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserCollection.GetUpdatedUsers(System.DateTime)">
            <summary>
            Returns all updated users from (and including) a date time.
            </summary>
            <param name="fromTime">From date time.</param>
            <returns>An array of user instances.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserCollection.GetUser(System.Guid)">
            <summary>
            Returns a user.
            </summary>
            <param name="userID">ID of user to return.</param>
            <returns>The requested User or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserCollection.GetUserFromEmail(System.String)">
            <summary>
            Returns a user given a e-mail.
            </summary>
            <param name="email">E-mail of user to return.</param>
            <returns>The requested User or null if none was found.</returns> 
        </member>
        <member name="M:Litium.Foundation.Accounts.UserCollection.GetUsersFromEmail(System.String)">
            <summary>
            Returns all user given a e-mail.
            </summary>
            <param name="email">E-mail of users to return.</param>
            <returns>A list of users, empty list if none found.</returns> 
        </member>
        <member name="M:Litium.Foundation.Accounts.UserCollection.GetUserFromLoginName(System.String)">
            <summary>
            Returns a user given a user login name.
            </summary>
            <param name="loginName">Login name of user to return.</param>
            <returns>The requested User or null if none was found.</returns> 
        </member>
        <member name="M:Litium.Foundation.Accounts.UserCollection.GetUserFromPath(System.String)">
            <summary>
            Returns a user given a user path.
            </summary>
            <param name="path">Path.</param>
            <returns>The requested User or null if none was found.</returns> 
        </member>
        <member name="M:Litium.Foundation.Accounts.UserCollection.CreateActiveDirectoryUserFromCarrier(Litium.Foundation.Carriers.UserCarrier)">
            <summary>
            Creates a new Active Directory user from a carrier class.
            </summary>
            <param name="carrier">User carrier.</param>
            <returns>The new user.</returns>
            <exception cref="T:Litium.Foundation.Accounts.EntryDoesNotExistInDirectoryException">Thrown when the user does not exist in the AD.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserExistsException">Thrown when the user login name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserCollection.CreateInternalUserFromCarrier(Litium.Foundation.Carriers.UserCarrier)">
            <summary>
            Creates a new internal user from a carrier class.
            </summary>
            <param name="carrier">User carrier.</param>
            <returns>The new user.</returns>
            <exception cref="T:Litium.Foundation.Accounts.UserExistsException">Thrown when the user login name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserCollection.CreateNovellUserFromCarrier(Litium.Foundation.Carriers.UserCarrier,System.String,System.String)">
            <summary>
            Creates a new Novell Directory user from a carrier class.
            </summary>
            <param name="carrier">User carrier.</param>
            <param name="verifyLoginName">Login name used to verify user against the Active Directory.</param>
            <param name="verifyPassword">Password used to verify user against the Active Directory.</param>
            <returns>The new user.</returns>
            <exception cref="T:Litium.Foundation.Accounts.EntryDoesNotExistInDirectoryException">Thrown when the user does not exist in the Novell Directory.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserExistsException">Thrown when the user login name already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserCollection.GetUserInstanceFromCarrier(Litium.Foundation.Carriers.UserCarrier)">
            <summary>
            Returns a user instance from a user carrier.
            </summary>
            <param name="carrier">Carrier</param>
            <returns>A user instance from a user carrier.</returns>
        </member>
        <member name="P:Litium.Foundation.Accounts.UserCollection.AnonymousUser">
            <summary>
            Returns the anonymous user.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.UserCollection.Count">
            <summary>
            Returns the number of users in the solution.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.UserCollection.Item(System.Guid)">
            <summary>
            Returns a user.
            </summary>
            <returns>The requested user.</returns>
        </member>
        <member name="P:Litium.Foundation.Accounts.UserCollection.Item(System.String)">
            <summary>
            Returns a user given the login name.
            </summary>
            <returns>The requested user.</returns>
        </member>
        <member name="P:Litium.Foundation.Accounts.UserCollection.UserIDs">
            <summary>
            Returns all user IDs.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.UserCollection.UserIDsInCentralAdministration">
            <summary>
            Returns all user IDs which are handled in the central administration GUI.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.UserCollection.UserIDsNotInCentralAdministration">
            <summary>
            Returns all user IDs which are not handled in the central administration GUI.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Accounts.UserCollection.SystemUser">
            <summary>
            Returns the anonymous user.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Accounts.UserDoesNotExistException">
            <summary>
            Thrown when a user does not exist or has been deleted.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserDoesNotExistException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Accounts.UserDoesNotExistException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserDoesNotExistException.#ctor(System.Guid)">
            <summary>
            Constructor.
            </summary>
            <param name="userID">User ID.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserDoesNotExistException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Accounts.UserDoesNotExistException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserDoesNotExistException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="P:Litium.Foundation.Accounts.UserDoesNotExistException.UserID">
            <summary>
            User ID.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Accounts.UserExistsException">
            <summary>
            Thrown when trying to create a user with a login name which already exists in the solution.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserExistsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Accounts.UserExistsException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserExistsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Accounts.UserExistsException"/> class.
            </summary>
            <param name="loginName">Name of the login.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Accounts.UserExistsException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserExistsException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="P:Litium.Foundation.Accounts.UserExistsException.LoginName">
            <summary>
            The user's login name.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Accounts.UserMembersCollection">
            <summary>
            A collection of user members.
            Enumerates over user IDs.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserMembersCollection.#ctor(System.Guid)">
            <summary>
            Constructor.
            </summary>
            <param name="groupID">Group ID.</param>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserMembersCollection.CreateMembership(System.Guid,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a new membership.
            </summary>
            <param name="userID">User ID.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserMembersCollection.DeleteAllMemberships(Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes all user memberships for the current group.
            </summary>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserMembersCollection.DeleteMembership(System.Guid,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Delete membership for the specified group.
            </summary>
            <param name="userID">User ID.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.Accounts.GroupDoesNotExistException">Thrown when the group does not exist or has been deleted.</exception>
            <exception cref="T:Litium.Foundation.Accounts.UserDoesNotExistException">Thrown when the user does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserMembersCollection.GetEnumerator">
            <summary>
            Returns an Enumerator of all the user ids in the collection.
            </summary>
            <returns>The Enumerator of the collection.</returns>
        </member>
        <member name="M:Litium.Foundation.Accounts.UserMembersCollection.IsMember(System.Guid)">
            <summary>
            Returns whether the specified user is member of the current group.
            </summary>
            <param name="userID">User ID.</param>
            <returns>True if membership exists, otherwise false.</returns>
        </member>
        <member name="P:Litium.Foundation.Accounts.UserMembersCollection.Item(System.Guid)">
            <summary>
            Returns whether the user is a member in the specified group.
            </summary>
            <returns>True if the user is a member, otherwise false.</returns>
        </member>
        <member name="P:Litium.Foundation.Accounts.UserMembersCollection.Count">
            <summary>
            Returns the number of members the group.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.CustomPermissionTypeCarrier">
            <summary>
            The CustomPermissionTypeCarrier describes a custom permission type.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.PermissionTypeCarrier">
            <summary>
            PermissionTypeCarrier is an abstract base class for solution, module and custom permission types.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.PermissionTypeCarrier.ATTRIBUTE_ID">
            <summary>
            ID attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.PermissionTypeCarrier.ATTRIBUTE_NAME">
            <summary>
            Name attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.PermissionTypeCarrier.m_ID">
            <summary>
            ID
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.PermissionTypeCarrier.m_name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.PermissionTypeCarrier.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.PermissionTypeCarrier.GetAsXml">
            <summary>
            Returns the carrier as an XML document
            </summary>
            <returns>The requested XML document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.PermissionTypeCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Load from xml element
            </summary>
            <param name="xmlDoc">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.PermissionTypeCarrier.GetAsXmlElement(System.Xml.XmlDocument,System.String)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document
            </summary>
            <param name="xmlDoc">XML document.</param>
            <param name="elementName">Element name.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.PermissionTypeCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.PermissionTypeCarrier.SetValues(System.Int32,System.String)">
            <summary>
            Set carrier values
            </summary>
            <param name="ID">Permission type ID.</param>
            <param name="name">Permission name.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.PermissionTypeCarrier.ID">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.PermissionTypeCarrier.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.CustomPermissionTypeCarrier.ATTRIBUTE_MODULE_ID">
            <summary>
            XML Constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.CustomPermissionTypeCarrier.ELEMENT_NAME">
            <summary>
            XML Constant.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.CustomPermissionTypeCarrier.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.CustomPermissionTypeCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.CustomPermissionTypeCarrier.#ctor(System.Int32,System.String,System.Guid)">
            <summary>
            Constructor
            </summary>
            <param name="id">Permission type ID.</param>
            <param name="name">Permission type name.</param>
            <param name="moduleID">Module ID.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.CustomPermissionTypeCarrier.Clone">
            <summary>
            Returns a clone of the carrier
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.CustomPermissionTypeCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.CustomPermissionTypeCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier ax an XML element in the specified xml document.
            Does not insert the element into the XML document
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml element.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.CustomPermissionTypeCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.CustomPermissionTypeCarrier.SetValues(System.Int32,System.String,System.Guid)">
            <summary>
            Set carrier values
            </summary>
            <param name="id">Permission type ID.</param>
            <param name="name">Permission type name.</param>
            <param name="moduleID">Module ID.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.CustomPermissionTypeCarrier.ModuleID">
            <summary>
            Module ID
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.CustomPermissionTypeCarrier.PermissionType">
            <summary>
            Permission type
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.GroupCreatedEventCarrier">
            <summary>
            GroupCreatedEventCarrier represents a group created event.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.GroupEventCarrier">
            <summary>
            GroupEventCarrier represents a group event.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.GroupEventCarrier.ATTRIBUTE_GROUP_ID">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupEventCarrier.GetAsXmlElement(System.Xml.XmlDocument,System.String)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <param name="elementName">Element name.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupEventCarrier.SetValues(System.Int64,System.DateTime,System.Guid)">
            <summary>
            Set carrier values.
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Time stamp.</param>
            <param name="groupID">Group ID.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.GroupEventCarrier.GroupID">
            <summary>
            Group ID.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.GroupCreatedEventCarrier.ELEMENT_NAME">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupCreatedEventCarrier.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupCreatedEventCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor.
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupCreatedEventCarrier.#ctor(System.Int64,System.DateTime,System.Guid)">
            <summary>
            Constructor.
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
            <param name="groupID">Group ID.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupCreatedEventCarrier.Clone">
            <summary>
            Returns a clone of the carrier.
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupCreatedEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupCreatedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupCreatedEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.GroupCreatedEventCarrier.EventName">
            <summary>
            Returns the event name.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.GroupCustomPermissionCreatedEventCarrier">
            <summary>
            GroupCustomPermissionCreatedEventCarrier.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.PermissionEventCarrier">
            <summary>
            PermissionEventCarrier represents a permission event.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.PermissionEventCarrier.ATTRIBUTE_PERMISSION_TYPE">
            <summary>
            Permission type attribute name
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.PermissionEventCarrier.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.PermissionEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.PermissionEventCarrier.GetAsXmlElement(System.Xml.XmlDocument,System.String)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <param name="elementName">Element name.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.PermissionEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.PermissionEventCarrier.SetValues(System.Int64,System.DateTime,System.Int32)">
            <summary>
            Set carrier values.
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
            <param name="permissionType">Permission type.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.PermissionEventCarrier.PermissionType">
            <summary>
            Permission type.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.GroupCustomPermissionCreatedEventCarrier.ATTRIBUTE_GROUP_ID">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.GroupCustomPermissionCreatedEventCarrier.ATTRIBUTE_KEY">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.GroupCustomPermissionCreatedEventCarrier.ATTRIBUTE_MODULE_ID">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.GroupCustomPermissionCreatedEventCarrier.ELEMENT_NAME">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupCustomPermissionCreatedEventCarrier.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupCustomPermissionCreatedEventCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupCustomPermissionCreatedEventCarrier.#ctor(System.Int64,System.DateTime,System.Guid,System.Guid,System.Int32,System.Guid)">
            <summary>
            Constructor
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="key">Permission key.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupCustomPermissionCreatedEventCarrier.Clone">
            <summary>
            Returns a clone of the carrier.
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupCustomPermissionCreatedEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupCustomPermissionCreatedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupCustomPermissionCreatedEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupCustomPermissionCreatedEventCarrier.SetValues(System.Int64,System.DateTime,System.Guid,System.Guid,System.Int32,System.Guid)">
            <summary>
            Set carrier values.
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="key">Permission key.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.GroupCustomPermissionCreatedEventCarrier.EventName">
            <summary>
            Returns the event name.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.GroupCustomPermissionCreatedEventCarrier.GroupID">
            <summary>
            Group ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.GroupCustomPermissionCreatedEventCarrier.Key">
            <summary>
            Permission key.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.GroupCustomPermissionCreatedEventCarrier.ModuleID">
            <summary>
            Module ID.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.GroupCustomPermissionDeletedEventCarrier">
            <summary>
            GroupCustomPermissionDeletedEventCarrier.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.GroupCustomPermissionDeletedEventCarrier.ATTRIBUTE_GROUP_ID">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.GroupCustomPermissionDeletedEventCarrier.ATTRIBUTE_KEY">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.GroupCustomPermissionDeletedEventCarrier.ATTRIBUTE_MODULE_ID">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.GroupCustomPermissionDeletedEventCarrier.ELEMENT_NAME">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupCustomPermissionDeletedEventCarrier.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupCustomPermissionDeletedEventCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupCustomPermissionDeletedEventCarrier.#ctor(System.Int64,System.DateTime,System.Guid,System.Guid,System.Int32,System.Guid)">
            <summary>
            Constructor.
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="key">Permission key.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupCustomPermissionDeletedEventCarrier.Clone">
            <summary>
            Returns a clone of the carrier.
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupCustomPermissionDeletedEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupCustomPermissionDeletedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupCustomPermissionDeletedEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupCustomPermissionDeletedEventCarrier.SetValues(System.Int64,System.DateTime,System.Guid,System.Guid,System.Int32,System.Guid)">
            <summary>
            Set carrier values.
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="key">Permission key.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.GroupCustomPermissionDeletedEventCarrier.EventName">
            <summary>
            Returns the event name.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.GroupCustomPermissionDeletedEventCarrier.GroupID">
            <summary>
            Group ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.GroupCustomPermissionDeletedEventCarrier.Key">
            <summary>
            Permission key.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.GroupCustomPermissionDeletedEventCarrier.ModuleID">
            <summary>
            Module ID.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.GroupDeletedEventCarrier">
            <summary>
            GroupDeletedEventCarrier represents a group deleted event.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.GroupDeletedEventCarrier.ELEMENT_NAME">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupDeletedEventCarrier.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupDeletedEventCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupDeletedEventCarrier.#ctor(System.Int64,System.DateTime,System.Guid)">
            <summary>
            Constructor
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
            <param name="groupID">Group ID.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupDeletedEventCarrier.Clone">
            <summary>
            Returns a clone of the carrier
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupDeletedEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupDeletedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupDeletedEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.GroupDeletedEventCarrier.EventName">
            <summary>
            Returns the event name
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.GroupModulePermissionCreatedEventCarrier">
            <summary>
            GroupModulePermissionCreatedEventCarrier.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.GroupModulePermissionCreatedEventCarrier.ATTRIBUTE_GROUP_ID">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.GroupModulePermissionCreatedEventCarrier.ATTRIBUTE_MODULE_ID">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.GroupModulePermissionCreatedEventCarrier.ELEMENT_NAME">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupModulePermissionCreatedEventCarrier.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupModulePermissionCreatedEventCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor.
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupModulePermissionCreatedEventCarrier.#ctor(System.Int64,System.DateTime,System.Guid,System.Guid,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupModulePermissionCreatedEventCarrier.Clone">
            <summary>
            Returns a clone of the carrier.
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupModulePermissionCreatedEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupModulePermissionCreatedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupModulePermissionCreatedEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupModulePermissionCreatedEventCarrier.SetValues(System.Int64,System.DateTime,System.Guid,System.Guid,System.Int32)">
            <summary>
            Set carrier values.
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.GroupModulePermissionCreatedEventCarrier.EventName">
            <summary>
            Returns the event name.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.GroupModulePermissionCreatedEventCarrier.GroupID">
            <summary>
            Group ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.GroupModulePermissionCreatedEventCarrier.ModuleID">
            <summary>
            Module ID.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.GroupModulePermissionDeletedEventCarrier">
            <summary>
            GroupModulePermissionDeletedEventCarrier.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.GroupModulePermissionDeletedEventCarrier.ATTRIBUTE_GROUP_ID">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.GroupModulePermissionDeletedEventCarrier.ATTRIBUTE_MODULE_ID">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.GroupModulePermissionDeletedEventCarrier.ELEMENT_NAME">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupModulePermissionDeletedEventCarrier.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupModulePermissionDeletedEventCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor.
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupModulePermissionDeletedEventCarrier.#ctor(System.Int64,System.DateTime,System.Guid,System.Guid,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupModulePermissionDeletedEventCarrier.Clone">
            <summary>
            Returns a clone of the carrier.
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupModulePermissionDeletedEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupModulePermissionDeletedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupModulePermissionDeletedEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupModulePermissionDeletedEventCarrier.SetValues(System.Int64,System.DateTime,System.Guid,System.Guid,System.Int32)">
            <summary>
            Set carrier values.
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.GroupModulePermissionDeletedEventCarrier.EventName">
            <summary>
            Returns the event name.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.GroupModulePermissionDeletedEventCarrier.GroupID">
            <summary>
            Group ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.GroupModulePermissionDeletedEventCarrier.ModuleID">
            <summary>
            Module ID.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.GroupSolutionPermissionCreatedEventCarrier">
            <summary>
            GroupSolutionPermissionCreatedEventCarrier.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.GroupSolutionPermissionCreatedEventCarrier.ATTRIBUTE_GROUP_ID">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.GroupSolutionPermissionCreatedEventCarrier.ELEMENT_NAME">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupSolutionPermissionCreatedEventCarrier.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupSolutionPermissionCreatedEventCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor.
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupSolutionPermissionCreatedEventCarrier.#ctor(System.Int64,System.DateTime,System.Guid,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
            <param name="groupID">Group ID.</param>
            <param name="permissionType">Permission type.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupSolutionPermissionCreatedEventCarrier.Clone">
            <summary>
            Returns a clone of the carrier.
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupSolutionPermissionCreatedEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupSolutionPermissionCreatedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupSolutionPermissionCreatedEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupSolutionPermissionCreatedEventCarrier.SetValues(System.Int64,System.DateTime,System.Guid,System.Int32)">
            <summary>
            Set carrier values.
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
            <param name="groupID">Group ID.</param>
            <param name="permissionType">Permission type.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.GroupSolutionPermissionCreatedEventCarrier.EventName">
            <summary>
            Returns the event name.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.GroupSolutionPermissionCreatedEventCarrier.GroupID">
            <summary>
            Group ID.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.GroupSolutionPermissionDeletedEventCarrier">
            <summary>
            GroupSolutionPermissionDeletedEventCarrier.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.GroupSolutionPermissionDeletedEventCarrier.ATTRIBUTE_GROUP_ID">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.GroupSolutionPermissionDeletedEventCarrier.ELEMENT_NAME">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupSolutionPermissionDeletedEventCarrier.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupSolutionPermissionDeletedEventCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor.
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupSolutionPermissionDeletedEventCarrier.#ctor(System.Int64,System.DateTime,System.Guid,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
            <param name="groupID">Group ID.</param>
            <param name="permissionType">Permission type.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupSolutionPermissionDeletedEventCarrier.Clone">
            <summary>
            Returns a clone of the carrier.
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupSolutionPermissionDeletedEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupSolutionPermissionDeletedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupSolutionPermissionDeletedEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupSolutionPermissionDeletedEventCarrier.SetValues(System.Int64,System.DateTime,System.Guid,System.Int32)">
            <summary>
            Set carrier values.
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
            <param name="groupID">Group ID.</param>
            <param name="permissionType">Permission type.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.GroupSolutionPermissionDeletedEventCarrier.EventName">
            <summary>
            Returns the event name.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.GroupSolutionPermissionDeletedEventCarrier.GroupID">
            <summary>
            Group ID.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.GroupUpdatedEventCarrier">
            <summary>
            GroupUpdatedEventCarrier represents a group updated event.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.GroupUpdatedEventCarrier.ELEMENT_NAME">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupUpdatedEventCarrier.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupUpdatedEventCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor.
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupUpdatedEventCarrier.#ctor(System.Int64,System.DateTime,System.Guid)">
            <summary>
            Constructor
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
            <param name="groupID">Group ID.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupUpdatedEventCarrier.Clone">
            <summary>
            Returns a clone of the carrier.
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupUpdatedEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupUpdatedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.GroupUpdatedEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.GroupUpdatedEventCarrier.EventName">
            <summary>
            Returns the event name.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.LanguageCreatedEventCarrier">
            <summary>
            LanguageCreatedEventCarrier represents a language created event.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.LanguageEventCarrier">
            <summary>
            LanguageEventCarrier represents a language event.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.LanguageEventCarrier.ATTRIBUTE_LANGUAGE_ID">
            <summary>
            Language ID attribute
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.LanguageEventCarrier.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.LanguageEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.LanguageEventCarrier.GetAsXmlElement(System.Xml.XmlDocument,System.String)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <param name="elementName">Element name.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.LanguageEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.LanguageEventCarrier.SetValues(System.Int64,System.DateTime,System.Guid)">
            <summary>
            Set carrier values
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Time stamp.</param>
            <param name="languageID">Language ID.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.LanguageEventCarrier.LanguageID">
            <summary>
            Language ID
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.LanguageCreatedEventCarrier.ELEMENT_NAME">
            <summary>
            Language create event name
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.LanguageCreatedEventCarrier.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.LanguageCreatedEventCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.LanguageCreatedEventCarrier.#ctor(System.Int64,System.DateTime,System.Guid)">
            <summary>
            Constructor
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
            <param name="languageID">Language ID.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.LanguageCreatedEventCarrier.Clone">
            <summary>
            Returns a clone of the carrier
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.LanguageCreatedEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.LanguageCreatedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.LanguageCreatedEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.LanguageCreatedEventCarrier.EventName">
            <summary>
            Returns the event name
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.LanguageDeletedEventCarrier">
            <summary>
            LanguageDeletedEventCarrier represents a language deleted event.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.LanguageDeletedEventCarrier.ELEMENT_NAME">
            <summary>
            Language delete event name
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.LanguageDeletedEventCarrier.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.LanguageDeletedEventCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.LanguageDeletedEventCarrier.#ctor(System.Int64,System.DateTime,System.Guid)">
            <summary>
            Constructor
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
            <param name="languageID">Language ID.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.LanguageDeletedEventCarrier.Clone">
            <summary>
            Returns a clone of the carrier
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.LanguageDeletedEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.LanguageDeletedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.LanguageDeletedEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.LanguageDeletedEventCarrier.EventName">
            <summary>
            Returns the event name
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.LanguageUpdatedEventCarrier">
            <summary>
            LanguageUpdatedEventCarrier represents a language updated event.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.LanguageUpdatedEventCarrier.ELEMENT_NAME">
            <summary>
            Language updated event name
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.LanguageUpdatedEventCarrier.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.LanguageUpdatedEventCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.LanguageUpdatedEventCarrier.#ctor(System.Int64,System.DateTime,System.Guid)">
            <summary>
            Constructor
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
            <param name="languageID">Language ID.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.LanguageUpdatedEventCarrier.Clone">
            <summary>
            Returns a clone of the carrier
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.LanguageUpdatedEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.LanguageUpdatedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.LanguageUpdatedEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.LanguageUpdatedEventCarrier.EventName">
            <summary>
            Returns the event name
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.ModuleCreatedEventCarrier">
            <summary>
            ModuleCreatedEventCarrier represents a module created event.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.ModuleCreatedEventCarrier.ELEMENT_NAME">
            <summary>
            Elementname for created event
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleCreatedEventCarrier.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleCreatedEventCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor.
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleCreatedEventCarrier.#ctor(System.Int64,System.DateTime,System.Guid)">
            <summary>
            Constructor.
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
            <param name="moduleID">Module ID.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleCreatedEventCarrier.Clone">
            <summary>
            Returns a clone of the carrier.
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleCreatedEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleCreatedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleCreatedEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.ModuleCreatedEventCarrier.EventName">
            <summary>
            Returns the event name.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.ModuleDeletedEventCarrier">
            <summary>
            ModuleDeletedEventCarrier represents a module deleted event.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.ModuleDeletedEventCarrier.ELEMENT_NAME">
            <summary>
            Module deleted event name
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleDeletedEventCarrier.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleDeletedEventCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor.
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleDeletedEventCarrier.#ctor(System.Int64,System.DateTime,System.Guid)">
            <summary>
            Constructor.
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
            <param name="moduleID">Module ID.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleDeletedEventCarrier.Clone">
            <summary>
            Returns a clone of the carrier.
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleDeletedEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleDeletedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleDeletedEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.ModuleDeletedEventCarrier.EventName">
            <summary>
            Returns the event name.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.ModuleUpdatedEventCarrier">
            <summary>
            ModuleUpdatedEventCarrier represents a module updated event.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.ModuleUpdatedEventCarrier.ELEMENT_NAME">
            <summary>
            Module updated event element name
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleUpdatedEventCarrier.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleUpdatedEventCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor.
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleUpdatedEventCarrier.#ctor(System.Int64,System.DateTime,System.Guid)">
            <summary>
            Constructor.
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
            <param name="moduleID">Module ID.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleUpdatedEventCarrier.Clone">
            <summary>
            Returns a clone of the carrier.
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleUpdatedEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleUpdatedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.ModuleUpdatedEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.ModuleUpdatedEventCarrier.EventName">
            <summary>
            Returns the event name.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.SolutionStartedEventCarrier">
            <summary>
            SolutionStartedEventCarrier represents a solution started event.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.SolutionStartedEventCarrier.ELEMENT_NAME">
            <summary>
            Started event carrier name
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SolutionStartedEventCarrier.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SolutionStartedEventCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SolutionStartedEventCarrier.#ctor(System.Int64,System.DateTime)">
            <summary>
            Constructor
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SolutionStartedEventCarrier.Clone">
            <summary>
            Returns a clone of the carrier
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SolutionStartedEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SolutionStartedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SolutionStartedEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.SolutionStartedEventCarrier.EventName">
            <summary>
            Returns the event name
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.SolutionStoppedEventCarrier">
            <summary>
            SolutionStoppedEventCarrier represents a solution stopped event.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.SolutionStoppedEventCarrier.ELEMENT_NAME">
            <summary>
            Stopped event element name
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SolutionStoppedEventCarrier.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SolutionStoppedEventCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SolutionStoppedEventCarrier.#ctor(System.Int64,System.DateTime)">
            <summary>
            Constructor
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SolutionStoppedEventCarrier.Clone">
            <summary>
            Returns a clone of the carrier
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SolutionStoppedEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SolutionStoppedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.SolutionStoppedEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.SolutionStoppedEventCarrier.EventName">
            <summary>
            Returns the event name
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.UserCreatedEventCarrier">
            <summary>
            UserCreatedEventCarrier represents a user created event.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.UserCreatedEventCarrier.ELEMENT_NAME">
            <summary>
            Xmlcarrier element name
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserCreatedEventCarrier.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserCreatedEventCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor.
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserCreatedEventCarrier.#ctor(System.Int64,System.DateTime,System.Guid)">
            <summary>
            Constructor.
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
            <param name="userID">User ID.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserCreatedEventCarrier.Clone">
            <summary>
            Returns a clone of the carrier.
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserCreatedEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserCreatedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserCreatedEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.UserCreatedEventCarrier.EventName">
            <summary>
            Returns the event name.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.UserCustomPermissionCreatedEventCarrier">
            <summary>
            UserCustomPermissionCreatedEventCarrier.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.UserCustomPermissionCreatedEventCarrier.ELEMENT_NAME">
            <summary>
            Xmlcarrier element name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.UserCustomPermissionCreatedEventCarrier.ATTRIBUTE_KEY">
            <summary>
            Key attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.UserCustomPermissionCreatedEventCarrier.ATTRIBUTE_MODULE_ID">
            <summary>
            Module ID attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.UserCustomPermissionCreatedEventCarrier.ATTRIBUTE_USER_ID">
            <summary>
            User ID attribute name
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserCustomPermissionCreatedEventCarrier.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserCustomPermissionCreatedEventCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor.
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserCustomPermissionCreatedEventCarrier.#ctor(System.Int64,System.DateTime,System.Guid,System.Guid,System.Int32,System.Guid)">
            <summary>
            Constructor.
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="key">Permission key.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserCustomPermissionCreatedEventCarrier.Clone">
            <summary>
            Returns a clone of the carrier.
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserCustomPermissionCreatedEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserCustomPermissionCreatedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserCustomPermissionCreatedEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserCustomPermissionCreatedEventCarrier.SetValues(System.Int64,System.DateTime,System.Guid,System.Guid,System.Int32,System.Guid)">
            <summary>
            Set carrier values.
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="key">Permission key.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.UserCustomPermissionCreatedEventCarrier.EventName">
            <summary>
            Returns the event name.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.UserCustomPermissionCreatedEventCarrier.Key">
            <summary>
            Permission key.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.UserCustomPermissionCreatedEventCarrier.ModuleID">
            <summary>
            Module ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.UserCustomPermissionCreatedEventCarrier.UserID">
            <summary>
            User ID.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.UserCustomPermissionDeletedEventCarrier">
            <summary>
            UserCustomPermissionDeletedEventCarrier.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.UserCustomPermissionDeletedEventCarrier.ELEMENT_NAME">
            <summary>
            Xmlcarrier element name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.UserCustomPermissionDeletedEventCarrier.ATTRIBUTE_KEY">
            <summary>
            Key attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.UserCustomPermissionDeletedEventCarrier.ATTRIBUTE_MODULE_ID">
            <summary>
            Module ID attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.UserCustomPermissionDeletedEventCarrier.ATTRIBUTE_USER_ID">
            <summary>
            User ID attribute name
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserCustomPermissionDeletedEventCarrier.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserCustomPermissionDeletedEventCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor.
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserCustomPermissionDeletedEventCarrier.#ctor(System.Int64,System.DateTime,System.Guid,System.Guid,System.Int32,System.Guid)">
            <summary>
            Constructor.
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="key">Permission key.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserCustomPermissionDeletedEventCarrier.Clone">
            <summary>
            Returns a clone of the carrier.
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserCustomPermissionDeletedEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserCustomPermissionDeletedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserCustomPermissionDeletedEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserCustomPermissionDeletedEventCarrier.SetValues(System.Int64,System.DateTime,System.Guid,System.Guid,System.Int32,System.Guid)">
            <summary>
            Set carrier values.
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="key">Permission key.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.UserCustomPermissionDeletedEventCarrier.EventName">
            <summary>
            Returns the event name.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.UserCustomPermissionDeletedEventCarrier.Key">
            <summary>
            Permission key.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.UserCustomPermissionDeletedEventCarrier.ModuleID">
            <summary>
            Module ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.UserCustomPermissionDeletedEventCarrier.UserID">
            <summary>
            User ID.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.UserDeletedEventCarrier">
            <summary>
            UserDeletedEventCarrier represents a user deleted event.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.UserDeletedEventCarrier.ELEMENT_NAME">
            <summary>
            Xmlcarrier element name
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserDeletedEventCarrier.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserDeletedEventCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserDeletedEventCarrier.#ctor(System.Int64,System.DateTime,System.Guid)">
            <summary>
            Constructor
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
            <param name="userID">User ID.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserDeletedEventCarrier.Clone">
            <summary>
            Returns a clone of the carrier
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserDeletedEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserDeletedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserDeletedEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.UserDeletedEventCarrier.EventName">
            <summary>
            Returns the event name
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.UserModulePermissionCreatedEventCarrier">
            <summary>
            UserModulePermissionCreatedEventCarrier.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.UserModulePermissionCreatedEventCarrier.ELEMENT_NAME">
            <summary>
            Xmlcarrier element name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.UserModulePermissionCreatedEventCarrier.ATTRIBUTE_MODULE_ID">
            <summary>
            Module ID attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.UserModulePermissionCreatedEventCarrier.ATTRIBUTE_USER_ID">
            <summary>
            User ID attribute name
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserModulePermissionCreatedEventCarrier.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserModulePermissionCreatedEventCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserModulePermissionCreatedEventCarrier.#ctor(System.Int64,System.DateTime,System.Guid,System.Guid,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserModulePermissionCreatedEventCarrier.Clone">
            <summary>
            Returns a clone of the carrier
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserModulePermissionCreatedEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserModulePermissionCreatedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserModulePermissionCreatedEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserModulePermissionCreatedEventCarrier.SetValues(System.Int64,System.DateTime,System.Guid,System.Guid,System.Int32)">
            <summary>
            Set carrier values
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.UserModulePermissionCreatedEventCarrier.EventName">
            <summary>
            Returns the event name
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.UserModulePermissionCreatedEventCarrier.UserID">
            <summary>
            User ID
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.UserModulePermissionCreatedEventCarrier.ModuleID">
            <summary>
            Module ID
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.UserModulePermissionDeletedEventCarrier">
            <summary>
            UserModulePermissionDeletedEventCarrier.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.UserModulePermissionDeletedEventCarrier.ELEMENT_NAME">
            <summary>
            Xmlcarrier element name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.UserModulePermissionDeletedEventCarrier.ATTRIBUTE_MODULE_ID">
            <summary>
            Module ID attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.UserModulePermissionDeletedEventCarrier.ATTRIBUTE_USER_ID">
            <summary>
            User ID attribute name
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserModulePermissionDeletedEventCarrier.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserModulePermissionDeletedEventCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor.
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserModulePermissionDeletedEventCarrier.#ctor(System.Int64,System.DateTime,System.Guid,System.Guid,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserModulePermissionDeletedEventCarrier.Clone">
            <summary>
            Returns a clone of the carrier.
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserModulePermissionDeletedEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserModulePermissionDeletedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserModulePermissionDeletedEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserModulePermissionDeletedEventCarrier.SetValues(System.Int64,System.DateTime,System.Guid,System.Guid,System.Int32)">
            <summary>
            Set carrier values.
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.UserModulePermissionDeletedEventCarrier.EventName">
            <summary>
            Returns the event name.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.UserModulePermissionDeletedEventCarrier.UserID">
            <summary>
            User ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.UserModulePermissionDeletedEventCarrier.ModuleID">
            <summary>
            Module ID.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.UserSolutionPermissionCreatedEventCarrier">
            <summary>
            UserSolutionPermissionCreatedEventCarrier.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.UserSolutionPermissionCreatedEventCarrier.ELEMENT_NAME">
            <summary>
            Xmlcarrier element name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.UserSolutionPermissionCreatedEventCarrier.ATTRIBUTE_USER_ID">
            <summary>
            User ID attribute name
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserSolutionPermissionCreatedEventCarrier.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserSolutionPermissionCreatedEventCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor.
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserSolutionPermissionCreatedEventCarrier.#ctor(System.Int64,System.DateTime,System.Guid,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
            <param name="userID">User ID.</param>
            <param name="permissionType">Permission type.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserSolutionPermissionCreatedEventCarrier.Clone">
            <summary>
            Returns a clone of the carrier.
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserSolutionPermissionCreatedEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserSolutionPermissionCreatedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserSolutionPermissionCreatedEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserSolutionPermissionCreatedEventCarrier.SetValues(System.Int64,System.DateTime,System.Guid,System.Int32)">
            <summary>
            Set carrier values.
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
            <param name="userID">User ID.</param>
            <param name="permissionType">Permission type.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.UserSolutionPermissionCreatedEventCarrier.EventName">
            <summary>
            Returns the event name.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.UserSolutionPermissionCreatedEventCarrier.UserID">
            <summary>
            User ID.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.UserSolutionPermissionDeletedEventCarrier">
            <summary>
            UserSolutionPermissionDeletedEventCarrier.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.UserSolutionPermissionDeletedEventCarrier.ELEMENT_NAME">
            <summary>
            Xmlcarrier element name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.UserSolutionPermissionDeletedEventCarrier.ATTRIBUTE_USER_ID">
            <summary>
            User ID attribute name
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserSolutionPermissionDeletedEventCarrier.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserSolutionPermissionDeletedEventCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor.
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserSolutionPermissionDeletedEventCarrier.#ctor(System.Int64,System.DateTime,System.Guid,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
            <param name="userID">User ID.</param>
            <param name="permissionType">Permission type.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserSolutionPermissionDeletedEventCarrier.Clone">
            <summary>
            Returns a clone of the carrier.
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserSolutionPermissionDeletedEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserSolutionPermissionDeletedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserSolutionPermissionDeletedEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserSolutionPermissionDeletedEventCarrier.SetValues(System.Int64,System.DateTime,System.Guid,System.Int32)">
            <summary>
            Set carrier values.
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
            <param name="userID">User ID.</param>
            <param name="permissionType">Permission type.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.UserSolutionPermissionDeletedEventCarrier.EventName">
            <summary>
            Returns the event name.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.UserSolutionPermissionDeletedEventCarrier.UserID">
            <summary>
            User ID.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.Events.UserUpdatedEventCarrier">
            <summary>
            UserUpdatedEventCarrier represents a user updated event.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.Events.UserUpdatedEventCarrier.ELEMENT_NAME">
            <summary>
            Xmlcarrier element name
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserUpdatedEventCarrier.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserUpdatedEventCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserUpdatedEventCarrier.#ctor(System.Int64,System.DateTime,System.Guid)">
            <summary>
            Constructor
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Event time stamp.</param>
            <param name="userID">User ID.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserUpdatedEventCarrier.Clone">
            <summary>
            Returns a clone of the carrier
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserUpdatedEventCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserUpdatedEventCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.Events.UserUpdatedEventCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.Events.UserUpdatedEventCarrier.EventName">
            <summary>
            Returns the event name
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.GroupCarrier">
            <summary>
            The GroupCarrier describes a group.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.GroupCarrier.ATTRIBUTE_CENTRAL_ADMINISTRATION">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.GroupCarrier.ATTRIBUTE_CREATED_DATE">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.GroupCarrier.ATTRIBUTE_DISPLAY_NAME">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.GroupCarrier.ATTRIBUTE_ENABLED">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.GroupCarrier.ATTRIBUTE_ID">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.GroupCarrier.ATTRIBUTE_LATEST_UPDATE">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.GroupCarrier.ATTRIBUTE_MEMBER_ID">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.GroupCarrier.ATTRIBUTE_NAME">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.GroupCarrier.ATTRIBUTE_PATH">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.GroupCarrier.ATTRIBUTE_TYPE">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.GroupCarrier.DISPLAY_NAME_UNDEFINED">
            <summary>
            Undefined/never set constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.GroupCarrier.ELEMENT_GROUP_CUSTOM_PERMISSIONS_LIST">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.GroupCarrier.ELEMENT_MEMBER_ID">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.GroupCarrier.ELEMENT_MEMBER_IDS_LIST">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.GroupCarrier.ELEMENT_MODULE_PERMISSIONS_LIST">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.GroupCarrier.ELEMENT_NAME">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.GroupCarrier.ELEMENT_SOLUTION_PERMISSIONS_LIST">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.GroupCarrier.PATH_UNDEFINED">
            <summary>
            Undefined/never set constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.GroupCarrier.CREATED_DATE_UNDEFINED">
            <summary>
            Undefined/never set constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.GroupCarrier.LATEST_UPDATE_NEVER_UPDATED">
            <summary>
            Undefined/never set constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.GroupCarrier.LATEST_UPDATE_UNDEFINED">
            <summary>
            Undefined/never set constant.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.GroupCarrier.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.GroupCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.GroupCarrier.#ctor(System.Guid,System.String,System.String,System.Boolean,System.Int16,System.String,System.DateTime,System.DateTime,System.Boolean,System.Guid[],Litium.Foundation.Carriers.GroupCustomPermissionCarrier[],Litium.Foundation.Carriers.GroupModulePermissionCarrier[],Litium.Foundation.Carriers.GroupSolutionPermissionCarrier[])">
            <summary>
            Constructor
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="displayName">Display name.</param>
            <param name="name">Group name.</param>
            <param name="enabled">Whether the group is enabled (GroupCarrier.ENABLED) or disabled (GroupCarrier.DISABLED).</param>
            <param name="groupType">Group type, see Litium.Foundation.Accounts.AccountTypes.</param>
            <param name="path">If not internal group: complete path including protocoll, example: LDAP://CN=Roger Moore,DC=LITIUM,DC=SE.</param>
            <param name="createdDate">Created date.</param>
            <param name="latestUpdate">Latest update, or GroupCarrier.LATEST_UPDATE_NEVER_UPDATED to indicate that the object has never been updated (=new group), or GroupCarrier.LATEST_UPDATE_NOT_SET to indicate that this information is not included.</param>
            <param name="centralAdministration">Whether to handle the group in the central administration gui or not.</param>
            <param name="memberIDs">Member IDs, or null to indicate that members are not included.</param>
            <param name="customPermissions">Custom permissions or null to indicate that these are not included.</param>
            <param name="modulePermissions">Module permissions or null to indicate that these are not included.</param>
            <param name="solutionPermissions">Solution permissions or null to indicate that these are not included.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.GroupCarrier.Clone">
            <summary>
            Returns a clone of the carrier
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.GroupCarrier.GetAsXml">
            <summary>
            Returns the carrier as an XML document
            </summary>
            <returns>The requested XML document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.GroupCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier ax an XML element in the specified xml document.
            Does not insert the element into the XML document
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml element.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.GroupCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.GroupCarrier.SetValues(System.Guid,System.String,System.String,System.Boolean,System.Int16,System.String,System.DateTime,System.DateTime,System.Boolean,System.Guid[],Litium.Foundation.Carriers.GroupCustomPermissionCarrier[],Litium.Foundation.Carriers.GroupModulePermissionCarrier[],Litium.Foundation.Carriers.GroupSolutionPermissionCarrier[])">
            <summary>
            Set carrier values
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="displayName">Display name.</param>
            <param name="name">Group name.</param>
            <param name="enabled">Whether the group is enabled (GroupCarrier.ENABLED) or disabled (GroupCarrier.DISABLED).</param>
            <param name="groupType">Group type, see Litium.Foundation.Accounts.AccountTypes.</param>
            <param name="path">If not internal group: complete path including protocoll, example: LDAP://CN=Roger Moore,DC=LITIUM,DC=SE.</param>
            <param name="createdDate">Created date.</param>
            <param name="latestUpdate">Latest update, or GroupCarrier.LATEST_UPDATE_NEVER_UPDATED to indicate that the object has never been updated (=new group), or GroupCarrier.LATEST_UPDATE_NOT_SET to indicate that this information is not included.</param>
            <param name="centralAdministration">Whether to handle the group in the central administration gui or not.</param>
            <param name="memberIDs">Member IDs, or null to indicate that members are not included.</param>
            <param name="customPermissions">Custom permissions or null to indicate that these are not included.</param>
            <param name="modulePermissions">Module permissions or null to indicate that these are not included.</param>
            <param name="solutionPermissions">Solution permissions or null to indicate that these are not included.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.GroupCarrier.CentralAdministration">
            <summary>
            Whether the group is handled in the central administration gui or not
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.GroupCarrier.CreatedDate">
            <summary>
            Created date time.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.GroupCarrier.CustomPermissions">
            <summary>
            Custom permissions
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.GroupCarrier.DisplayName">
            <summary>
            User display name
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.GroupCarrier.Enabled">
            <summary>
            Whether the group is enabled 
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.GroupCarrier.ID">
            <summary>
            Group ID
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.GroupCarrier.LatestUpdate">
            <summary>
            Latest update
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.GroupCarrier.MemberIDs">
            <summary>
            IDs of group members (null = member IDs are not included in this carrier)
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.GroupCarrier.ModulePermissions">
            <summary>
            All module permissions
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.GroupCarrier.Name">
            <summary>
            Group name. If not internal group (e.g. Active Directory): complete path including protocoll, example: LDAP://CN=Roger Moore,DC=LITIUM,DC=SE
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.GroupCarrier.Path">
            <summary>
            The path to the group in a Directory (e.g. Active Directory or Novell E-Directory).
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.GroupCarrier.SolutionPermissions">
            <summary>
            All solution permissions
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.GroupCarrier.Type">
            <summary>
            Get/set user type, see Litium.Foundation.Constants.AccountTypeConstants
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.GroupCustomPermissionCarrier">
            <summary>
            The GroupCustomPermissionCarrier describes a custom permission belonging to a group.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.PermissionCarrier">
            <summary>
            PermissionCarrier is an abstract base class for module and custom permissions (not solution permissions).
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.PermissionCarrier.ATTRIBUTE_PERMISSION_TYPE">
            <summary>
            Permissiontype attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.PermissionCarrier.m_permissionType">
            <summary>
            Permission type
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.PermissionCarrier.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.PermissionCarrier.GetAsXml">
            <summary>
            Returns the carrier as an XML document
            </summary>
            <returns>The requested XML document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.PermissionCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Gets as XML element.
            </summary>
            <param name="xmlDoc">The XML doc.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.PermissionCarrier.GetAsXmlElement(System.Xml.XmlDocument,System.String)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document
            </summary>
            <param name="xmlDoc">XML document.</param>
            <param name="elementName">Element name.</param>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.PermissionCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.PermissionCarrier.SetValues(System.Int32)">
            <summary>
            Set carrier values
            </summary>
            <param name="permissionType">Permission type.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.PermissionCarrier.PermissionType">
            <summary>
            Permission type
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.GroupCustomPermissionCarrier.ATTRIBUTE_GROUP_ID">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.GroupCustomPermissionCarrier.ATTRIBUTE_KEY">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.GroupCustomPermissionCarrier.ATTRIBUTE_MODULE_ID">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.GroupCustomPermissionCarrier.ELEMENT_NAME">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.GroupCustomPermissionCarrier.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.GroupCustomPermissionCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.GroupCustomPermissionCarrier.#ctor(System.Guid,System.Guid,System.Int32,System.Guid)">
            <summary>
            Constructor
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="key">Permission key.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.GroupCustomPermissionCarrier.Clone">
            <summary>
            Returns a clone of the carrier.
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.GroupCustomPermissionCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.GroupCustomPermissionCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier ax an XML element in the specified xml document.
            Does not insert the element into the XML document
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml element.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.GroupCustomPermissionCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.GroupCustomPermissionCarrier.SetValues(System.Guid,System.Guid,System.Int32,System.Guid)">
            <summary>
            Set carrier values
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="key">Permission key.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.GroupCustomPermissionCarrier.GroupID">
            <summary>
            Group ID
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.GroupCustomPermissionCarrier.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.GroupCustomPermissionCarrier.ModuleID">
            <summary>
            Module ID
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.GroupModulePermissionCarrier">
            <summary>
            The GroupModulePermissionCarrier describes a module permission belonging to a group.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.GroupModulePermissionCarrier.ATTRIBUTE_GROUP_ID">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.GroupModulePermissionCarrier.ATTRIBUTE_MODULE_ID">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.GroupModulePermissionCarrier.ELEMENT_NAME">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.GroupModulePermissionCarrier.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.GroupModulePermissionCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.GroupModulePermissionCarrier.#ctor(System.Xml.XmlElement)">
            <summary>
            Constructor
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.GroupModulePermissionCarrier.#ctor(System.Guid,System.Guid,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.GroupModulePermissionCarrier.Clone">
            <summary>
            Returns a clone of the carrier
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.GroupModulePermissionCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.GroupModulePermissionCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier ax an XML element in the specified xml document.
            Does not insert the element into the XML document
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml element.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.GroupModulePermissionCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.GroupModulePermissionCarrier.SetValues(System.Guid,System.Guid,System.Int32)">
            <summary>
            Set carrier values
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.GroupModulePermissionCarrier.GroupID">
            <summary>
            Group ID
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.GroupModulePermissionCarrier.ModuleID">
            <summary>
            Module ID
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.GroupSolutionPermissionCarrier">
            <summary>
            The GroupSolutionPermissionCarrier describes a solution permission belonging to a group.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.GroupSolutionPermissionCarrier.ATTRIBUTE_GROUP_ID">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.GroupSolutionPermissionCarrier.ATTRIBUTE_PERMISSION_TYPE">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.GroupSolutionPermissionCarrier.ELEMENT_NAME">
            <summary>
            Xml constant.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.GroupSolutionPermissionCarrier.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.GroupSolutionPermissionCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.GroupSolutionPermissionCarrier.#ctor(System.Xml.XmlElement)">
            <summary>
            Constructor
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.GroupSolutionPermissionCarrier.#ctor(System.Guid,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="permissionType">Permission type.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.GroupSolutionPermissionCarrier.Clone">
            <summary>
            Returns a clone of the carrier
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.GroupSolutionPermissionCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.GroupSolutionPermissionCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier ax an XML element in the specified xml document.
            Does not insert the element into the XML document
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml element.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.GroupSolutionPermissionCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.GroupSolutionPermissionCarrier.SetValues(System.Guid,System.Int32)">
            <summary>
            Set carrier values
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="permissionType">Permission type.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.GroupSolutionPermissionCarrier.GroupID">
            <summary>
            Group ID
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.GroupSolutionPermissionCarrier.PermissionType">
            <summary>
            Permission type
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.LanguageCarrier">
            <summary>
            The LanguageCarrier describes a language.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.LanguageCarrier.ELEMENT_NAME">
            <summary>
            Language element name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.LanguageCarrier.ATTRIBUTE_ID">
            <summary>
            Language attribute ID
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.LanguageCarrier.ATTRIBUTE_IS_DEFAULT_LANGUAGE">
            <summary>
            Language attribute is default language
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.LanguageCarrier.ATTRIBUTE_NAME">
            <summary>
            Language attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.LanguageCarrier.ATTRIBUTE_CULTURE">
            <summary>
            Language attribute culture
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.LanguageCarrier.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.LanguageCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor.
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.LanguageCarrier.#ctor(System.Xml.XmlElement)">
            <summary>
            Constructor.
            </summary>
            <param name="xmlElement">Xml Element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.LanguageCarrier.#ctor(System.Guid,System.String,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="languageID">Language ID.</param>
            <param name="languageName">Language name.</param>
            <param name="culture">Language culture.</param>
            <param name="isDefault">Whether the language is the default language or not.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.LanguageCarrier.Clone">
            <summary>
            Returns a clone of the carrier.
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.LanguageCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.LanguageCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier ax an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml element.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.LanguageCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.LanguageCarrier.SetValues(System.Guid,System.String,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Set carrier values.
            </summary>
            <param name="languageID">Language ID.</param>
            <param name="languageName">Language Name.</param>
            <param name="culture">Culture info.</param>
            <param name="isDefault">Whether the language is the default language or not.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.LanguageCarrier.Culture">
            <summary>
            Culture.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.LanguageCarrier.ID">
            <summary>
            Language ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.LanguageCarrier.IsDefaultLanguage">
            <summary>
            Whether the language is the default language.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.LanguageCarrier.Name">
            <summary>
            Language name.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.ModuleCarrier">
            <summary>
            The ModuleCarrier describes a module.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.ModuleCarrier.ELEMENT_NAME">
            <summary>
            Base element for the module.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.ModuleCarrier.ELEMENT_CUSTOM_PERMISSION_TYPES">
            <summary>
            Element for custom permission types
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.ModuleCarrier.ELEMENT_GROUP_CUSTOM_PERMISSIONS">
            <summary>
            Element for group custom persmissions
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.ModuleCarrier.ELEMENT_GROUP_MODULE_PERMISSIONS">
            <summary>
            Element for group module permissions
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.ModuleCarrier.ELEMENT_MODULE_PERMISSION_TYPES">
            <summary>
            Element for module permission types
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.ModuleCarrier.ELEMENT_MODULE_STRINGS">
            <summary>
            Element for module translation strings
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.ModuleCarrier.ELEMENT_USER_CUSTOM_PERMISSIONS">
            <summary>
            Element for user custom module permission
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.ModuleCarrier.ELEMENT_USER_MODULE_PERMISSIONS">
            <summary>
            Element for user module permission
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.ModuleCarrier.ATTRIBUTE_ASSEMBLY_NAME">
            <summary>
            Attribute assemblyname
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.ModuleCarrier.ATTRIBUTE_CLASS_NAME">
            <summary>
            Attribute classname
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.ModuleCarrier.ATTRIBUTE_ERROR_PAGE_URL">
            <summary>
            Attribute error page url
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.ModuleCarrier.ATTRIBUTE_ICON_URL_LARGE">
            <summary>
            Attribute larg icon url
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.ModuleCarrier.ATTRIBUTE_ICON_URL_MEDIUM">
            <summary>
            Attribute medium icon url
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.ModuleCarrier.ATTRIBUTE_ICON_URL_SMALL">
            <summary>
            Attribute small icon url
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.ModuleCarrier.ATTRIBUTE_ID">
            <summary>
            Attribute ID
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.ModuleCarrier.ATTRIBUTE_LICENSE_INFO">
            <summary>
            Attribute license info
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.ModuleCarrier.ATTRIBUTE_NAME">
            <summary>
            Attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.ModuleCarrier.ATTRIBUTE_SETTINGS_PAGE_URL">
            <summary>
            Attribute settingspage url
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.ModuleCarrier.ATTRIBUTE_START_PAGE_URL">
            <summary>
            Attribute startpage url
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.ModuleCarrier.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.ModuleCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor.
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.ModuleCarrier.#ctor(System.Guid,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,Litium.Foundation.Carriers.ModulePermissionTypeCarrier[],Litium.Foundation.Carriers.CustomPermissionTypeCarrier[],Litium.Foundation.Carriers.GroupModulePermissionCarrier[],Litium.Foundation.Carriers.UserModulePermissionCarrier[],Litium.Foundation.Carriers.GroupCustomPermissionCarrier[],Litium.Foundation.Carriers.UserCustomPermissionCarrier[],Litium.Foundation.Carriers.ModuleStringCarrier[])">
            <summary>
            Constructor.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="moduleName">Module Name.</param>
            <param name="assemblyName">Assembly name.</param>
            <param name="className">Class name.</param>
            <param name="licenseInfo">License info.</param>
            <param name="startPageUrl">Start page Url.</param>
            <param name="settingsPageUrl">Settings page Url.</param>
            <param name="errorPageUrl">Error page Url.</param>
            <param name="iconUrlSmall">Small icon Url.</param>
            <param name="iconUrlMedium">Medium icon Url.</param>
            <param name="iconUrlLarge">Large icon Url.</param>
            <param name="modulePermissionTypes">Module permission types.</param>
            <param name="customPermissionTypes">Custom permission types.</param>
            <param name="groupPermissions">Group permissions to this module, or null to indicate that these are not included.</param>
            <param name="userPermissions">User permissions to this module, or null to indicate that these are not included.</param>
            <param name="groupCustomPermissions">Group custom permissions, or null to indicate that these are not included.</param>
            <param name="userCustomPermissions">User custom permissions, or null to indicate that these are not included.</param>
            <param name="moduleStrings">Module strings, or null to indicate that these are not included.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.ModuleCarrier.Clone">
            <summary>
            Returns a clone of the carrier.
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.ModuleCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML.
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.ModuleCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier as an XML element in the specified xml document.
            Does not insert the element into the XML document.
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml element.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.ModuleCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element.
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.ModuleCarrier.SetValues(System.Guid,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,Litium.Foundation.Carriers.ModulePermissionTypeCarrier[],Litium.Foundation.Carriers.CustomPermissionTypeCarrier[],Litium.Foundation.Carriers.GroupModulePermissionCarrier[],Litium.Foundation.Carriers.UserModulePermissionCarrier[],Litium.Foundation.Carriers.GroupCustomPermissionCarrier[],Litium.Foundation.Carriers.UserCustomPermissionCarrier[],Litium.Foundation.Carriers.ModuleStringCarrier[])">
            <summary>
            Set carrier values
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="moduleName">Module Name.</param>
            <param name="assemblyName">Assembly name.</param>
            <param name="className">Class name.</param>
            <param name="licenseInfo">License info.</param>
            <param name="startPageUrl">Start page Url.</param>
            <param name="settingsPageUrl">Settings page Url.</param>
            <param name="errorPageUrl">Error page Url.</param>
            <param name="iconUrlSmall">Small icon Url.</param>
            <param name="iconUrlMedium">Medium icon url.</param>
            <param name="iconUrlLarge">Large icon Url.</param>
            <param name="modulePermissionTypes">Module permission types.</param>
            <param name="customPermissionTypes">Custom permission types.</param>
            <param name="groupPermissions">Group permissions to this module, or null to indicate that these are not included.</param>
            <param name="userPermissions">User permissions to this module, or null to indicate that these are not included.</param>
            <param name="groupCustomPermissions">Group custom permissions, or null to indicate that these are not included.</param>
            <param name="userCustomPermissions">User custom permissions, or null to indicate that these are not included.</param>
            <param name="moduleStrings">Module strings, or null to indicate that these are not included.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.ModuleCarrier.AssemblyName">
            <summary>
            Assembly name
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.ModuleCarrier.ClassName">
            <summary>
            Class name
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.ModuleCarrier.CustomPermissionTypes">
            <summary>
            Custom permission types
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.ModuleCarrier.ErrorPageUrl">
            <summary>
            Error page Url
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.ModuleCarrier.GroupCustomPermissions">
            <summary>
            Group custom permissions
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.ModuleCarrier.GroupModulePermissions">
            <summary>
            Group permissions to this module
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.ModuleCarrier.IconUrlLarge">
            <summary>
            Large icon Url
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.ModuleCarrier.IconUrlMedium">
            <summary>
            Medium icon Url
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.ModuleCarrier.IconUrlSmall">
            <summary>
            Small icon Url
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.ModuleCarrier.ID">
            <summary>
            Module ID
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.ModuleCarrier.LicenseInfo">
            <summary>
            License info.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.ModuleCarrier.ModulePermissionTypes">
            <summary>
            Module permission Types.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.ModuleCarrier.ModuleStrings">
            <summary>
            Module strings.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.ModuleCarrier.Name">
            <summary>
            Module name.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.ModuleCarrier.SettingsPageUrl">
            <summary>
            Settings page Url.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.ModuleCarrier.StartPageUrl">
            <summary>
            Start page Url
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.ModuleCarrier.UserCustomPermissions">
            <summary>
            User custom permissions
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.ModuleCarrier.UserModulePermissions">
            <summary>
            User permissions to this module
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.ModulePermissionTypeCarrier">
            <summary>
            The ModulePermissionTypeCarrier describes a module permission type.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.ModulePermissionTypeCarrier.ELEMENT_NAME">
            <summary>
            Elementname for xml-carrier
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.ModulePermissionTypeCarrier.ATTRIBUTE_MODULE_ID">
            <summary>
            ModuleID attribute
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.ModulePermissionTypeCarrier.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.ModulePermissionTypeCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.ModulePermissionTypeCarrier.#ctor(System.Int32,System.String,System.Guid)">
            <summary>
            Constructor
            </summary>
            <param name="ID">Permission type ID.</param>
            <param name="name">Permission type name.</param>
            <param name="moduleID">Module ID.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.ModulePermissionTypeCarrier.Clone">
            <summary>
            Returns a clone of the carrier
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.ModulePermissionTypeCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.ModulePermissionTypeCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier ax an XML element in the specified xml document.
            Does not insert the element into the XML document
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml element.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.ModulePermissionTypeCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.ModulePermissionTypeCarrier.SetValues(System.Int32,System.String,System.Guid)">
            <summary>
            Set carrier values
            </summary>
            <param name="ID">Permission type ID.</param>
            <param name="name">Permission name.</param>
            <param name="moduleID">Module ID.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.ModulePermissionTypeCarrier.ModuleID">
            <summary>
            Module ID
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.SolutionCarrier">
            <summary>
            The SolutionCarrier describes a solution.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.SolutionCarrier.ELEMENT_NAME">
            <summary>
            Carrier element name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.SolutionCarrier.ELEMENT_GROUP_PERMISSIONS">
            <summary>
            Group permission element name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.SolutionCarrier.ELEMENT_GROUPS">
            <summary>
            Groups element name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.SolutionCarrier.ELEMENT_LANGUAGES">
            <summary>
            Language element name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.SolutionCarrier.ELEMENT_MODULES">
            <summary>
            Module element name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.SolutionCarrier.ELEMENT_PERMISSION_TYPES">
            <summary>
            Permission types element name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.SolutionCarrier.ELEMENT_SYSTEM_STRINGS">
            <summary>
            System strings element name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.SolutionCarrier.ELEMENT_USER_PERMISSIONS">
            <summary>
            User permissions element name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.SolutionCarrier.ELEMENT_USERS">
            <summary>
            Users element name
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.SolutionCarrier.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.SolutionCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.SolutionCarrier.#ctor(Litium.Foundation.Carriers.GroupSolutionPermissionCarrier[],Litium.Foundation.Carriers.GroupCarrier[],Litium.Foundation.Carriers.LanguageCarrier[],Litium.Foundation.Carriers.ModuleCarrier[],Litium.Foundation.Carriers.SolutionPermissionTypeCarrier[],Litium.Foundation.Carriers.UserSolutionPermissionCarrier[],Litium.Foundation.Carriers.UserCarrier[],Litium.Foundation.Carriers.SystemStringCarrier[])">
            <summary>
            Constructor
            </summary>
            <param name="groups">Groups, or null to indicate that groups are not included.</param>
            <param name="groupPermissions">Group permissions, or null to indicate that these are not included.</param>
            <param name="languages">Languages, or null to indicate that languages are not included.</param>
            <param name="modules">Modules, or null to indicate that modules are not included.</param>
            <param name="solutionPermissionTypes">Solution permission types.</param>
            <param name="users">Users, or null to indicate that users are not included.</param>
            <param name="userPermissions">User permissions, or null to indicate that these are not included.</param>
            <param name="systemStrings">System strings, or null to indicate that these are not included.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.SolutionCarrier.Clone">
            <summary>
            Returns a clone of the carrier
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.SolutionCarrier.GetAsXml">
            <summary>
            Returns the carrier as an XML document
            </summary>
            <returns>The requested XML document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.SolutionCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier ax an XML element in the specified xml document.
            Does not insert the element into the XML document
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml element.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.SolutionCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.SolutionCarrier.SetValues(Litium.Foundation.Carriers.GroupSolutionPermissionCarrier[],Litium.Foundation.Carriers.GroupCarrier[],Litium.Foundation.Carriers.LanguageCarrier[],Litium.Foundation.Carriers.ModuleCarrier[],Litium.Foundation.Carriers.SolutionPermissionTypeCarrier[],Litium.Foundation.Carriers.UserSolutionPermissionCarrier[],Litium.Foundation.Carriers.UserCarrier[],Litium.Foundation.Carriers.SystemStringCarrier[])">
            <summary>
            Set carrier values
            </summary>
            <param name="groups">Groups, or null to indicate that groups are not included.</param>
            <param name="groupPermissions">Group permissions to this solution, or null to indicate that these are not included.</param>
            <param name="languages">Languages, or null to indicate that languages are not included.</param>
            <param name="modules">Modules, or null to indicate that modules are not included.</param>
            <param name="solutionPermissionTypes">Solution permission types.</param>
            <param name="users">Users, or null to indicate that users are not included.</param>
            <param name="userPermissions">User permissions to this solution, or null to indicate that these are not included.</param>
            <param name="systemStrings">System strings, or null to indicate that these are not included.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.SolutionCarrier.GroupPermissions">
            <summary>
            Group permissions to this solution
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.SolutionCarrier.Groups">
            <summary>
            Groups (null = groups are not included in this carrier)
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.SolutionCarrier.Languages">
            <summary>
            Languages (null = languages are not included in this carrier)
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.SolutionCarrier.Modules">
            <summary>
            Modules (null = modules are not included in this carrier)
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.SolutionCarrier.PermissionTypes">
            <summary>
            Solution permission types
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.SolutionCarrier.SystemStrings">
            <summary>
            System strings.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.SolutionCarrier.UserPermissions">
            <summary>
            User permissions to this solution
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.SolutionCarrier.Users">
            <summary>
            Users (null = users are not included in this carrier)
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.SolutionPermissionTypeCarrier">
            <summary>
            The SolutionPermissionTypeCarrier describes a solution permission type.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.SolutionPermissionTypeCarrier.ELEMENT_NAME">
            <summary>
            Permission type carrier element name
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.SolutionPermissionTypeCarrier.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.SolutionPermissionTypeCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.SolutionPermissionTypeCarrier.#ctor(System.Int32,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="ID">Permission type ID.</param>
            <param name="name">Permission name.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.SolutionPermissionTypeCarrier.Clone">
            <summary>
            Returns a clone of the carrier
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.SolutionPermissionTypeCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.SolutionPermissionTypeCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier ax an XML element in the specified xml document.
            Does not insert the element into the XML document
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml element.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.SolutionPermissionTypeCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.SolutionPermissionTypeCarrier.SetValues(System.Int32,System.String)">
            <summary>
            Set carrier values
            </summary>
            <param name="ID">Permission type ID.</param>
            <param name="name">Permission name.</param>
        </member>
        <member name="T:Litium.Foundation.Carriers.UserCarrier">
            <summary>
            The UserCarrier describes a User.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserCarrier.DISPLAY_NAME_UNDEFINED">
            <summary>
            No display name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserCarrier.EMAIL_UNDEFINED">
            <summary>
            No email value
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserCarrier.ENCRYPTED_PASSWORD_UNDEFINED">
            <summary>
            No encrypted password value
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserCarrier.PASSWORD_SALT_UNDEFINED">
            <summary>
            Password salt default value
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserCarrier.PATH_UNDEFINED">
            <summary>
            Path default value
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserCarrier.ELEMENT_NAME">
            <summary>
            XmlCarrier element name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserCarrier.ELEMENT_CUSTOM_PERMISSIONS">
            <summary>
            Custom permission element name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserCarrier.ELEMENT_GROUP_MEMBERSHIPS">
            <summary>
            Group membership element name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserCarrier.ELEMENT_MEMBERSHIP_ID">
            <summary>
            Membership ID element name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserCarrier.ELEMENT_MODULE_PERMISSIONS">
            <summary>
            Module permissions element name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserCarrier.ELEMENT_SOLUTION_PERMISSIONS">
            <summary>
            Solutiuon permissions element name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserCarrier.ATTRIBUTE_CENTRAL_ADMINISTRATION">
            <summary>
            Central administration attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserCarrier.ATTRIBUTE_CREATED_DATE">
            <summary>
            Created date attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserCarrier.ATTRIBUTE_DISPLAY_NAME">
            <summary>
            Display name attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserCarrier.ATTRIBUTE_EMAIL">
            <summary>
            Email attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserCarrier.ATTRIBUTE_ENABLED">
            <summary>
            Enabled attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserCarrier.ATTRIBUTE_ENCRYPTED_PASSWORD">
            <summary>
            Encrypted password attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserCarrier.ATTRIBUTE_ID">
            <summary>
            ID attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserCarrier.ATTRIBUTE_LANGUAGE_ID">
            <summary>
            Language ID attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserCarrier.ATTRIBUTE_LAST_LOGIN_DATE">
            <summary>
            Last login date attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserCarrier.ATTRIBUTE_LATEST_UPDATE">
            <summary>
            Latest update attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserCarrier.ATTRIBUTE_LOGIN_FAILURE_COUNT">
            <summary>
            Login failure count attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserCarrier.ATTRIBUTE_LOGIN_NAME">
            <summary>
            Login name attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserCarrier.ATTRIBUTE_MEMBERSHIP_ID">
            <summary>
            Membership ID attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserCarrier.ATTRIBUTE_PATH">
            <summary>
            Path attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserCarrier.ATTRIBUTE_PREVIOUS_LAST_LOGIN_DATE">
            <summary>
            Previous last login date attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserCarrier.ATTRIBUTE_SKIN">
            <summary>
            Skin attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserCarrier.ATTRIBUTE_TYPE">
            <summary>
            Type attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserCarrier.ATTRIBUTE_PASSWORD_SALT">
            <summary>
            Password salt attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserCarrier.ATTRIBUTE_PASSWORD_DATE">
            <summary>
            Password date attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserCarrier.ATTRIBUTE_USER_STATUS">
            <summary>
            Status attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserCarrier.CREATED_DATE_UNDEFINED">
            <summary>
            Created date default value
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserCarrier.LANGUAGE_ID_UNDEFINED">
            <summary>
            No language selected value
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserCarrier.LAST_LOGIN_NEVER_LOGGED_IN">
            <summary>
            Never logged in value.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserCarrier.LAST_LOGIN_UNDEFINED">
            <summary>
            Last login default value
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserCarrier.LATEST_UPDATE_NEVER_UPDATED">
            <summary>
            Never updated value
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserCarrier.LATEST_UPDATE_UNDEFINED">
            <summary>
            Latest updated default value
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserCarrier.PASSWORD_DATE_UNDEFINED">
            <summary>
            Password date default value
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserCarrier.m_ID">
            <summary>
            ID
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserCarrier.m_languageID">
            <summary>
            Language ID
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.UserCarrier.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.UserCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.UserCarrier.#ctor(System.Guid,System.String,System.String,System.Int16,System.String,System.Boolean,System.String,System.String,System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.Boolean,System.Guid,System.String,System.String,System.DateTime,System.Int16,System.Int32,System.Guid[],Litium.Foundation.Carriers.UserCustomPermissionCarrier[],Litium.Foundation.Carriers.UserModulePermissionCarrier[],Litium.Foundation.Carriers.UserSolutionPermissionCarrier[])">
            <summary>
            Constructor
            </summary>
            <param name="userID">User ID.</param>
            <param name="displayName">Display name.</param>
            <param name="loginName">User login name.</param>
            <param name="userAccountType">User account type, see Accounts.AccountTypes.</param>
            <param name="email">User email.</param>
            <param name="enabled">Whether the user is enabled (UserCarrier.ENABLED) or disabled (UserCarrier.DISABLED).</param>
            <param name="encryptedPassword">User password (encrypted) or null to indicate that this information is not included.</param>
            <param name="path">User path.</param>
            <param name="createdDate">Created date.</param>
            <param name="latestUpdate">Latest update or UserCarrier.LATEST_UPDATE_NEVER_UPDATED to indicate that the object has never been updated (=new user), or UserCarrier.LATEST_UPDATE_NOT_SET to indicate that this information is not included in the carrier.</param>
            <param name="lastLoginDate">Date time of last login or UserCarrier.LAST_LOGIN_NEVER_LOGGED_IN.</param>
            <param name="previousLastLoginDate">The previous date time of last login or UserCarrier.LAST_LOGIN_NEVER_LOGGED_IN.</param>
            <param name="centralAdministration">Whether to handle the user in the central administration gui or not.</param>
            <param name="languageID"></param>
            <param name="skin"></param>
            <param name="passwordSalt">Salt for the password</param>
            <param name="passwordDate">Password date</param>
            <param name="status">User status</param>
            <param name="loginFailureCount">How many times have someone try to login into account</param>
            <param name="groupMembershipIDs">IDs of groups in which the user is a member, or null to indicate that groups are not included in the carrier.</param>
            <param name="customPermissions">Custom permissions or null to indicate that these are not included.</param>
            <param name="modulePermissions">Module permissions or null to indicate that these are not included in the carrier.</param>
            <param name="solutionPermissions">Solution permissions or null to indicate that these are not included in the carrier.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.UserCarrier.Clone">
            <summary>
            Returns a clone of the carrier
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.UserCarrier.GetAsXml">
            <summary>
            Returns the carrier as an XML document
            </summary>
            <returns>The requested XML document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.UserCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier ax an XML element in the specified xml document.
            Does not insert the element into the XML document
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml element.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.UserCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.UserCarrier.SetValues(System.Guid,System.String,System.String,System.Int16,System.String,System.Boolean,System.String,System.String,System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.Boolean,System.Guid,System.String,System.String,System.DateTime,System.Int16,System.Int32,System.Guid[],Litium.Foundation.Carriers.UserCustomPermissionCarrier[],Litium.Foundation.Carriers.UserModulePermissionCarrier[],Litium.Foundation.Carriers.UserSolutionPermissionCarrier[])">
            <summary>
            Set carrier values.
            </summary>
            <param name="userID">User ID.</param>
            <param name="displayName">Display name.</param>
            <param name="loginName">User login name.</param>
            <param name="userAccountType">User account type, see Accounts.AccountTypes.</param>
            <param name="email">User email.</param>
            <param name="enabled">Whether the user is enabled (UserCarrier.ENABLED) or disabled (UserCarrier.DISABLED).</param>
            <param name="encryptedPassword">User password (encrypted) or null to indicate that this information is not included.</param>
            <param name="path">User path.</param>
            <param name="createdDate">Created date.</param>
            <param name="latestUpdate">Latest update or UserCarrier.LATEST_UPDATE_NEVER_UPDATED to indicate that the object has never been updated (=new user), or UserCarrier.LATEST_UPDATE_NOT_SET to indicate that this information is not included in the carrier.</param>
            <param name="lastLoginDate">Date time of last login or UserCarrier.LAST_LOGIN_NEVER_LOGGED_IN.</param>
            <param name="previousLastLoginDate">The previous date time of last login or UserCarrier.LAST_LOGIN_NEVER_LOGGED_IN.</param>
            <param name="centralAdministration">Whether to handle the user in the central administration gui or not.</param>
            <param name="languageID">The users prefered language.</param>
            <param name="skin">The users prefered skin.</param>
            <param name="passwordSalt">Usersalt to use when encrypting password</param>
            <param name="passwordDate">The date when user last update the password.</param>
            <param name="status">The status of user.</param>
            <param name="loginFailureCount">How many times have someone try to login into account</param>
            <param name="groupMembershipIDs">IDs of groups in which the user is a member, or null to indicate that groups are not included in the carrier.</param>
            <param name="customPermissions">Custom permissions or null to indicate that these are not included.</param>
            <param name="modulePermissions">Module permissions or null to indicate that these are not included in the carrier.</param>
            <param name="solutionPermissions">Solution permissions or null to indicate that these are not included in the carrier.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.UserCarrier.CentralAdministration">
            <summary>
            Whether the user is handled in the central administration gui or not
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.UserCarrier.CreatedDate">
            <summary>
            Created date time.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.UserCarrier.CustomPermissions">
            <summary>
            Custom permissions
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.UserCarrier.DisplayName">
            <summary>
            User display name
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.UserCarrier.Email">
            <summary>
            User email
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.UserCarrier.Enabled">
            <summary>
            Whether the user is enabled or not
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.UserCarrier.EncryptedPassword">
            <summary>
            User password (encrypted) or null if not set
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.UserCarrier.GroupMembershipIDs">
            <summary>
            IDs of groups in which the user is a member (null = group IDs are not included in this carrier)
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.UserCarrier.ID">
            <summary>
            User ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.UserCarrier.LanguageID">
            <summary>
            The users prefered language.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.UserCarrier.LastLoginDate">
            <summary>
            Date time of latest login.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.UserCarrier.LatestUpdate">
            <summary>
            Latest update.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.UserCarrier.LoginFailureCount">
            <summary>
            Gets or sets the login failure count.
            </summary>
            <value>The login failure count.</value>
        </member>
        <member name="P:Litium.Foundation.Carriers.UserCarrier.LoginName">
            <summary>
            User login name.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.UserCarrier.ModulePermissions">
            <summary>
            All module permissions.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.UserCarrier.Path">
            <summary>
            The path to the user in a Directory (e.g. Active Directory or Novell E-Directory).
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.UserCarrier.PreviousLastLoginDate">
            <summary>
            The previous last login date.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.UserCarrier.PasswordSalt">
            <summary>
            Gets or sets the password salt.
            </summary>
            <value>The password salt.</value>
        </member>
        <member name="P:Litium.Foundation.Carriers.UserCarrier.PasswordDate">
            <summary>
            Gets or sets the password date.
            </summary>
            <value>The password date.</value>
        </member>
        <member name="P:Litium.Foundation.Carriers.UserCarrier.Skin">
            <summary>
             The users prefered skin.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.UserCarrier.SolutionPermissions">
            <summary>
            All solution permissions
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.UserCarrier.Status">
            <summary>
            The status of user
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.UserCarrier.Type">
            <summary>
            Get/set user type, see Litium.Foundation.Constants.AccountTypeConstants
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.UserCustomPermissionCarrier">
            <summary>
            The UserCustomPermissionCarrier describes a custom permission belonging to a user.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserCustomPermissionCarrier.ELEMENT_NAME">
            <summary>
            Xmlcarrier element name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserCustomPermissionCarrier.ATTRIBUTE_KEY">
            <summary>
            Key attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserCustomPermissionCarrier.ATTRIBUTE_MODULE_ID">
            <summary>
            Module ID attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserCustomPermissionCarrier.ATTRIBUTE_USER_ID">
            <summary>
            User ID attribute name
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.UserCustomPermissionCarrier.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.UserCustomPermissionCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.UserCustomPermissionCarrier.#ctor(System.Guid,System.Guid,System.Int32,System.Guid)">
            <summary>
            Constructor
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="key">Permission key.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.UserCustomPermissionCarrier.Clone">
            <summary>
            Returns a clone of the carrier
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.UserCustomPermissionCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.UserCustomPermissionCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier ax an XML element in the specified xml document.
            Does not insert the element into the XML document
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml element.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.UserCustomPermissionCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.UserCustomPermissionCarrier.SetValues(System.Guid,System.Guid,System.Int32,System.Guid)">
            <summary>
            Set carrier values.
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="key">Permission key.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.UserCustomPermissionCarrier.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.UserCustomPermissionCarrier.ModuleID">
            <summary>
            Module ID
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.UserCustomPermissionCarrier.UserID">
            <summary>
            User ID
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.UserModulePermissionCarrier">
            <summary>
            The UserModulePermissionCarrier describes a module permission belonging to a user.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserModulePermissionCarrier.ELEMENT_NAME">
            <summary>
            Xmlcarrier element name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserModulePermissionCarrier.ATTRIBUTE_MODULE_ID">
            <summary>
            Module ID attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserModulePermissionCarrier.ATTRIBUTE_USER_ID">
            <summary>
            User ID attribute name
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.UserModulePermissionCarrier.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.UserModulePermissionCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.UserModulePermissionCarrier.#ctor(System.Xml.XmlElement)">
            <summary>
            Constructor
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.UserModulePermissionCarrier.#ctor(System.Guid,System.Guid,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.UserModulePermissionCarrier.Clone">
            <summary>
            Returns a clone of the carrier
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.UserModulePermissionCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.UserModulePermissionCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier ax an XML element in the specified xml document.
            Does not insert the element into the XML document
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml element.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.UserModulePermissionCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.UserModulePermissionCarrier.SetValues(System.Guid,System.Guid,System.Int32)">
            <summary>
            Set carrier values
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.UserModulePermissionCarrier.ModuleID">
            <summary>
            Module ID
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.UserModulePermissionCarrier.UserID">
            <summary>
            User ID
            </summary>
        </member>
        <member name="T:Litium.Foundation.Carriers.UserSolutionPermissionCarrier">
            <summary>
            The UserSolutionPermissionCarrier describes a solution permission belonging to a user.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserSolutionPermissionCarrier.ELEMENT_NAME">
            <summary>
            Xmlcarrier element name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserSolutionPermissionCarrier.ATTRIBUTE_PERMISSION_TYPE">
            <summary>
            Permission type attribute name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Carriers.UserSolutionPermissionCarrier.ATTRIBUTE_USER_ID">
            <summary>
            User ID attribute name
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.UserSolutionPermissionCarrier.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Litium.Foundation.Carriers.UserSolutionPermissionCarrier.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.UserSolutionPermissionCarrier.#ctor(System.Xml.XmlElement)">
            <summary>
            Constructor
            </summary>
            <param name="xml">Xml data.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.UserSolutionPermissionCarrier.#ctor(System.Guid,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="userID">User ID.</param>
            <param name="permissionType">Permission type.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.UserSolutionPermissionCarrier.Clone">
            <summary>
            Returns a clone of the carrier
            </summary>
            <returns>A clone of the carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.UserSolutionPermissionCarrier.GetAsXml">
            <summary>
            Returns the carrier as XML
            </summary>
            <returns>The xml document.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.UserSolutionPermissionCarrier.GetAsXmlElement(System.Xml.XmlDocument)">
            <summary>
            Returns the carrier ax an XML element in the specified xml document.
            Does not insert the element into the XML document
            </summary>
            <param name="xmlDoc">XML document.</param>
            <returns>The xml element.</returns>
        </member>
        <member name="M:Litium.Foundation.Carriers.UserSolutionPermissionCarrier.Load(System.Xml.XmlElement)">
            <summary>
            Load from xml element
            </summary>
            <param name="element">Xml element.</param>
        </member>
        <member name="M:Litium.Foundation.Carriers.UserSolutionPermissionCarrier.SetValues(System.Guid,System.Int32)">
            <summary>
            Set carrier values
            </summary>
            <param name="userID">User ID.</param>
            <param name="permissionType">Permission type.</param>
        </member>
        <member name="P:Litium.Foundation.Carriers.UserSolutionPermissionCarrier.PermissionType">
            <summary>
            Permission type
            </summary>
        </member>
        <member name="P:Litium.Foundation.Carriers.UserSolutionPermissionCarrier.UserID">
            <summary>
            User ID
            </summary>
        </member>
        <member name="T:Litium.Foundation.Data.DatabaseConnectionFailureException">
            <summary>
            Thrown when connection to the database failed.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.DatabaseConnectionFailureException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.DatabaseConnectionFailureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Data.DatabaseConnectionFailureException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Litium.Foundation.Data.FileWriteFailureException">
            <summary>
            Thrown when the writing to the Files-folder failed.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.FileWriteFailureException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Data.FileWriteFailureException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.FileWriteFailureException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="fileDir">Files directory.</param>
        </member>
        <member name="M:Litium.Foundation.Data.FileWriteFailureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Data.FileWriteFailureException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Litium.Foundation.Data.LoadDALFailureException">
            <summary>
            Thrown when the DAL failed to load.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.LoadDALFailureException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.LoadDALFailureException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="description">Description.</param>
        </member>
        <member name="M:Litium.Foundation.Data.LoadDALFailureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Data.LoadDALFailureException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Litium.Foundation.Data.DataSettings">
            <summary>
            Data settings used in the data access layer.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Data.DataSettings.DEFAULT_DAL_CLASS_NAME">
            <summary>
            Constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Data.DataSettings.UNKNOWN_IP">
            <summary>
            Constant.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Data.DataSettings.UNKNOWN_MAC">
            <summary>
            Constant.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.DataSettings.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="connectionString">Connection string.</param>
            <param name="filesDirectory">Files directory (complete path, example: "c:\inetpub\Files").</param>
        </member>
        <member name="M:Litium.Foundation.Data.DataSettings.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="connectionString">Connection string.</param>
            <param name="filesDirectory">Files directory (complete path, example: "c:\inetpub\Files").</param>
            <param name="dalClassName">Name of DAL class name.</param>
        </member>
        <member name="P:Litium.Foundation.Data.DataSettings.EVENT_DELETE_AGE">
            <summary>
            Gets the Eventlog Max item age.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Data.DataSettings.EVENT_DELETE_INTERVAL">
            <summary>
            Gets the Eventlog delete interval
            </summary>
        </member>
        <member name="P:Litium.Foundation.Data.DataSettings.EVENT_POLL_INTERVAL">
            <summary>
            Gets the Eventlog poll interval
            </summary>
        </member>
        <member name="P:Litium.Foundation.Data.DataSettings.ConnectionString">
            <summary>
            Connection string.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Data.DataSettings.CommandTimeouts">
            <summary>
            Timeouts.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Data.DataSettings.DALClassName">
            <summary>
            DAL class name.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Data.DataSettings.FilesDirectory">
            <summary>
            Files directory (complete path, example: "c:\inetpub\Files").
            </summary>
        </member>
        <member name="P:Litium.Foundation.Data.DataSettings.WebServerIP">
            <summary>
            Web server IP (example: "127.0.0.1").
            </summary>
        </member>
        <member name="P:Litium.Foundation.Data.DataSettings.WebServerMac">
            <summary>
            Web server MAC (example: "00-17-A4-DD-DE-06").
            </summary>
        </member>
        <member name="T:Litium.Foundation.Data.IDAL">
            <summary>
            Data Access Layer interface.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.IDAL.Init">
            <summary>
            Inits the DAL.
            Tests the connection and throws a DatabaseConnectionFailureException if connecting to the database failed.
            </summary>
            <exception cref="T:Litium.Foundation.Data.DatabaseConnectionFailureException">Thrown when connecting to the database failed.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.IDAL.RaiseUnhandledEvents">
            <summary>
            Raises any unhandled events.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Data.IDAL.ModulePanelData">
            <summary>
            Gets the module panel data.
            </summary>
            <value>The module panel data.</value>
        </member>
        <member name="P:Litium.Foundation.Data.IDAL.DataSettings">
            <summary>
            Data settings for the DAL.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Data.IDAL.CurrencyData">
            <summary>
            Currency data provider.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Data.IDAL.EventData">
            <summary>
            Event data provider.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Data.IDAL.GroupData">
            <summary>
            Group data provider.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Data.IDAL.LanguageData">
            <summary>
            Language data provider.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Data.IDAL.LogData">
            <summary>
            Log data provider.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Data.IDAL.ModuleData">
            <summary>
            Module data provider.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Data.IDAL.PermissionData">
            <summary>
            Permission data provider.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Data.IDAL.SolutionData">
            <summary>
            Solution data provider.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Data.IDAL.SpellingDictionaryData">
            <summary>
            Gets the spelling dictionary dataprovider.
            </summary>
            <value>The spelling dictionary dataprovider.</value>
        </member>
        <member name="P:Litium.Foundation.Data.IDAL.StringsData">
            <summary>
            Strings data provider.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Data.IDAL.UserData">
            <summary>
            User data provider.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Data.MSSQL.DAL">
            <summary>
            Implementation of Data Access Layer.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.DAL.Init">
            <summary>
            Inits the DAL.
            Tests the connection and throws a DatabaseConnectionFailureException if connecting to the database failed.
            </summary>
            <exception cref="T:Litium.Foundation.Data.DatabaseConnectionFailureException">Thrown when connecting to the database failed.</exception>
        </member>
        <member name="M:Litium.Foundation.Data.MSSQL.DAL.RaiseUnhandledEvents">
            <summary>
            Raises any unhandled events.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Data.MSSQL.DAL.ModulePanelData">
            <summary>
            Gets the add on data.
            </summary>
            <value>The add on data.</value>
        </member>
        <member name="P:Litium.Foundation.Data.MSSQL.DAL.DataSettings">
            <summary>
            Data settings for the DAL.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Data.MSSQL.DAL.CurrencyData">
            <summary>
            Event data provider.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Data.MSSQL.DAL.EventData">
            <summary>
            Event data provider.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Data.MSSQL.DAL.GroupData">
            <summary>
            Group data provider.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Data.MSSQL.DAL.LanguageData">
            <summary>
            Language data provider.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Data.MSSQL.DAL.LogData">
            <summary>
            Log data provider.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Data.MSSQL.DAL.ModuleData">
            <summary>
            Module data provider.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Data.MSSQL.DAL.PermissionData">
            <summary>
            Permission data provider.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Data.MSSQL.DAL.SolutionData">
            <summary>
            Solution data provider.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Data.MSSQL.DAL.SpellingDictionaryData">
            <summary>
            Gets the spelling dictionary dataprovider.
            </summary>
            <value>The spelling dictionary dataprovider.</value>
        </member>
        <member name="P:Litium.Foundation.Data.MSSQL.DAL.StringsData">
            <summary>
            Strings data provider.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Data.MSSQL.DAL.UserData">
            <summary>
            User data provider.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Events.EventHandlers">
            <summary>
            Event handlers.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Events.EventHandlers.CurrencyHandler">
            <summary>
            Currency Handler
            </summary>
            <param name="currencyID">Currency ID.</param>
        </member>
        <member name="T:Litium.Foundation.Events.EventHandlers.GroupCustomPermissionHandler">
            <summary>
            Group Custom Permission Handler
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission Type ID.</param>
            <param name="key">Key.</param>
        </member>
        <member name="T:Litium.Foundation.Events.EventHandlers.GroupHandler">
            <summary>
            Group handler
            </summary>
            <param name="groupID">Group ID.</param>
        </member>
        <member name="T:Litium.Foundation.Events.EventHandlers.GroupMembershipHandler">
            <summary>
            Group membership handler.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="userID">User ID.</param>
        </member>
        <member name="T:Litium.Foundation.Events.EventHandlers.GroupModulePermissionHandler">
            <summary>
            Group module permission handler.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission Type ID.</param>
        </member>
        <member name="T:Litium.Foundation.Events.EventHandlers.GroupSolutionPermissionHandler">
            <summary>
            Group solution permission handler.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="permissionType">Permission Type ID.</param>
        </member>
        <member name="T:Litium.Foundation.Events.EventHandlers.LanguageHandler">
            <summary>
            Language handler.
            </summary>
            <param name="languageID">Language.</param>
        </member>
        <member name="T:Litium.Foundation.Events.EventHandlers.ModuleHandler">
            <summary>
            Module Handler.
            </summary>
            <param name="moduleID">Module ID.</param>
        </member>
        <member name="T:Litium.Foundation.Events.EventHandlers.ModuleStringHandler">
            <summary>
            Module string handler.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="key">ModuleString key.</param>
            <param name="languageID">Language ID.</param>
            <param name="value">ModuleString value.</param>
        </member>
        <member name="T:Litium.Foundation.Events.EventHandlers.SpellingDictionaryHandler">
            <summary>
            Spelling dictonary handler.
            </summary>
            <param name="languages">Languages.</param>
            <param name="userID">User.</param>
        </member>
        <member name="T:Litium.Foundation.Events.EventHandlers.SystemStringHandler">
            <summary>
            System string handler.
            </summary>
            <param name="key">Key.</param>
            <param name="languageID">Language.</param>
            <param name="value">Value.</param>
        </member>
        <member name="T:Litium.Foundation.Events.EventHandlers.UserCustomPermissionHandler">
            <summary>
            User custom permission handler.
            </summary>
            <param name="userID">User.</param>
            <param name="moduleID">Module.</param>
            <param name="permissionType">Permission type.</param>
            <param name="key">Key.</param>
        </member>
        <member name="T:Litium.Foundation.Events.EventHandlers.UserHandler">
            <summary>
            User handler.
            </summary>
            <param name="userID">User.</param>
        </member>
        <member name="T:Litium.Foundation.Events.EventHandlers.UserModulePermissionHandler">
            <summary>
            User permission handler.
            </summary>
            <param name="userID">User.</param>
            <param name="moduleID">Module.</param>
            <param name="permissionType">Permission type.</param>
        </member>
        <member name="T:Litium.Foundation.Events.EventHandlers.UserSolutionPermissionHandler">
            <summary>
            User solution permission handler.
            </summary>
            <param name="userID">User.</param>
            <param name="permissionType">Permission type.</param>
        </member>
        <member name="T:Litium.Foundation.Events.EventHandlers.StorageItemDeletedHandler">
            <summary>
            Storage item deleted handler.
            </summary>
            <param name="storagePath">Path to item deleted.</param>
        </member>
        <member name="T:Litium.Foundation.Events.EventHandlers.EventDispatchedHandler">
            <summary>
            Event dispatched handler.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Events.EventManager">
            <summary>
            The EventManager handles events in Litium Foundation.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Events.EventManager.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Events.EventManager.RaiseCurrencyCreated(System.Guid)">
            <summary>
            Raise the event.
            </summary>
            <param name="currencyID">Currency ID.</param>
        </member>
        <member name="M:Litium.Foundation.Events.EventManager.RaiseCurrencyDeleted(System.Guid)">
            <summary>
            Raise the event.
            </summary>
            <param name="currencyID">Currency ID.</param>
        </member>
        <member name="M:Litium.Foundation.Events.EventManager.RaiseCurrencyUpdated(System.Guid)">
            <summary>
            Raise the event.
            </summary>
            <param name="currencyID">Currency ID.</param>
        </member>
        <member name="M:Litium.Foundation.Events.EventManager.RaiseGroupCustomPermissionCreated(System.Guid,System.Guid,System.Int32,System.Guid)">
            <summary>
            Raise the event.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="key">Permission key.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
        </member>
        <member name="M:Litium.Foundation.Events.EventManager.RaiseGroupCustomPermissionDeleted(System.Guid,System.Guid,System.Int32,System.Guid)">
            <summary>
            Raise the event.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="key">Permission key.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
        </member>
        <member name="M:Litium.Foundation.Events.EventManager.RaiseGroupMembershipCreated(System.Guid,System.Guid)">
            <summary>
            Raise the event.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="userID">User ID.</param>
        </member>
        <member name="M:Litium.Foundation.Events.EventManager.RaiseGroupMembershipDeleted(System.Guid,System.Guid)">
            <summary>
            Raise the event.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="userID">User ID.</param>
        </member>
        <member name="M:Litium.Foundation.Events.EventManager.RaiseGroupModulePermissionCreated(System.Guid,System.Guid,System.Int32)">
            <summary>
            Raise the event.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
        </member>
        <member name="M:Litium.Foundation.Events.EventManager.RaiseGroupModulePermissionDeleted(System.Guid,System.Guid,System.Int32)">
            <summary>
            Raise the event.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
        </member>
        <member name="M:Litium.Foundation.Events.EventManager.RaiseGroupSolutionPermissionCreated(System.Guid,System.Int32)">
            <summary>
            Raise the event.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="permissionType">Permission type.</param>
        </member>
        <member name="M:Litium.Foundation.Events.EventManager.RaiseGroupSolutionPermissionDeleted(System.Guid,System.Int32)">
            <summary>
            Raise the event.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="permissionType">Permission type.</param>
        </member>
        <member name="M:Litium.Foundation.Events.EventManager.RaiseGroupCreated(System.Guid)">
            <summary>
            Raise the event.
            </summary>
            <param name="groupID">Group ID.</param>
        </member>
        <member name="M:Litium.Foundation.Events.EventManager.RaiseGroupDeleted(System.Guid)">
            <summary>
            Raise the event.
            </summary>
            <param name="groupID">Group ID.</param>
        </member>
        <member name="M:Litium.Foundation.Events.EventManager.RaiseGroupUpdated(System.Guid)">
            <summary>
            Raise the event.
            </summary>
            <param name="groupID">Group ID.</param>
        </member>
        <member name="M:Litium.Foundation.Events.EventManager.RaiseLanguageCreated(System.Guid)">
            <summary>
            Raise the event.
            </summary>
            <param name="languageID">Language ID.</param>
        </member>
        <member name="M:Litium.Foundation.Events.EventManager.RaiseLanguageDeleted(System.Guid)">
            <summary>
            Raise the event.
            </summary>
            <param name="languageID">Language ID.</param>
        </member>
        <member name="M:Litium.Foundation.Events.EventManager.RaiseLanguageUpdated(System.Guid)">
            <summary>
            Raise the event.
            </summary>
            <param name="languageID">Language ID.</param>
        </member>
        <member name="M:Litium.Foundation.Events.EventManager.RaiseModuleCreated(System.Guid)">
            <summary>
            Raise the event.
            </summary>
            <param name="moduleID">Module ID.</param>
        </member>
        <member name="M:Litium.Foundation.Events.EventManager.RaiseModuleDeleted(System.Guid)">
            <summary>
            Raise the event.
            </summary>
            <param name="moduleID">Module ID.</param>
        </member>
        <member name="M:Litium.Foundation.Events.EventManager.RaiseModuleUpdated(System.Guid)">
            <summary>
            Raise the event.
            </summary>
            <param name="moduleID">Module ID.</param>
        </member>
        <member name="M:Litium.Foundation.Events.EventManager.RaiseModuleStringCreated(System.Guid,System.Guid,System.String,System.String)">
            <summary>
            Raise the event.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="languageID">Language ID.</param>
            <param name="key">String key.</param>
            <param name="value">String value.</param>
        </member>
        <member name="M:Litium.Foundation.Events.EventManager.RaiseModuleStringDeleted(System.Guid,System.Guid,System.String,System.String)">
            <summary>
            Raise the event.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="languageID">Language ID.</param>
            <param name="key">String key.</param>
            <param name="value">String value.</param>
        </member>
        <member name="M:Litium.Foundation.Events.EventManager.RaiseModuleStringUpdated(System.Guid,System.Guid,System.String,System.String)">
            <summary>
            Raise the event.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="languageID">Language ID.</param>
            <param name="key">String key.</param>
            <param name="value">String value.</param>
        </member>
        <member name="M:Litium.Foundation.Events.EventManager.RaiseSpellingDictionaryCreate(System.String,System.Guid)">
            <summary>
            Raises the spelling dictionary create.
            </summary>
            <param name="language">The language.</param>
            <param name="userID">The user ID.</param>
        </member>
        <member name="M:Litium.Foundation.Events.EventManager.RaiseSpellingDictionaryDeleted(System.String,System.Guid)">
            <summary>
            Raises the spelling dictionary deleted.
            </summary>
            <param name="language">The language.</param>
            <param name="userID">The user ID.</param>
        </member>
        <member name="M:Litium.Foundation.Events.EventManager.RaiseSpellingDictionaryUpdated(System.String,System.Guid)">
            <summary>
            Raises the spelling dictionary updated.
            </summary>
            <param name="language">The language.</param>
            <param name="userID">The user ID.</param>
        </member>
        <member name="M:Litium.Foundation.Events.EventManager.RaiseSystemStringCreated(System.Guid,System.String,System.String)">
            <summary>
            Raise the event.
            </summary>
            <param name="languageID">Language ID.</param>
            <param name="key">String key.</param>
            <param name="value">String value.</param>
        </member>
        <member name="M:Litium.Foundation.Events.EventManager.RaiseSystemStringDeleted(System.Guid,System.String,System.String)">
            <summary>
            Raise the event.
            </summary>
            <param name="languageID">Language ID.</param>
            <param name="key">String key.</param>
            <param name="value">String value.</param>
        </member>
        <member name="M:Litium.Foundation.Events.EventManager.RaiseSystemStringUpdated(System.Guid,System.String,System.String)">
            <summary>
            This method is called from the data tier when a system string has been updated
            </summary>
            <param name="languageID">Language ID.</param>
            <param name="key">String key.</param>
            <param name="value">String value.</param>
        </member>
        <member name="M:Litium.Foundation.Events.EventManager.RaiseUnhandledEvents">
            <summary>
            Raises any unhandled events.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Events.EventManager.RaiseUserCustomPermissionCreated(System.Guid,System.Guid,System.Int32,System.Guid)">
            <summary>
            Raise the event.
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="key">Permission key.</param>
        </member>
        <member name="M:Litium.Foundation.Events.EventManager.RaiseUserCustomPermissionDeleted(System.Guid,System.Guid,System.Int32,System.Guid)">
            <summary>
            Raise the event.
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="key">Permission key.</param>
        </member>
        <member name="M:Litium.Foundation.Events.EventManager.RaiseUserModulePermissionCreated(System.Guid,System.Guid,System.Int32)">
            <summary>
            UserModulePermissionCreated event
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
        </member>
        <member name="M:Litium.Foundation.Events.EventManager.RaiseUserModulePermissionDeleted(System.Guid,System.Guid,System.Int32)">
            <summary>
            UserModulePermissionDeleted event
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
        </member>
        <member name="M:Litium.Foundation.Events.EventManager.RaiseUserSolutionPermissionCreated(System.Guid,System.Int32)">
            <summary>
            UserSolutionPermissionCreated event
            </summary>
            <param name="userID">User ID.</param>
            <param name="permissionType">Permission type.</param>
        </member>
        <member name="M:Litium.Foundation.Events.EventManager.RaiseUserSolutionPermissionDeleted(System.Guid,System.Int32)">
            <summary>
            UserSolutionPermissionDeleted event
            </summary>
            <param name="userID">User ID.</param>
            <param name="permissionType">Permission type.</param>
        </member>
        <member name="M:Litium.Foundation.Events.EventManager.RaiseUserCreated(System.Guid)">
            <summary>
            This method is called from the data tier when a user is created
            </summary>
            <param name="userID">User ID.</param>
        </member>
        <member name="M:Litium.Foundation.Events.EventManager.RaiseUserDeleted(System.Guid)">
            <summary>
            This method is called from the data tier when a user is deleted
            </summary>
            <param name="userID">User ID.</param>
        </member>
        <member name="M:Litium.Foundation.Events.EventManager.RaiseUserLoggedIn(System.Guid)">
            <summary>
            This method is called from the data tier when a user is logged in
            </summary>
            <param name="userID">User ID.</param>
        </member>
        <member name="M:Litium.Foundation.Events.EventManager.RaiseUserLoggedOut(System.Guid)">
            <summary>
            This method is called from the data tier when a user is logged out
            </summary>
            <param name="userID">User ID.</param>
        </member>
        <member name="M:Litium.Foundation.Events.EventManager.RaiseUserUpdated(System.Guid)">
            <summary>
            This method is called from the data tier when a user is updated
            </summary>
            <param name="userID">User ID.</param>
        </member>
        <member name="M:Litium.Foundation.Events.EventManager.RaiseStorageItemDeleted(System.String)">
            <summary>
            This method is called from the data tier when a user is updated
            </summary>
            <param name="storagePath">The storage path.</param>
        </member>
        <member name="P:Litium.Foundation.Events.EventManager.CanRaiseCurrencyCreated">
            <summary>
            Returns whether the event can be raised.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Events.EventManager.CanRaiseCurrencyDeleted">
            <summary>
            Returns whether the event can be raised.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Events.EventManager.CanRaiseCurrencyUpdated">
            <summary>
            Returns whether the event can be raised.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Events.EventManager.CanRaiseGroupCustomPermissionCreated">
            <summary>
            Returns whether the event can be raised.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Events.EventManager.CanRaiseGroupCustomPermissionDeleted">
            <summary>
            Returns whether the event can be raised.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Events.EventManager.CanRaiseGroupModulePermissionCreated">
            <summary>
            Returns whether the event can be raised.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Events.EventManager.CanRaiseGroupModulePermissionDeleted">
            <summary>
            Returns whether the event can be raised.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Events.EventManager.CanRaiseGroupSolutionPermissionCreated">
            <summary>
            Returns whether the event can be raised.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Events.EventManager.CanRaiseGroupSolutionPermissionDeleted">
            <summary>
            Returns whether the event can be raised.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Events.EventManager.CanRaiseGroupCreated">
            <summary>
            Returns whether the event can be raised.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Events.EventManager.CanRaiseGroupDeleted">
            <summary>
            Returns whether the event can be raised.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Events.EventManager.CanRaiseGroupUpdated">
            <summary>
            Returns whether the event can be raised.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Events.EventManager.CanRaiseGroupMembershipCreated">
            <summary>
            Returns whether the event can be raised.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Events.EventManager.CanRaiseGroupMembershipDeleted">
            <summary>
            Returns whether the event can be raised.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Events.EventManager.CanRaiseLanguageCreated">
            <summary>
            Returns whether the event can be raised.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Events.EventManager.CanRaiseLanguageDeleted">
            <summary>
            Returns whether the event can be raised.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Events.EventManager.CanRaiseLanguageUpdated">
            <summary>
            Returns whether the event can be raised.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Events.EventManager.CanRaiseModuleCreated">
            <summary>
            Returns whether the event can be raised.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Events.EventManager.CanRaiseModuleDeleted">
            <summary>
            Returns whether the event can be raised.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Events.EventManager.CanRaiseModuleUpdated">
            <summary>
            Returns whether the event can be raised.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Events.EventManager.CanRaiseModuleStringCreated">
            <summary>
            Returns whether the event can be raised.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Events.EventManager.CanRaiseModuleStringDeleted">
            <summary>
            Returns whether the event can be raised.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Events.EventManager.CanRaiseModuleStringUpdated">
            <summary>
            Returns whether the event can be raised.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Events.EventManager.CanRaiseSpellDictionaryCreated">
            <summary>
            Gets a value indicating whether this instance can raise spell dictionary created.
            </summary>
            <value>
            	<c>true</c> if this instance can raise spell dictionary created; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Litium.Foundation.Events.EventManager.CanRaiseSpellDictionaryDeleted">
            <summary>
            Gets a value indicating whether this instance can raise spell dictionary deleted.
            </summary>
            <value>
            	<c>true</c> if this instance can raise spell dictionary deleted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Litium.Foundation.Events.EventManager.CanRaiseSpellDictionaryUpdated">
            <summary>
            Gets a value indicating whether this instance can raise spell dictionary updated.
            </summary>
            <value>
            	<c>true</c> if this instance can raise spell dictionary updated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Litium.Foundation.Events.EventManager.CanRaiseSystemStringCreated">
            <summary>
            Returns whether the event can be raised.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Events.EventManager.CanRaiseSystemStringDeleted">
            <summary>
            Returns whether the event can be raised.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Events.EventManager.CanRaiseSystemStringUpdated">
            <summary>
            Returns whether the event can be raised.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Events.EventManager.CanRaiseUserCustomPermissionCreated">
            <summary>
            Returns whether the event can be raised.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Events.EventManager.CanRaiseUserCustomPermissionDeleted">
            <summary>
            Returns whether the event can be raised.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Events.EventManager.CanRaiseUserModulePermissionCreated">
            <summary>
            Returns whether the event can be raised.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Events.EventManager.CanRaiseUserModulePermissionDeleted">
            <summary>
            Returns whether the event can be raised.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Events.EventManager.CanRaiseUserSolutionPermissionCreated">
            <summary>
            Returns whether the event can be raised.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Events.EventManager.CanRaiseUserSolutionPermissionDeleted">
            <summary>
            Returns whether the event can be raised.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Events.EventManager.CanRaiseUserCreated">
            <summary>
            Returns whether the event can be raised.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Events.EventManager.CanRaiseUserDeleted">
            <summary>
            Returns whether the event can be raised.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Events.EventManager.CanRaiseUserLoggedIn">
            <summary>
            Returns whether the event can be raised.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Events.EventManager.CanRaiseUserLoggedOut">
            <summary>
            Returns whether the event can be raised.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Events.EventManager.CanRaiseUserUpdated">
            <summary>
            Returns whether the event can be raised.
            </summary>
        </member>
        <member name="E:Litium.Foundation.Events.EventManager.CurrencyCreated">
            <summary>
            CurrencyCreated
            </summary>
        </member>
        <member name="E:Litium.Foundation.Events.EventManager.CurrencyDeleted">
            <summary>
            CurrencyDeleted
            </summary>
        </member>
        <member name="E:Litium.Foundation.Events.EventManager.CurrencyUpdated">
            <summary>
            CurrencyUpdated
            </summary>
        </member>
        <member name="E:Litium.Foundation.Events.EventManager.GroupCustomPermissionCreated">
            <summary>
            GroupCustomPermissionCreated
            </summary>
        </member>
        <member name="E:Litium.Foundation.Events.EventManager.GroupCustomPermissionDeleted">
            <summary>
            GroupCustomPermissionDeleted
            </summary>
        </member>
        <member name="E:Litium.Foundation.Events.EventManager.GroupModulePermissionCreated">
            <summary>
            GroupModulePermissionCreated
            </summary>
        </member>
        <member name="E:Litium.Foundation.Events.EventManager.GroupModulePermissionDeleted">
            <summary>
            GroupModulePermissionDeleted
            </summary>
        </member>
        <member name="E:Litium.Foundation.Events.EventManager.GroupSolutionPermissionCreated">
            <summary>
            GroupSolutionPermissionCreated
            </summary>
        </member>
        <member name="E:Litium.Foundation.Events.EventManager.GroupSolutionPermissionDeleted">
            <summary>
            GroupSolutionPermissionDeleted
            </summary>
        </member>
        <member name="E:Litium.Foundation.Events.EventManager.GroupCreated">
            <summary>
            GroupCreated
            </summary>
        </member>
        <member name="E:Litium.Foundation.Events.EventManager.GroupDeleted">
            <summary>
            GroupDeleted
            </summary>
        </member>
        <member name="E:Litium.Foundation.Events.EventManager.GroupUpdated">
            <summary>
            GroupUpdated
            </summary>
        </member>
        <member name="E:Litium.Foundation.Events.EventManager.GroupMembershipCreated">
            <summary>
            GroupMembershipCreated
            </summary>
        </member>
        <member name="E:Litium.Foundation.Events.EventManager.GroupMembershipDeleted">
            <summary>
            GroupMembershipDeleted
            </summary>
        </member>
        <member name="E:Litium.Foundation.Events.EventManager.LanguageCreated">
            <summary>
            LanguageCreated
            </summary>
        </member>
        <member name="E:Litium.Foundation.Events.EventManager.LanguageDeleted">
            <summary>
            LanguageDeleted
            </summary>
        </member>
        <member name="E:Litium.Foundation.Events.EventManager.LanguageUpdated">
            <summary>
            LanguageUpdated
            </summary>
        </member>
        <member name="E:Litium.Foundation.Events.EventManager.ModuleCreated">
            <summary>
            ModuleCreated
            </summary>
        </member>
        <member name="E:Litium.Foundation.Events.EventManager.ModuleDeleted">
            <summary>
            ModuleDeleted
            </summary>
        </member>
        <member name="E:Litium.Foundation.Events.EventManager.ModuleUpdated">
            <summary>
            ModuleUpdated
            </summary>
        </member>
        <member name="E:Litium.Foundation.Events.EventManager.ModuleStringCreated">
            <summary>
            ModuleStringCreated
            </summary>
        </member>
        <member name="E:Litium.Foundation.Events.EventManager.ModuleStringDeleted">
            <summary>
            ModuleStringDeleted
            </summary>
        </member>
        <member name="E:Litium.Foundation.Events.EventManager.ModuleStringUpdated">
            <summary>
            ModuleStringUpdated
            </summary>
        </member>
        <member name="E:Litium.Foundation.Events.EventManager.SpellingDictionaryCreated">
            <summary>
            SpellingDictionaryCreated
            </summary>
        </member>
        <member name="E:Litium.Foundation.Events.EventManager.SpellingDictionaryDeleted">
            <summary>
            SpellingDictionaryDeleted
            </summary>
        </member>
        <member name="E:Litium.Foundation.Events.EventManager.SpellingDictionaryUpdated">
            <summary>
            SpellingDictionaryUpdated
            </summary>
        </member>
        <member name="E:Litium.Foundation.Events.EventManager.SystemStringCreated">
            <summary>
            SystemStringCreated
            </summary>
        </member>
        <member name="E:Litium.Foundation.Events.EventManager.SystemStringDeleted">
            <summary>
            SystemStringDeleted
            </summary>
        </member>
        <member name="E:Litium.Foundation.Events.EventManager.SystemStringUpdated">
            <summary>
            SystemStringUpdated
            </summary>
        </member>
        <member name="E:Litium.Foundation.Events.EventManager.UserCustomPermissionCreated">
            <summary>
            UserCustomPermissionCreated
            </summary>
        </member>
        <member name="E:Litium.Foundation.Events.EventManager.UserCustomPermissionDeleted">
            <summary>
            UserCustomPermissionDeleted
            </summary>
        </member>
        <member name="E:Litium.Foundation.Events.EventManager.UserModulePermissionCreated">
            <summary>
            UserModulePermissionCreated
            </summary>
        </member>
        <member name="E:Litium.Foundation.Events.EventManager.UserModulePermissionDeleted">
            <summary>
            UserModulePermissionDeleted
            </summary>
        </member>
        <member name="E:Litium.Foundation.Events.EventManager.UserSolutionPermissionCreated">
            <summary>
            UserSolutionPermissionCreated
            </summary>
        </member>
        <member name="E:Litium.Foundation.Events.EventManager.UserSolutionPermissionDeleted">
            <summary>
            UserSolutionPermissionDeleted
            </summary>
        </member>
        <member name="E:Litium.Foundation.Events.EventManager.UserCreated">
            <summary>
            UserCreated
            </summary>
        </member>
        <member name="E:Litium.Foundation.Events.EventManager.UserDeleted">
            <summary>
            UserDeleted
            </summary>
        </member>
        <member name="E:Litium.Foundation.Events.EventManager.UserLoggedIn">
            <summary>
            UserLoggedIn
            </summary>
        </member>
        <member name="E:Litium.Foundation.Events.EventManager.UserLoggedOut">
            <summary>
            UserLoggedOut
            </summary>
        </member>
        <member name="E:Litium.Foundation.Events.EventManager.UserUpdated">
            <summary>
            UserUpdated
            </summary>
        </member>
        <member name="E:Litium.Foundation.Events.EventManager.StorageItemDeleted">
            <summary>
            Occurs when a storage item gets deleted.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Languages.LanguageExistsException">
            <summary>
            Thrown when trying to create a language with a culture or name that already exists.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Languages.LanguageExistsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Languages.LanguageExistsException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Languages.LanguageExistsException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="cultureOrName">Language culture or name.</param>
        </member>
        <member name="M:Litium.Foundation.Languages.LanguageExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Languages.LanguageExistsException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Litium.Foundation.Languages.LanguageExistsException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="P:Litium.Foundation.Languages.LanguageExistsException.LanguageNameCulture">
            <summary>
            Language name or culture.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Languages.Language">
            <summary>
            The solution has at least one language and there is always a default language. 
            A language has a unique culture and language name.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Languages.Language.UNKNOWN_FLAG_NAME">
            <summary>
            Constant for white flag
            </summary>
        </member>
        <member name="M:Litium.Foundation.Languages.Language.#ctor(System.Guid)">
            <summary>
            Protected constructor to allow inheritans.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Languages.Language.#ctor(Litium.Foundation.Carriers.LanguageCarrier)">
            <summary>
            Constructor.
            </summary>
            <param name="language">Language carrier.</param>
        </member>
        <member name="M:Litium.Foundation.Languages.Language.GetCultureInfoByKey(System.String)">
            <summary>
            Gets the culture info by key. 
            key is the two letter ISO region name in RegionInfo.TwoLetterISORegionName
            </summary>
            <param name="key">The key, the two letter ISO region name in RegionInfo.TwoLetterISORegionName</param>
            <returns>Culture info if found.</returns>
        </member>
        <member name="M:Litium.Foundation.Languages.Language.GetFlagName(System.Globalization.CultureInfo)">
            <summary>
            Returns flag image name for a culture info by using the region info of the culture info.
            </summary>
            <param name="cultureInfo">Culture info.</param>
            <returns>Flag image name for a culture info by using the region info of the culture info.</returns>
        </member>
        <member name="M:Litium.Foundation.Languages.Language.GetFlagName(System.Globalization.RegionInfo)">
            <summary>
            Returns flag image name for a region info.
            </summary>
            <param name="regionInfo">Region info.</param>
            <returns>Flag image name for a region info.</returns>
        </member>
        <member name="M:Litium.Foundation.Languages.Language.GetFlagName(System.String)">
            <summary>
            Gets the name of the flag, given ISO two letter region name
            </summary>
            <param name="twoLetterISORegionName">Name of the two letter ISO region.</param>
            <returns>name of the flag, or <see cref="F:Litium.Foundation.Languages.Language.UNKNOWN_FLAG_NAME"/> string.</returns>
        </member>
        <member name="M:Litium.Foundation.Languages.Language.GetFlagPath(System.Globalization.CultureInfo)">
            <summary>
            Returns flag image path for a culture info by using the region info of the culture info.
            </summary>
            <param name="cultureInfo">Culture info.</param>
            <returns>Flag image path name for a culture info by using the region info of the culture info.</returns>
        </member>
        <member name="M:Litium.Foundation.Languages.Language.GetOriginalFlagPath">
            <summary>
            Returns original flag image path to mark a translation original page.
            </summary>
            <returns>Original flag image path to mark a translation original page.</returns>
        </member>
        <member name="M:Litium.Foundation.Languages.Language.GetUnknownFlagPath">
            <summary>
            Returns white flag image path to mark a web site that has unknown culture.
            </summary>
            <returns>White flag image path to mark a web site that has unknown culture..</returns>
        </member>
        <member name="M:Litium.Foundation.Languages.Language.SetAsDefaultLanguage(Litium.Foundation.Security.SecurityToken)">
            <summary>
            Set as the default language.
            </summary>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Languages.Language.SetCulture(System.Globalization.CultureInfo,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Set culture.
            </summary>
            <param name="culture">Culture info.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Languages.Language.SetName(System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Set name.
            </summary>
            <param name="name">Name.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Languages.Language.Delete(Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes the language.
            </summary>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.Languages.LanguageDoesNotExistException">Thrown when a language does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Languages.Language.GetAsCarrier">
            <summary>
            Returns the language as a carrier class.
            </summary>
            <returns>The language as a carrier class.</returns>
        </member>
        <member name="M:Litium.Foundation.Languages.Language.Refresh">
            <summary>
            Refreshes this language.
            </summary>
            <exception cref="T:Litium.Foundation.Languages.LanguageDoesNotExistException">Thrown when a language does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Languages.Language.Update(System.String,System.Globalization.CultureInfo,System.Boolean,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Update the language.
            </summary>
            <param name="name">Name.</param>
            <param name="culture">Culture info.</param>
            <param name="isDefault">Whether the language is the default language or not.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Languages.Language.UpdateFromCarrier(Litium.Foundation.Carriers.LanguageCarrier,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Updates the language from a carrier class.
            </summary>
            <param name="carrier">Language carrier.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.Languages.LanguageDoesNotExistException">Thrown when a language does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Languages.Language.Populate(Litium.Foundation.Carriers.LanguageCarrier)">
            <summary>
            Loads values from carrier.
            </summary>
            <param name="carrier">Carrier to populate from.</param>
        </member>
        <member name="M:Litium.Foundation.Languages.Language.CompareTo(Litium.Foundation.Languages.Language)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings:
            Value
            Meaning
            Less than zero
            This object is less than the <paramref name="other"/> parameter.
            Zero
            This object is equal to <paramref name="other"/>.
            Greater than zero
            This object is greater than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:Litium.Foundation.Languages.Language.GetRegionInfo(System.Globalization.CultureInfo)">
            <summary>
            Gets the region info for a given culture info.
            </summary>
            <param name="cultureInfo">The culture info.</param>
            <returns>Region info for specified culture</returns>
        </member>
        <member name="M:Litium.Foundation.Languages.Language.GetCountryEnglishName(System.String)">
            <summary>
            English name of the country, from the given two letter code.
            if not found two letter code is returned.
            </summary>
            <param name="twoLetterISORegionName">Name of the two letter ISO region.</param>
            <returns>
            English name of the country, from the given culture info., if not found two letter code is returned.
            </returns>
        </member>
        <member name="M:Litium.Foundation.Languages.Language.GetThreeLetterISOLanguageName(System.String)">
            <summary>
            Gets the name of the three letter ISO language. if culture is null, ENG (English) is returned.
            </summary>
            <param name="cultureName">Name of the culture.</param>
            <returns></returns>
        </member>
        <member name="P:Litium.Foundation.Languages.Language.Culture">
            <summary>
            Returns the language culture info.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Languages.Language.ID">
            <summary>
            Returns the language ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Languages.Language.IsDeleted">
            <summary>
            Returns whether the language is deleted or not.
            This information is always up to date (never cached).
            </summary>
        </member>
        <member name="P:Litium.Foundation.Languages.Language.IsDefaultLanguage">
            <summary>
            Returns whether this language is the default language.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Languages.Language.Name">
            <summary>
            Returns the language name.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Languages.LanguageCollection">
            <summary>
            A collection of all languages.
            Enumerates over Language instances.
            </summary>
            <remarks>Cached collection.</remarks>
        </member>
        <member name="M:Litium.Foundation.Languages.LanguageCollection.#ctor">
            <summary>
            Contructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Languages.LanguageCollection.CreateLanguage(System.String,System.Globalization.CultureInfo,System.Boolean,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a new language (with a new random ID).
            </summary>
            <param name="name">Language name.</param>
            <param name="culture">Language culture info.</param>
            <param name="isDefault">Whether the language is the default language or not.</param>
            <param name="token">Security token.</param>
            <returns>The new language.</returns>
            <exception cref="T:Litium.Foundation.Languages.LanguageExistsException">Thrown when trying to create a language with a name that already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Languages.LanguageCollection.CreateLanguage(System.Guid,System.String,System.Globalization.CultureInfo,System.Boolean,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a new language.
            </summary>
            <param name="ID">Language ID.</param>
            <param name="name">Language name.</param>
            <param name="culture">Language culture info.</param>
            <param name="isDefault">Whether the language is the default language or not.</param>
            <param name="token">Security token.</param>
            <returns>The new language.</returns>
            <exception cref="T:Litium.Foundation.Languages.LanguageExistsException">Thrown when trying to create a language with a name that already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Languages.LanguageCollection.CreateLanguageFromCarrier(Litium.Foundation.Carriers.LanguageCarrier,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a new language from a carrier.
            </summary>
            <param name="carrier">Language carrier.</param>
            <param name="token">Security token.</param>
            <returns>The new language.</returns>
            <exception cref="T:Litium.Foundation.Languages.LanguageExistsException">Thrown when trying to create a language with a name that already exists.</exception>
        </member>
        <member name="M:Litium.Foundation.Languages.LanguageCollection.CreateLanguagesFromCarriers(Litium.Foundation.Carriers.LanguageCarrier[],Litium.Foundation.Security.SecurityToken)">
            <summary>
            Create languages from carriers.
            </summary>
            <param name="carriers">Array of carriers.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Languages.LanguageCollection.Exists(System.Globalization.CultureInfo)">
            <summary>
            Existses the specified language.
            </summary>
            <param name="culture">The culture.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Languages.LanguageCollection.Exists(System.Guid)">
            <summary>
            Existses the specified language.
            </summary>
            <param name="languageID">The language ID.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Languages.LanguageCollection.Exists(System.String)">
            <summary>
            Existses the specified language.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Languages.LanguageCollection.GetAllLanguagesAsCarriers">
            <summary>
            Returns all languages as carriers.
            </summary>
            <returns>All languages as a carrier array.</returns>
        </member>
        <member name="M:Litium.Foundation.Languages.LanguageCollection.GetAllLanguages">
            <summary>
            Returns all languages.
            </summary>
            <returns>All languages as a list.</returns>
        </member>
        <member name="M:Litium.Foundation.Languages.LanguageCollection.GetLanguage(System.Globalization.CultureInfo)">
            <summary>
            Returns a language given a culture.
            </summary>
            <param name="culture">Culture info of language to return.</param>
            <returns>The requested language or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Languages.LanguageCollection.GetLanguage(System.Guid)">
            <summary>
            Returns a language.
            </summary>
            <param name="ID">ID of language to return.</param>
            <returns>The requested language or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Languages.LanguageCollection.GetLanguage(System.String)">
            <summary>
            Returns a language given a language name.
            </summary>
            <param name="name">Name of language to return.</param>
            <returns>The requested language or null if none was found.</returns>
        </member>
        <member name="M:Litium.Foundation.Languages.LanguageCollection.Refresh">
            <summary>
            Refresh the collection.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Languages.LanguageCollection.EventManager_LanguageCreated(System.Guid)">
            <summary>
            Called when a language has been created.
            </summary>
            <param name="languageID">Language ID.</param>
        </member>
        <member name="M:Litium.Foundation.Languages.LanguageCollection.EventManager_LanguageDeleted(System.Guid)">
            <summary>
            Called when a language has been deleted.
            </summary>
            <param name="languageID">Language ID.</param>
        </member>
        <member name="M:Litium.Foundation.Languages.LanguageCollection.EventManager_LanguageUpdated(System.Guid)">
            <summary>
            Called when a language has been updated.
            </summary>
            <param name="languageID">Language ID.</param>
        </member>
        <member name="M:Litium.Foundation.Languages.LanguageCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Litium.Foundation.Languages.LanguageCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Litium.Foundation.Languages.LanguageCollection.Item(System.Globalization.CultureInfo)">
            <summary>
            Returns the requested language, or null if none was found.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Languages.LanguageCollection.Item(System.Guid)">
            <summary>
            Returns the requested language, or null if none was found.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Languages.LanguageCollection.Item(System.String)">
            <summary>
            Returns the requested language, or null if none was found.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Languages.LanguageCollection.Count">
            <summary>
            Returns the number of languages in the solution.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Languages.LanguageCollection.DefaultLanguage">
            <summary>
            Returns the default language. 
            </summary>
        </member>
        <member name="P:Litium.Foundation.Languages.LanguageCollection.DefaultLanguageID">
            <summary>
            Returns the default language ID. 
            </summary>
        </member>
        <member name="T:Litium.Foundation.Languages.LanguageDoesNotExistException">
            <summary>
            Thrown when a language does not exist or has been deleted.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Languages.LanguageDoesNotExistException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Languages.LanguageDoesNotExistException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Languages.LanguageDoesNotExistException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Languages.LanguageDoesNotExistException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Litium.Foundation.Languages.LanguageDoesNotExistException.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="culture">Language culture.</param>
        </member>
        <member name="M:Litium.Foundation.Languages.LanguageDoesNotExistException.#ctor(System.Guid)">
            <summary>
            Constructor.
            </summary>
            <param name="languageID">Language ID.</param>
        </member>
        <member name="M:Litium.Foundation.Languages.LanguageDoesNotExistException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Languages.LanguageDoesNotExistException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Litium.Foundation.Languages.LanguageDoesNotExistException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="P:Litium.Foundation.Languages.LanguageDoesNotExistException.Culture">
            <summary>
            Culture.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Languages.LanguageDoesNotExistException.LanguageID">
            <summary>
            Language ID.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Log.SystemLog">
            <summary>
            SystemLog logs events and errors to the database.
            </summary>
            <example> Following example makes a log entry.
            <para>
             Solution.Instance.Log.CreateLogEntry("sample log entry", "this is a sample error!", Litium.Foundation.Log.LogLevels.ERROR);
            </para>
            </example>
        </member>
        <member name="F:Litium.Foundation.Log.SystemLog.COLUMN_LOG_LEVEL">
            <summary>
            Log level column name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Log.SystemLog.COLUMN_LOG_TEXT">
            <summary>
            Log text column name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Log.SystemLog.COLUMN_LOG_TIME_STAMP">
            <summary>
            Log timestamp column name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Log.SystemLog.COLUMN_LOG_TITLE">
            <summary>
            Log title column name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Log.SystemLog.COLUMN_WEB_SERVER_IP">
            <summary>
            Webserver IP column name
            </summary>
        </member>
        <member name="F:Litium.Foundation.Log.SystemLog.m_log4Net">
            <summary>
            Is log4net enabled with any appenders?
            </summary>
        </member>
        <member name="M:Litium.Foundation.Log.SystemLog.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Log.SystemLog.SetLogLevel(Litium.Foundation.Log.LogLevels,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Change log level in runtime, does not store log level persistant, for persistance change in web.config
            </summary>
            <param name="logLevel">New log level.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Log.SystemLog.CreateLogEntry(System.String,System.String,Litium.Foundation.Log.LogLevels)">
            <summary>
            Creates a new log entry in the database.
            </summary>
            <param name="title">Title.</param>
            <param name="text">Text.</param>
            <param name="level">Level.</param>
        </member>
        <member name="M:Litium.Foundation.Log.SystemLog.CreateLogEntry(System.String,System.Exception,Litium.Foundation.Log.LogLevels)">
            <summary>
            Creates a new log entry in the database.
            </summary>
            <param name="title">Title.</param>
            <param name="exception">Exception.</param>
            <param name="level">Level.</param>
        </member>
        <member name="M:Litium.Foundation.Log.SystemLog.DeleteAllLogEntries(Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes all log entries for the solution.
            </summary>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Log.SystemLog.GetAllLogEntries">
            <summary>
            Returns all log entries.
            </summary>
            <returns>An array of entries [solution id, title, message text, level, date, time].</returns>
        </member>
        <member name="M:Litium.Foundation.Log.SystemLog.GetAllLogEntries(Litium.Foundation.Log.LogLevels)">
            <summary>
            Returns all log entries.
            </summary>
            <param name="minLogLevel">The minimum log level.</param>
            <returns>
            An array of entries [solution id, title, message text, level, date, time].
            </returns>
        </member>
        <member name="M:Litium.Foundation.Log.SystemLog.GetLogEntries(System.Int32,System.Int32,Litium.Foundation.Log.LogLevels,System.Int32@)">
            <summary>
            Gets the log entries.
            </summary>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="level">The level.</param>
            <param name="totalCount">The total count.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Log.SystemLog.GetLogEntries(System.Int32,System.Int32,Litium.Foundation.Log.LogLevels,System.DateTime,System.DateTime,System.String,Litium.Foundation.Log.LogSortBy,System.Boolean,System.Int32@)">
            <summary>
            Gets the log entries.
            </summary>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="level">The level.</param>
            <param name="maxDateFilter">The max date filter.</param>
            <param name="minDateFilter">The min date filter.</param>
            <param name="webserverFilter">The webserver filter.</param>
            <param name="sortBy">The order by.</param>
            <param name="sortDesc">if set to <c>true</c> [sort desc].</param>
            <param name="totalCount">The total count.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>PageNumber</c> is out of range.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>PageSize</c> is out of range.</exception>
        </member>
        <member name="M:Litium.Foundation.Log.SystemLog.GetLogEntry(System.Int64)">
            <summary>
            Gets the log entry by id
            </summary>
            <param name="logID">The log ID.</param>
            <returns>Return the logentry if found else NULL.</returns>
        </member>
        <member name="M:Litium.Foundation.Log.SystemLog.GetAllLogSources">
            <summary>
            Returns all loging instances.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Log.SystemLog.TruncateLogEntries(System.Int32,System.Int32,System.Int32,System.Int32,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Truncate Log entrys.
            </summary>
            <param name="logLevelInfo">Max number of days to keep, -1 to not truncate.</param>
            <param name="logLevelMinor">Max number of days to keep, -1 to not truncate.</param>
            <param name="logLevelMajor">Max number of days to keep, -1 to not truncate.</param>
            <param name="maxNumberOfEntries">Keep maximum of entries, -1 to not truncatate</param>
            <param name="token">Security Token</param>
        </member>
        <member name="M:Litium.Foundation.Log.SystemLog.TruncateLogEntries(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Truncate Log entrys.
            </summary>
            <param name="logLevelDebug">Max number of days to keep, -1 to not truncate.</param>
            <param name="logLevelInfo">Max number of days to keep, -1 to not truncate.</param>
            <param name="logLevelWarn">Max number of days to keep, -1 to not truncate.</param>
            <param name="logLevelError">Max number of days to keep, -1 to not truncate.</param>
            <param name="logLevelFatal">Max number of days to keep, -1 to not truncate.</param>
            <param name="maxNumberOfEntries">Keep maximum of entries, -1 to not truncatate</param>
            <param name="token">Security Token</param>
        </member>
        <member name="P:Litium.Foundation.Log.SystemLog.LogLevel">
            <summary>
            Get or set the root level to log. E.g. LogLevel set to Minor_Error will not store log entries of Info.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Security.BuiltInModulePermissionTypeNames">
            <summary>
            Built in module permission type names.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Security.BuiltInModulePermissionTypeNames.PERMISSION_NAME_ACCESS_GUI">
            <summary>
            Permission to the graphical user interface.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Security.BuiltInModulePermissionTypeNames.PERMISSION_NAME_ALL">
            <summary>
            All permission.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Security.BuiltInModulePermissionTypeNames.PERMISSION_NAME_CONTENT_ALL">
            <summary>
            Permission to all content.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Security.BuiltInModulePermissionTypeNames.PERMISSION_NAME_UNDEFINED">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Security.BuiltInModulePermissionTypes">
            <summary>
            Built in module permission types.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Security.BuiltInModulePermissionTypes.PERMISSION_ID_ACCESS_GUI">
            <summary>
            Permission to the graphical user interface.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Security.BuiltInModulePermissionTypes.PERMISSION_ID_ALL">
            <summary>
            All permission.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Security.BuiltInModulePermissionTypes.PERMISSION_ID_CONTENT_ALL">
            <summary>
            Permission to all content.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Security.BuiltInModulePermissionTypes.PERMISSION_ID_UNDEFINED">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Modules.InvalidLicenseException">
            <summary>
            Thrown on an invalid licens key.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Modules.InvalidLicenseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Modules.InvalidLicenseException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Modules.InvalidLicenseException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Message describing the license.</param>
        </member>
        <member name="M:Litium.Foundation.Modules.InvalidLicenseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Modules.InvalidLicenseException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Litium.Foundation.Modules.LoadModuleAPIFailedException">
            <summary>
            Thrown when a module API could not be loaded.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Modules.LoadModuleAPIFailedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Modules.LoadModuleAPIFailedException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Modules.LoadModuleAPIFailedException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:Litium.Foundation.Modules.LoadModuleAPIFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Message.</param>
            <param name="e">Exception.</param>
        </member>
        <member name="M:Litium.Foundation.Modules.LoadModuleAPIFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Modules.LoadModuleAPIFailedException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Litium.Foundation.Modules.Module`1">
            <summary>
            Typed modele base-class
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Litium.Foundation.Modules.Module">
            <summary>
            Base class for all Litium Foundation modules.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Modules.Module.SetAssemblyName(System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Sets the assembly name.
            </summary>
            <param name="assemblyName">Full assembly name (excluding dll).</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Modules.Module.SetClassName(System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Sets the class name.
            </summary>
            <param name="className">Complete class name.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Modules.Module.SetDescription(System.String,System.Guid,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Sets the module description.
            </summary>
            <param name="description">Module description.</param>
            <param name="languageID">Language ID.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Modules.Module.SetDisplayName(System.String,System.Guid,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Sets the module display name.
            </summary>
            <param name="name">Module display name.</param>
            <param name="languageID">Language ID.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Modules.Module.SetErrorPageURL(System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Sets the module's error page.
            </summary>
            <param name="errorPageURL">Error page URL.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Modules.Module.SetIconURLLarge(System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Sets the icon URL (large).
            </summary>
            <param name="iconURL">Icon URL.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Modules.Module.SetIconURLMedium(System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Sets the icon URL (medium).
            </summary>
            <param name="iconURL">Icon URL.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Modules.Module.SetIconURLSmall(System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Sets the icon URL (small).
            </summary>
            <param name="iconURL">Icon URL.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Modules.Module.SetName(System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Set name.
            </summary>
            <param name="name">Name.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Modules.Module.SetSettingsPageURL(System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Sets the settings page URL.
            </summary>
            <param name="pageURL">Page URL.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Modules.Module.SetStartPageURL(System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Sets the start page URL.
            </summary>
            <param name="pageURL">Page URL.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Modules.Module.SetLicenseInfo(System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Sets the license info of the module.
            </summary>
            <param name="licenseInfo">License info.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Modules.Module.OnApplicationEnd(System.Object,System.EventArgs)">
            <summary>
            Called when the application has ended. Called once per module on every server.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="M:Litium.Foundation.Modules.Module.OnDeleteModule">
            <summary>
            Called when the module has been deleted.
            Cleanup used resources.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Modules.Module.OnSessionEnd(System.Web.SessionState.HttpSessionState)">
            <summary>
            Called when a new session has ended.
            </summary>
            <param name="sessionState">Session state.</param>
        </member>
        <member name="M:Litium.Foundation.Modules.Module.OnSessionStart(System.Web.SessionState.HttpSessionState)">
            <summary>
            Called when a new session has been started.
            </summary>
            <param name="sessionState">Session state.</param>
        </member>
        <member name="M:Litium.Foundation.Modules.Module.Delete(Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes the module.
            </summary>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Modules.Module.GetAsCarrier(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns the module as a carrier class.
            </summary>
            <param name="includePermissionTypes">Whether to include permissions types or not.</param>
            <param name="includePermissions">Whether to include permissions or not.</param>
            <param name="includeModuleStrings">Whether to include module strings or not.</param>
            <returns>The module as a carrier class.</returns>
        </member>
        <member name="M:Litium.Foundation.Modules.Module.GetDescription(System.Guid)">
            <summary>
            Returns the description of the module.
            </summary>
            <param name="languageID">Language ID or Guid.Empty for the fallback language.</param>
        </member>
        <member name="M:Litium.Foundation.Modules.Module.GetDisplayName(System.Guid)">
            <summary>
            Returns the display name of the module.
            </summary>
            <param name="languageID">Language ID or Guid.Empty for the fallback language.</param>
        </member>
        <member name="M:Litium.Foundation.Modules.Module.RaiseEvents(System.Collections.Generic.IEnumerable{Litium.Foundation.Carriers.Events.ModuleSpecificEventCarrier})">
            <summary>
            Handles all triggerd events dispattched from Litium.Foundation during a raiseunhandel event call.
            Override this method in the module class to provide an implementation if you want to handle Events as a batch
            or overide the HandelEvent to handle the sequentially.
            </summary>
            <param name="events">Events to raise.</param>
        </member>
        <member name="M:Litium.Foundation.Modules.Module.HandleEvents(System.Collections.Generic.IEnumerable{Litium.Foundation.Carriers.Events.ModuleSpecificEventCarrier})">
            <summary>
            Handles all triggerd events dispattched from Litium.Foundation during a raiseunhandel event call.
            Override this method in the module class to provide an implementation if you want to handle Events as a batch
            or overide the HandelEvent to handle the sequentially.
            </summary>
            <param name="events">Events raised.</param>
        </member>
        <member name="M:Litium.Foundation.Modules.Module.HandleEvent(System.Int64,System.DateTime,System.Int16,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Handles an event dispattched from Litium.Foundation.
            Override this method in the module class to provide an implementation.
            </summary>
            <param name="eventID">Event ID.</param>
            <param name="timeStamp">Time stamp.</param>
            <param name="eventType">Event type.</param>
            <param name="argument1">Argument 1.</param>
            <param name="argument2">Argument 2.</param>
            <param name="argument3">Argument 3.</param>
            <param name="argument4">Argument 4.</param>
            <param name="argument5">Argument 5.</param>
        </member>
        <member name="M:Litium.Foundation.Modules.Module.Refresh">
            <summary>
            Refreshes this module.
            </summary>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Modules.Module.UpdateFromCarrier(Litium.Foundation.Carriers.ModuleCarrier,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Updates the module from a carrier class.
            </summary>
            <param name="carrier">Module carrier.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException">Thrown when the module does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Modules.Module.InitModule(Litium.Foundation.Carriers.ModuleCarrier,Litium.Foundation.Data.DataSettings)">
            <summary>
            Init the module.
            </summary>
            <param name="module">Module carrier (without permissions, permission types and module strings).</param>
            <param name="dataSettings">Data settings.</param>
        </member>
        <member name="M:Litium.Foundation.Modules.Module.InstanceInit">
            <summary>
            Set the instance of the static module
            </summary>
        </member>
        <member name="M:Litium.Foundation.Modules.Module.Init">
            <summary>
            Init the module.
            Subclasses must implement this method.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Modules.Module.Populate(Litium.Foundation.Carriers.ModuleCarrier)">
            <summary>
            Loads values from carrier.
            </summary>
            <param name="carrier">Carrier to populate from (without permissions, permission types and module strings).</param>
        </member>
        <member name="M:Litium.Foundation.Modules.Module.InitializeSearchComponents">
            <summary>
            Initializes the search components.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Modules.Module.RebuildSearchIndices">
            <summary>
            Rebuild the search indices.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Modules.Module.CompareTo(Litium.Foundation.Modules.Module)">
            <summary>
            Compare the Name between to modules.
            </summary>
            <param name="other">Module to compare with.</param>
        </member>
        <member name="P:Litium.Foundation.Modules.Module.AssemblyName">
            <summary>
            Assembly name.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Modules.Module.ClassName">
            <summary>
            Class name.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Modules.Module.ErrorPageUrl">
            <summary>
            Error page Url.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Modules.Module.FileVersion">
            <summary>
            File Version.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Modules.Module.IconUrlLarge">
            <summary>
            Large icon Url.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Modules.Module.IconUrlMedium">
            <summary>
            Medium icon Url.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Modules.Module.IconUrlSmall">
            <summary>
            Small icon Url.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Modules.Module.ID">
            <summary>
            Module ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Modules.Module.IsDeleted">
            <summary>
            Returns whether the module is deleted or not.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Modules.Module.Name">
            <summary>
            Module name.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Modules.Module.SettingsPageUrl">
            <summary>
            Settings page Url.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Modules.Module.StartPageUrl">
            <summary>
            Start page Url.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Modules.Module.Strings">
            <summary>
            Module strings.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Modules.Module.VersionText">
            <summary>
            VersionText. The ProductVersion text, eg 4.5 Hotfix 2, returns the AssemblyInformationalVersionAttribute or if null the VersionNumber of the file.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Modules.Module.Version">
            <summary>
            Returns version number.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Modules.Module.VersionNumber">
            <summary>
            VersionNumber. Litium uses Major.Minor.ServicePack, eg 1.2.3 is version 1.2 with SP3
            </summary>
        </member>
        <member name="P:Litium.Foundation.Modules.Module.BuildNumber">
            <summary>
            Build version. Litium uses Major.Minor.ServicePack.Build, eg 1.2.3.1234 is version 1.2 with SP3 and buildnumber 1234, this method would return "1234".
            </summary>
        </member>
        <member name="P:Litium.Foundation.Modules.Module.DataSettings">
            <summary>
            The data settings of the module.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Modules.Module.LicenseInfo">
            <summary>
            License info.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Modules.Module.SystemToken">
            <summary>
            The system user token.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Modules.Module.IsModuleExpired">
            <summary>
            Checks whether module expired.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Modules.Module.Panels">
            <summary>
            Gets the panels for the module.
            </summary>
            <value>The panels.</value>
        </member>
        <member name="M:Litium.Foundation.Modules.Module`1.#cctor">
            <summary>
            Static constructor to load module.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Modules.Module`1.InstanceInit">
            <summary>
            Set the instance of the static module
            </summary>
        </member>
        <member name="P:Litium.Foundation.Modules.Module`1.ModuleInstance">
            <summary>
            Returns the instance.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Modules.Module`1.Instance">
            <summary>
            Returns the instance.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Modules.Module`1.ExistsInstance">
            <summary>
            Returns if the module exists, does not check licenses.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Modules.ModuleCollection">
            <summary>
            A collection of all installed modules.
            Enumerates of Module instances.
            </summary>
            <remarks>Cached collection.</remarks>
        </member>
        <member name="M:Litium.Foundation.Modules.ModuleCollection.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Modules.ModuleCollection.GetEnumerator">
            <summary>
            Returns an Enumerator of all the modules in the collection.
            </summary>
            <returns>The Enumerator of the collection.</returns>
        </member>
        <member name="M:Litium.Foundation.Modules.ModuleCollection.CreateModule(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a new module with a new random ID.
            </summary>
            <param name="moduleName">Module name.</param>
            <param name="assemblyName">Assembly name.</param>
            <param name="className">Class name.</param>
            <param name="version">Version.</param>
            <param name="licenseInfo">License info.</param>
            <param name="startPageUrl">Start page Url.</param>
            <param name="settingsPageUrl">Settings page Url.</param>
            <param name="errorPageUrl">Error page Url.</param>
            <param name="iconUrlSmall">Small icon Url.</param>
            <param name="iconUrlMedium">Medium icon Url.</param>
            <param name="iconUrlLarge">Large icon Url.</param>
            <param name="token">Security token.</param>
            <returns>The new module.</returns>
        </member>
        <member name="M:Litium.Foundation.Modules.ModuleCollection.CreateModule(System.Guid,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a new module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="moduleName">Module name.</param>
            <param name="assemblyName">Assembly name.</param>
            <param name="className">Class name.</param>
            <param name="version">Version.</param>
            <param name="licenseInfo">License info.</param>
            <param name="startPageUrl">Start page Url.</param>
            <param name="settingsPageUrl">Settings page Url.</param>
            <param name="errorPageUrl">Error page Url.</param>
            <param name="iconUrlSmall">Small icon Url.</param>
            <param name="iconUrlMedium">Medium icon Url.</param>
            <param name="iconUrlLarge">Large icon Url.</param>
            <param name="token">Security token.</param>
            <returns>The new module.</returns>
        </member>
        <member name="M:Litium.Foundation.Modules.ModuleCollection.CreateModule(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a new module with a new random ID.
            </summary>
            <param name="moduleName">Module name.</param>
            <param name="assemblyName">Assembly name.</param>
            <param name="className">Class name.</param>
            <param name="licenseInfo">License info.</param>
            <param name="startPageUrl">Start page Url.</param>
            <param name="settingsPageUrl">Settings page Url.</param>
            <param name="errorPageUrl">Error page Url.</param>
            <param name="iconUrlSmall">Small icon Url.</param>
            <param name="iconUrlMedium">Medium icon Url.</param>
            <param name="iconUrlLarge">Large icon Url.</param>
            <param name="token">Security token.</param>
            <returns>The new module.</returns>
        </member>
        <member name="M:Litium.Foundation.Modules.ModuleCollection.CreateModule(System.Guid,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a new module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="moduleName">Module name.</param>
            <param name="assemblyName">Assembly name.</param>
            <param name="className">Class name.</param>
            <param name="licenseInfo">License info.</param>
            <param name="startPageUrl">Start page Url.</param>
            <param name="settingsPageUrl">Settings page Url.</param>
            <param name="errorPageUrl">Error page Url.</param>
            <param name="iconUrlSmall">Small icon Url.</param>
            <param name="iconUrlMedium">Medium icon Url.</param>
            <param name="iconUrlLarge">Large icon Url.</param>
            <param name="token">Security token.</param>
            <returns>The new module.</returns>
        </member>
        <member name="M:Litium.Foundation.Modules.ModuleCollection.CreateModuleFromCarrier(Litium.Foundation.Carriers.ModuleCarrier,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a new module.
            </summary>
            <param name="carrier">Module carrier.</param>
            <param name="token">Security token.</param>
            <returns>The new module.</returns>
        </member>
        <member name="M:Litium.Foundation.Modules.ModuleCollection.DeleteAllModules(Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes all modules.
            </summary>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Modules.ModuleCollection.GetAllModules">
            <summary>
            Returns all initiated modules.
            </summary>
            <returns>List of modules.</returns>
        </member>
        <member name="M:Litium.Foundation.Modules.ModuleCollection.GetAllModuleIDs">
            <summary>
            Returns all initiated modules IDs
            </summary>
            <returns>List of module IDs.</returns>
        </member>
        <member name="M:Litium.Foundation.Modules.ModuleCollection.GetModule(System.Guid)">
            <summary>
            Returns a module.
            </summary>
            <param name="id">ID of module to return.</param>
            <returns>The requested module or null if it does not exist.</returns>
        </member>
        <member name="M:Litium.Foundation.Modules.ModuleCollection.GetModule(System.String)">
            <summary>
            Returns a module given a module name.
            </summary>
            <param name="moduleName">Name of module to return.</param>
            <returns>The requested module or null if it does not exist.</returns>
        </member>
        <member name="M:Litium.Foundation.Modules.ModuleCollection.GetModule(System.Type)">
            <summary>
            Returns the module of the requested type.
            </summary>
            <param name="moduleType">Module type.</param>
            <returns>The requested module or null if it does not exist.</returns>
        </member>
        <member name="M:Litium.Foundation.Modules.ModuleCollection.Exists(System.Type)">
            <summary>
            Returns if the module of the requested type exists.
            </summary>
            <param name="moduleType">Module type.</param>
            <returns>true if it does exist.</returns>
        </member>
        <member name="M:Litium.Foundation.Modules.ModuleCollection.Refresh">
            <summary>
            Refreshes all modules.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Modules.ModuleCollection.GetModuleAPI(Litium.Foundation.Carriers.ModuleCarrier)">
            <summary>
            Loads the module API from a module carrier.
            </summary>
            <param name="carrier">Module carrier (without permissions, permission types and module strings).</param>
            <returns>The Module API.</returns>
            <exception cref="T:Litium.Foundation.Modules.LoadModuleAPIFailedException">Thrown when the module API could not be loaded.</exception>
        </member>
        <member name="M:Litium.Foundation.Modules.ModuleCollection.ModulePermissionTypeExists(System.Collections.Generic.IEnumerable{Litium.Foundation.Carriers.ModulePermissionTypeCarrier},System.Int32)">
            <summary>
            Returns whether an array of permission types contain a specific permission type.
            </summary>
            <param name="carriers">Array of permission type carriers.</param>
            <param name="permissionType">Permission type.</param>
            <returns>True if the specified permission type exists in the carrier array.</returns>
        </member>
        <member name="M:Litium.Foundation.Modules.ModuleCollection.EventManager_ModuleCreated(System.Guid)">
            <summary>
            Called when a module has been created.
            </summary>
            <param name="moduleID">Module ID.</param>
        </member>
        <member name="M:Litium.Foundation.Modules.ModuleCollection.EventManager_ModuleDeleted(System.Guid)">
            <summary>
            Called when a module has been deleted.
            </summary>
            <param name="moduleID">Module ID.</param>
        </member>
        <member name="M:Litium.Foundation.Modules.ModuleCollection.EventManager_ModuleUpdated(System.Guid)">
            <summary>
            Called when a module has been updated.
            </summary>
            <param name="moduleID">Module ID.</param>
        </member>
        <member name="P:Litium.Foundation.Modules.ModuleCollection.Item(System.Guid)">
            <summary>
            Returns a module.
            </summary>
            <returns>The requested module or null if it does not exist.</returns>
        </member>
        <member name="P:Litium.Foundation.Modules.ModuleCollection.Item(System.String)">
            <summary>
            Returns a module.
            </summary>
            <returns>The requested module or null if it does not exist.</returns>
        </member>
        <member name="P:Litium.Foundation.Modules.ModuleCollection.Item(System.Type)">
            <summary>
            Returns the module of the requested type.
            </summary>
            <returns>The requested module or null if it does not exist.</returns>
        </member>
        <member name="P:Litium.Foundation.Modules.ModuleCollection.Count">
            <summary>
            Returns the number of modules in the solution.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Modules.ModuleDoesNotExistException">
            <summary>
            Thrown when a module does not exist or has been deleted.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Modules.ModuleDoesNotExistException.DEFAULT_MESSAGE">
            <summary>
            Default message.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Modules.ModuleDoesNotExistException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Modules.ModuleDoesNotExistException.#ctor(System.Guid)">
            <summary>
            Constructor.
            </summary>
            <param name="moduleID">Module ID.</param>
        </member>
        <member name="M:Litium.Foundation.Modules.ModuleDoesNotExistException.#ctor(System.String)">
            <summary>
            Creates an instance of ModuleDoesNotExistException
            </summary>
            <param name="message">Message to show in error log.</param>
        </member>
        <member name="M:Litium.Foundation.Modules.ModuleDoesNotExistException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Modules.ModuleDoesNotExistException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Litium.Foundation.Modules.ModuleDoesNotExistException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="P:Litium.Foundation.Modules.ModuleDoesNotExistException.ModuleID">
            <summary>
            Module ID.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Security.ModuleGroupPermissionDoesNotExistException">
            <summary>
            Thrown when an module group permission does not exist or has been deleted.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Security.PermissionDoesNotExistException">
            <summary>
            Abstract base class for all permission does not exist exceptions.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Security.PermissionDoesNotExistException.m_permissionTypeID">
            <summary>
            Permission type ID
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionDoesNotExistException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.PermissionDoesNotExistException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionDoesNotExistException.#ctor(System.Int32,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="permissionTypeID">Permission type ID.</param>
            <param name="title">Exception title.</param>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionDoesNotExistException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.PermissionDoesNotExistException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionDoesNotExistException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="P:Litium.Foundation.Security.PermissionDoesNotExistException.PermissionTypeID">
            <summary>
            Permission type ID.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.ModuleGroupPermissionDoesNotExistException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.ModuleGroupPermissionDoesNotExistException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.ModuleGroupPermissionDoesNotExistException.#ctor(System.Guid,System.Guid,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.ModuleGroupPermissionDoesNotExistException"/> class.
            </summary>
            <param name="moduleID">The module ID.</param>
            <param name="groupID">The group ID.</param>
            <param name="permissionTypeID">The permission type ID.</param>
        </member>
        <member name="M:Litium.Foundation.Security.ModuleGroupPermissionDoesNotExistException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.ModuleGroupPermissionDoesNotExistException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Litium.Foundation.Security.ModuleGroupPermissionDoesNotExistException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="P:Litium.Foundation.Security.ModuleGroupPermissionDoesNotExistException.ModuleID">
            <summary>
            Module ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Security.ModuleGroupPermissionDoesNotExistException.GroupID">
            <summary>
            Group ID.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Security.ModuleGroupPermissionExistsException">
            <summary>
            Thrown when the module group permission already exists.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Security.PermissionExistsException">
            <summary>
            Abstract base class for all permission exists exceptions.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Security.PermissionExistsException.m_permissionTypeID">
            <summary>
            Permission type ID
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionExistsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.PermissionExistsException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionExistsException.#ctor(System.Int32,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="permissionTypeID">Permission type ID.</param>
            <param name="title">Exception title.</param>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.PermissionExistsException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionExistsException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="P:Litium.Foundation.Security.PermissionExistsException.PermissionTypeID">
            <summary>
            Permission type ID.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.ModuleGroupPermissionExistsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.ModuleGroupPermissionExistsException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.ModuleGroupPermissionExistsException.#ctor(System.Guid,System.Guid,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.ModuleGroupPermissionExistsException"/> class.
            </summary>
            <param name="moduleID">The module ID.</param>
            <param name="groupID">The group ID.</param>
            <param name="permissionTypeID">The permission type ID.</param>
        </member>
        <member name="M:Litium.Foundation.Security.ModuleGroupPermissionExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.ModuleGroupPermissionExistsException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Litium.Foundation.Security.ModuleGroupPermissionExistsException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="P:Litium.Foundation.Security.ModuleGroupPermissionExistsException.ModuleID">
            <summary>
            Module ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Security.ModuleGroupPermissionExistsException.GroupID">
            <summary>
            Group ID.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Security.ModulePermissionManager">
            <summary>
            Abstract base class for module permission managers.
            Inherit from this class to create a PermissionManager for a new Module.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Security.ModulePermissionManager.m_module">
            <summary>
            Module
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.ModulePermissionManager.#ctor(Litium.Foundation.Modules.Module)">
            <summary>
            Constructor.
            </summary>
            <param name="module">Module.</param>
        </member>
        <member name="M:Litium.Foundation.Security.ModulePermissionManager.CheckAccessGUIPermission(Litium.Foundation.Security.SecurityToken)">
            <summary>
            Checks if the token has the access gui permission. If not, an exception is thrown.
            </summary>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Security.ModulePermissionManager.CheckContentAllPermission(Litium.Foundation.Security.SecurityToken)">
            <summary>
            Checks if the token has the content all permission. If not, an exception is thrown.
            </summary>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Security.ModulePermissionManager.CheckModuleAllPermission(Litium.Foundation.Security.SecurityToken)">
            <summary>
            Checks if the token has the module all permission. If not, an exception is thrown.
            </summary>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Security.ModulePermissionManager.CheckModulePermission(Litium.Foundation.Security.SecurityToken,System.Int32)">
            <summary>
            Checks if the token has the requested module permission. If not, an exception is thrown.
            </summary>
            <param name="token">Security token.</param>
            <param name="permissionType">Permission type.</param>
        </member>
        <member name="M:Litium.Foundation.Security.ModulePermissionManager.GroupHasAccessGUIPermission(System.Guid,System.Boolean)">
            <summary>
            Returns whether the group has the access GUI permission.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="includeHigherLevelPermissions">Whether to include higher level permissions or not.</param>
            <returns>Wheter the group has the permission.</returns>
        </member>
        <member name="M:Litium.Foundation.Security.ModulePermissionManager.GroupHasContentAllPermission(System.Guid,System.Boolean)">
            <summary>
            Returns whether the group has the content all permission.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="includeHigherLevelPermissions">Whether to include higher level permissions or not.</param>
            <returns>Wheter the group has the permission.</returns>
        </member>
        <member name="M:Litium.Foundation.Security.ModulePermissionManager.GroupHasModuleAllPermission(System.Guid,System.Boolean)">
            <summary>
            Returns whether the group has the module all permission.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="includeHigherLevelPermissions">Whether to include higher level permissions or not.</param>
            <returns>Wheter the group has the permission.</returns>
        </member>
        <member name="M:Litium.Foundation.Security.ModulePermissionManager.UserHasAccessGUIPermission(System.Guid,System.Boolean,System.Boolean)">
            <summary>
            Returns whether the user has the access GUI permission.
            </summary>
            <param name="userID">User ID.</param>
            <param name="includeHigherLevelPermissions">Whether to include higher level permissions or not.</param>
            <param name="includeGroups">Wheter to include the permissions of the groups which the user belongs to.</param>
            <returns>Wheter the user has the permission.</returns>
        </member>
        <member name="M:Litium.Foundation.Security.ModulePermissionManager.UserHasContentAllPermission(System.Guid,System.Boolean,System.Boolean)">
            <summary>
            Returns whether the user has the content all permission.
            </summary>
            <param name="userID">User ID.</param>
            <param name="includeHigherLevelPermissions">Whether to include higher level permissions or not.</param>
            <param name="includeGroups">Wheter to include the permissions of the groups which the user belongs to.</param>
            <returns>Wheter the user has the permission.</returns>
        </member>
        <member name="M:Litium.Foundation.Security.ModulePermissionManager.UserHasModuleAllPermission(System.Guid,System.Boolean,System.Boolean)">
            <summary>
            Returns whether the user has the module all permission.
            </summary>
            <param name="userID">User ID.</param>
            <param name="includeHigherLevelPermissions">Whether to include higher level permissions or not.</param>
            <param name="includeGroups">Wheter to include the permissions of the groups which the user belongs to.</param>
            <returns>Wheter the user has the permission.</returns>
        </member>
        <member name="T:Litium.Foundation.Security.ModulePermissionRequiredException">
            <summary>
            Thrown when a module permission is required.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Security.PermissionRequiredException">
            <summary>
            PermissionRequiredException is thrown when a permission is required.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionRequiredException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.PermissionRequiredException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionRequiredException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="title">Exception title.</param>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionRequiredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.PermissionRequiredException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="F:Litium.Foundation.Security.ModulePermissionRequiredException.m_moduleID">
            <summary>
            Module id
            </summary>
        </member>
        <member name="F:Litium.Foundation.Security.ModulePermissionRequiredException.m_permissionTypeID">
            <summary>
            Permission type ID
            </summary>
        </member>
        <member name="F:Litium.Foundation.Security.ModulePermissionRequiredException.m_userID">
            <summary>
            User ID
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.ModulePermissionRequiredException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.ModulePermissionRequiredException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.ModulePermissionRequiredException.#ctor(System.Guid,System.Guid,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="userID">User ID.</param>
            <param name="permissionTypeID">Permission type ID.</param>
        </member>
        <member name="M:Litium.Foundation.Security.ModulePermissionRequiredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.ModulePermissionRequiredException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Litium.Foundation.Security.ModulePermissionRequiredException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="P:Litium.Foundation.Security.ModulePermissionRequiredException.ModuleID">
            <summary>
            Module ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Security.ModulePermissionRequiredException.PermissionTypeID">
            <summary>
            Permission type ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Security.ModulePermissionRequiredException.UserID">
            <summary>
            User ID.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Security.ModulePermissionTypeDoesNotExistException">
            <summary>
            Thrown when a module permission type does not exist or has been deleted.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Security.PermissionTypeDoesNotExistException">
            <summary>
            Abstract base class for all permission type does not exist exceptions.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Security.PermissionTypeDoesNotExistException.m_permissionTypeID">
            <summary>
            Permission type ID
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionTypeDoesNotExistException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.PermissionTypeDoesNotExistException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionTypeDoesNotExistException.#ctor(System.Int32,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="permissionTypeID">Permission type ID.</param>
            <param name="title">Exception title.</param>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionTypeDoesNotExistException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.PermissionTypeDoesNotExistException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionTypeDoesNotExistException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="P:Litium.Foundation.Security.PermissionTypeDoesNotExistException.PermissionTypeID">
            <summary>
            Permission type ID.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.ModulePermissionTypeDoesNotExistException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.ModulePermissionTypeDoesNotExistException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.ModulePermissionTypeDoesNotExistException.#ctor(System.Int32,System.Guid)">
            <summary>
            Constructor.
            </summary>
            <param name="permissionTypeID">Permission type ID.</param>
            <param name="moduleID">Module ID.</param>
        </member>
        <member name="M:Litium.Foundation.Security.ModulePermissionTypeDoesNotExistException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.ModulePermissionTypeDoesNotExistException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Litium.Foundation.Security.ModulePermissionTypeDoesNotExistException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="P:Litium.Foundation.Security.ModulePermissionTypeDoesNotExistException.ModuleID">
            <summary>
            Module ID.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Security.ModulePermissionTypeExistsException">
            <summary>
            Thrown when the module permission type already exists.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Security.PermissionTypeExistsException">
            <summary>
            Abstract base class for all permission type exists exceptions.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Security.PermissionTypeExistsException.m_permissionTypeID">
            <summary>
            Permission type ID
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionTypeExistsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.PermissionTypeExistsException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionTypeExistsException.#ctor(System.Int32,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="permissionTypeID">Permission type ID.</param>
            <param name="title">Exception title.</param>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionTypeExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.PermissionTypeExistsException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionTypeExistsException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="P:Litium.Foundation.Security.PermissionTypeExistsException.PermissionTypeID">
            <summary>
            Permission type ID.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.ModulePermissionTypeExistsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.ModulePermissionTypeExistsException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.ModulePermissionTypeExistsException.#ctor(System.Guid,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionTypeID">Permission type ID.</param>
        </member>
        <member name="M:Litium.Foundation.Security.ModulePermissionTypeExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.ModulePermissionTypeExistsException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Litium.Foundation.Security.ModulePermissionTypeExistsException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="P:Litium.Foundation.Security.ModulePermissionTypeExistsException.ModuleID">
            <summary>
            Module ID.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Security.ModuleUserPermissionDoesNotExistException">
            <summary>
            Thrown when a module user permission does not exist or has been deleted.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.ModuleUserPermissionDoesNotExistException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.ModuleUserPermissionDoesNotExistException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.ModuleUserPermissionDoesNotExistException.#ctor(System.Guid,System.Guid,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="userID">User ID.</param>
            <param name="permissionTypeID">Permission type ID.</param>
        </member>
        <member name="M:Litium.Foundation.Security.ModuleUserPermissionDoesNotExistException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.ModuleUserPermissionDoesNotExistException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Litium.Foundation.Security.ModuleUserPermissionDoesNotExistException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="P:Litium.Foundation.Security.ModuleUserPermissionDoesNotExistException.ModuleID">
            <summary>
            Module ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Security.ModuleUserPermissionDoesNotExistException.UserID">
            <summary>
            User ID.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Security.ModuleUserPermissionExistsException">
            <summary>
            Thrown when the module user permission already exists.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.ModuleUserPermissionExistsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.ModuleUserPermissionExistsException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.ModuleUserPermissionExistsException.#ctor(System.Guid,System.Guid,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="userID">User ID.</param>
            <param name="permissionTypeID">Permission type ID.</param>
        </member>
        <member name="M:Litium.Foundation.Security.ModuleUserPermissionExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.ModuleUserPermissionExistsException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Litium.Foundation.Security.ModuleUserPermissionExistsException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="P:Litium.Foundation.Security.ModuleUserPermissionExistsException.ModuleID">
            <summary>
            Module ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Security.ModuleUserPermissionExistsException.UserID">
            <summary>
            User ID.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Security.PasswordComplexity">
            <summary>
            Password complexity validator
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.PasswordComplexity.Validate(System.String)">
            <summary>
            Validates the specified password.
            </summary>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Security.PasswordComplexity.Validate(System.String,System.Boolean)">
            <summary>
            Validates the specified password.
            </summary>
            <param name="password">The password.</param>
            <param name="exceptionIfValidationFails">if set to <c>true</c> [exception if validation fails].</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Security.PasswordComplexity.ValidateLength(System.String,System.Int32)">
            <summary>
            Validates the length.
            </summary>
            <param name="password">The password.</param>
            <param name="minLength">Length of the min.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Security.PasswordComplexity.ValidateLowerCaseCount(System.String,System.Int32)">
            <summary>
            Validates the lower case count.
            </summary>
            <param name="password">The password.</param>
            <param name="minCount">The min count.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Security.PasswordComplexity.ValidateNumberCount(System.String,System.Int32)">
            <summary>
            Validates the number count.
            </summary>
            <param name="password">The password.</param>
            <param name="minCount">The min count.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Security.PasswordComplexity.ValidateSymbolCount(System.String,System.Int32)">
            <summary>
            Validates the symbol count.
            </summary>
            <param name="password">The password.</param>
            <param name="minCount">The min count.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Security.PasswordComplexity.ValidateUpperCaseCount(System.String,System.Int32)">
            <summary>
            Validates the upper case count.
            </summary>
            <param name="password">The password.</param>
            <param name="minCount">The min count.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Security.PasswordComplexity.ValidateUnicodeCount(System.String,System.Int32)">
            <summary>
            Validates the unicode count.
            </summary>
            <param name="password">The password.</param>
            <param name="minCount">The min count.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Security.PasswordComplexity.RegexCount(System.String,System.String)">
            <summary>
            Count characters with regexp
            </summary>
            <param name="regex">The regex to use.</param>
            <param name="text">The text to parse.</param>
            <returns></returns>
        </member>
        <member name="P:Litium.Foundation.Security.PasswordComplexity.CheckPasswordLength">
            <summary>
            Gets a value indicating whether [check password length].
            </summary>
            <value><c>true</c> if [check password length]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Litium.Foundation.Security.PasswordComplexity.CheckPasswordComplexity">
            <summary>
            Gets a value indicating whether [check password complexity].
            </summary>
            <value>
            	<c>true</c> if [check password complexity]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Litium.Foundation.Security.PasswordComplexityException">
            <summary>
            Åassword complexity exception
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.PasswordComplexityException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.PasswordComplexityException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.PasswordComplexityException.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.PasswordComplexityException"/> class.
            </summary>
            <param name="passwordLengthFault">if set to <c>true</c> [password length fault].</param>
            <param name="passwordComplexityFault">if set to <c>true</c> [password complexity fault].</param>
        </member>
        <member name="M:Litium.Foundation.Security.PasswordComplexityException.#ctor(System.Boolean,System.Boolean,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.PasswordComplexityException"/> class.
            </summary>
            <param name="passwordLengthFault">if set to <c>true</c> [password length fault].</param>
            <param name="passwordComplexityFault">if set to <c>true</c> [password complexity fault].</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Litium.Foundation.Security.PasswordComplexityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.PasswordComplexityException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Litium.Foundation.Security.PasswordComplexityException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="P:Litium.Foundation.Security.PasswordComplexityException.PasswordComplexityFault">
            <summary>
            Gets a value indicating whether [password complexity fault].
            </summary>
            <value>
            	<c>true</c> if [password complexity fault]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Litium.Foundation.Security.PasswordComplexityException.PasswordLengthFault">
            <summary>
            Gets a value indicating whether [password length fault].
            </summary>
            <value><c>true</c> if [password length fault]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Litium.Foundation.Security.PasswordGenerator">
            <summary>
            Generate random passwords.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Security.PermissionManager">
            <summary>
            Handles all permissions in Litium Foundation.
            </summary>
            <remarks>Permissions and group memberships are cached.</remarks>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.CheckAccountAllPermission(Litium.Foundation.Security.SecurityToken)">
            <summary>
            Checks if the token has the account all permission. If not, an exception is thrown.
            </summary>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.Security.SolutionPermissionRequiredException"><c>SolutionPermissionRequiredException</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Argument is null.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.CheckLanguageAllPermission(Litium.Foundation.Security.SecurityToken)">
            <summary>
            Checks if the token has the language all permission. If not, an exception is thrown.
            </summary>
            <param name="token">Security token.</param>
            <exception cref="T:System.ArgumentNullException">Argument is null.</exception>
            <exception cref="T:Litium.Foundation.Security.SolutionPermissionRequiredException"><c>SolutionPermissionRequiredException</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.CheckModulePermission(Litium.Foundation.Security.SecurityToken,System.Guid,System.Int32)">
            <summary>
            Checks if the token has the requested module permission. If not, an exception is thrown.
            </summary>
            <param name="token">Security token.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <exception cref="T:Litium.Foundation.Security.ModulePermissionRequiredException"><c>ModulePermissionRequiredException</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Argument is null.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.CheckModuleAccessGUIPermission(Litium.Foundation.Security.SecurityToken,System.Guid)">
            <summary>
            Checks if the token has the access gui permission. If not, an exception is thrown.
            </summary>
            <param name="token">Security token.</param>
            <param name="moduleID">Module ID.</param>
            <exception cref="T:Litium.Foundation.Security.ModulePermissionRequiredException"><c>ModulePermissionRequiredException</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Argument is null.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.CheckModuleContentAllPermission(Litium.Foundation.Security.SecurityToken,System.Guid)">
            <summary>
            Checks if the token has the content all permission. If not, an exception is thrown.
            </summary>
            <param name="token">Security token.</param>
            <param name="moduleID">Module ID.</param>
            <exception cref="T:Litium.Foundation.Security.ModulePermissionRequiredException"><c>ModulePermissionRequiredException</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Argument is null.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.CheckModuleAllPermission(Litium.Foundation.Security.SecurityToken,System.Guid)">
            <summary>
            Checks if the token has the module all permission. If not, an exception is thrown.
            </summary>
            <param name="token">Security token.</param>
            <param name="moduleID">Module ID.</param>
            <exception cref="T:Litium.Foundation.Security.ModulePermissionRequiredException"><c>ModulePermissionRequiredException</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Argument is null.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.CheckSolutionPermission(Litium.Foundation.Security.SecurityToken,System.Int32)">
            <summary>
            Checks if the token has the requested solution permission. If not, an exception is thrown.
            </summary>
            <param name="token">Security token.</param>
            <param name="permissionType">Permission type.</param>
            <exception cref="T:Litium.Foundation.Security.SolutionPermissionRequiredException"><c>SolutionPermissionRequiredException</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Argument is null.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.CheckSystemAllPermission(Litium.Foundation.Security.SecurityToken)">
            <summary>
            Checks if the token has the system all permission. If not, an exception is thrown.
            </summary>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.Security.SolutionPermissionRequiredException"><c>SolutionPermissionRequiredException</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Argument is null.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.CreateGroupCustomPermission(System.Guid,System.Guid,System.Int32,System.Guid,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a group custom permission.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="entityID">Permission entityID.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.CreateGroupCustomPermissionFromCarrier(Litium.Foundation.Carriers.GroupCustomPermissionCarrier,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a group custom permission from a carrier class.
            </summary>
            <param name="carrier">Permission carrier.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.CreateGroupModulePermission(System.Guid,System.Guid,System.Int32,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a group module permission.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.CreateGroupModulePermissionFromCarrier(Litium.Foundation.Carriers.GroupModulePermissionCarrier,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a group module permission from a carrier class.
            </summary>
            <param name="carrier">Permission carrier.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.CreateGroupSolutionPermission(System.Guid,System.Int32,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a group solution permission.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.CreateGroupSolutionPermissionFromCarrier(Litium.Foundation.Carriers.GroupSolutionPermissionCarrier,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a group solution permission from a carrier class.
            </summary>
            <param name="carrier">Permission carrier.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.CreateUserCustomPermission(System.Guid,System.Guid,System.Int32,System.Guid,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a user custom permission.
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="entityID">Permission entityID.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.CreateUserCustomPermissionFromCarrier(Litium.Foundation.Carriers.UserCustomPermissionCarrier,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a user custom permission from a carrier class.
            </summary>
            <param name="carrier">Permission carrier.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.CreateUserModulePermission(System.Guid,System.Guid,System.Int32,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a user module permission.
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.CreateUserModulePermissionFromCarrier(Litium.Foundation.Carriers.UserModulePermissionCarrier,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a user module permission from a carrier class.
            </summary>
            <param name="carrier">Permission carrier.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.CreateUserSolutionPermission(System.Guid,System.Int32,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a user solution permission.
            </summary>
            <param name="userID">User ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.CreateUserSolutionPermissionFromCarrier(Litium.Foundation.Carriers.UserSolutionPermissionCarrier,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a user solution permission from a carrier class.
            </summary>
            <param name="carrier">Permission carrier.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.CreateCustomPermissionType(System.Int32,System.String,System.Guid,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a custom permission type.
            </summary>
            <param name="permissionType">Permission type.</param>
            <param name="name">Permission name.</param>
            <param name="moduleID">Module ID.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.CreateCustomPermissionTypeFromCarrier(Litium.Foundation.Carriers.CustomPermissionTypeCarrier,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a custom permission type from a carrier class.
            </summary>
            <param name="carrier">Custom permission type carrier.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.CreateModulePermissionType(System.Int32,System.String,System.Guid,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a module permission type.
            </summary>
            <param name="permissionType">Permission type.</param>
            <param name="name">Permission name.</param>
            <param name="moduleID">Module id</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.CreateModulePermissionTypeFromCarrier(Litium.Foundation.Carriers.ModulePermissionTypeCarrier,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a module permission type from a carrier class.
            </summary>
            <param name="carrier">Module permission type carrier.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.CreateSolutionPermissionType(System.Int32,System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a solution permission type from a carrier class.
            </summary>
            <param name="permissionType">Permission type.</param>
            <param name="name">Permission name.</param>
            <param name="token">Security token.</param>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.CreateSolutionPermissionTypeFromCarrier(Litium.Foundation.Carriers.SolutionPermissionTypeCarrier,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates a solution permission type from a carrier class.
            </summary>
            <param name="carrier">Solution permission type carrier.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.DeleteAllCustomPermissions(System.Guid,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes all custom permissions.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.DeleteAllCustomPermissions(System.Guid,System.Int32,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes all custom permissions for a permission type.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.DeleteAllCustomPermissions(System.Guid,System.Guid,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes all custom permissions for a entityID.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="entityID">Permission entityID.</param>
            <param name="token">Security token.</param>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.DeleteAllCustomPermissions(System.Guid,System.Int32,System.Guid,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes all custom permissions for a permission type and entityID.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="entityID">Permission entityID.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.DeleteAllGroupCustomPermissions(System.Guid,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes all group custom permissions for a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="token">Security token.</param>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.DeleteAllGroupCustomPermissions(System.Guid,System.Guid,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes all custom permissions for a group.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.DeleteAllGroupCustomPermissions(System.Guid,System.Int32,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes all group custom permissions for a permission type.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.DeleteAllGroupCustomPermissions(System.Guid,System.Guid,System.Int32,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes all custom permissions for a group and a given permission type.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.DeleteAllGroupModulePermissions(System.Guid,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes all group module permissions.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.DeleteAllGroupModulePermissions(System.Guid,System.Guid,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes all module permissions for a group.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.DeleteAllGroupModulePermissions(System.Guid,System.Int32,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes all group module permissions for a permission type.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.DeleteAllGroupSolutionPermissions(Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes all group solution permissions.
            </summary>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.DeleteAllGroupSolutionPermissions(System.Guid,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes all solution permissions for a group.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.DeleteAllGroupSolutionPermissions(System.Int32,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes all group solution permissions for a permission type.
            </summary>
            <param name="permissionType">Permission type.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.DeleteAllModulePermissions(System.Guid,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes all module permissions.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.DeleteAllModulePermissions(System.Guid,System.Int32,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes all module permissions for a permission type.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.DeleteAllSolutionPermissions(Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes all solution permissions (except for the System user).
            </summary>
            <param name="token">Security token.</param>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.DeleteAllSolutionPermissions(System.Int32,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes all solution permissions for a permission type (except for the System user).
            </summary>
            <param name="permissionType">Permission type.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.DeleteAllUserCustomPermissions(System.Guid,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes all user custom permissions.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.DeleteAllUserCustomPermissions(System.Guid,System.Guid,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes all custom permissions for a user.
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.DeleteAllUserCustomPermissions(System.Guid,System.Int32,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes all user custom permissions for a permission type.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.DeleteAllUserCustomPermissions(System.Guid,System.Guid,System.Int32,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes all custom permissions for a user and a given permission type.
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.DeleteAllUserModulePermissions(System.Guid,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes all user module permissions.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="token">Security token.</param>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.DeleteAllUserModulePermissions(System.Guid,System.Int32,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes all user module permissions for a permission type.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">permissionType</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.DeleteAllUserModulePermissions(System.Guid,System.Guid,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes all module permissions for a user.
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.DeleteAllUserSolutionPermissions(Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes all user solution permissions.
            </summary>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.DeleteAllUserSolutionPermissions(System.Guid,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes all solution permissions for a user.
            </summary>
            <param name="userID">User ID.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.DeleteAllUserSolutionPermissions(System.Int32,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes all user solution permissions for a permission type.
            </summary>
            <param name="permissionType">Permission type.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.DeleteAllCustomPermissionTypes(System.Guid,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes all custom permission types for a module (including all custom permissions).
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.DeleteAllModulePermissionTypes(System.Guid,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes all module permission types (except built-in permission types).
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.DeleteAllSolutionPermissionTypes(Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes all solution permission types (except built-in permission types).
            </summary>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.DeleteGroupCustomPermission(System.Guid,System.Guid,System.Int32,System.Guid,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes a custom permission for a group.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="entityID">Permisison entityID.</param>
            <param name="token">Security token.</param>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.DeleteGroupModulePermission(System.Guid,System.Guid,System.Int32,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes a module permission for a group.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.DeleteGroupSolutionPermission(System.Guid,System.Int32,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes a solution permission for a group.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.DeleteUserCustomPermission(System.Guid,System.Guid,System.Int32,System.Guid,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes a custom permission for a user.
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="entityID">Permisison entityID.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.DeleteUserModulePermission(System.Guid,System.Guid,System.Int32,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes a module permission for a user.
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.DeleteUserSolutionPermission(System.Guid,System.Int32,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes a solution permission for a user.
            </summary>
            <param name="userID">User ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException">Cannot delete a solution permission from the System user</exception>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.DeleteCustomPermissionType(System.Guid,System.Int32,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes a custom permission type (including all permissions for the permission type).
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.DeleteModulePermissionType(System.Guid,System.Int32,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes a module permission type (including all permissions for the permission type).
            Built-in module permission types cannot be deleted.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException">Cannot delete a built-in module permission type</exception>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.DeleteSolutionPermissionType(System.Int32,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes a solution permission type (including all permissions for the permission type).
            Built-in solution permission types cannot be deleted.
            </summary>
            <param name="permissionType">Permission type.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException">Cannot delete a built-in solution permission type</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.EnsureUserPermission(System.Guid)">
            <summary>
            Ensures the cache will contain the users permission.
            </summary>
            <param name="userID">The user ID.</param>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.ExistsCustomPermissionType(System.Guid,System.Int32)">
            <summary>
            Returns whether a custom permission type exists for a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <returns>Whether a custom permission type exists for a module.</returns>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.ExistsModulePermissionType(System.Guid,System.Int32)">
            <summary>
            Returns whether a module permission type exists for a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <returns>Whether a module permission type exists for a module.</returns>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.ExistsSolutionPermissionType(System.Int32)">
            <summary>
            Returns whether a solution permission type.
            </summary>
            <param name="permissionType">Permission type.</param>
            <returns>Whether a module permission type exists for a module.</returns>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.GetGroupCustomPermissionsAsCarriers(System.Guid)">
            <summary>
            Gets all group custom permissions for a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.GetGroupCustomPermissionsAsCarriers(System.Guid,System.Guid)">
            <summary>
            Gets all custom permissions for a group.
            </summary>
            <param name="groupID">Group ID.</param>        
            <param name="moduleID">Module ID.</param>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.GetGroupCustomPermissionsAsCarriers(System.Guid,System.Guid,System.Int32)">
            <summary>
            Gets all custom permissions for a group.
            </summary>
            <param name="groupID">Group ID.</param>        
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.GetGroupCustomPermissionsAsCarriers(System.Guid,System.Int32,System.Guid)">
            <summary>
            Gets all group custom permissions for a entityID.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="entityID">entityID.</param>
            <returns>An array of permissions.</returns>
            <exception cref="T:System.Exception"><c>Exception</c>.</exception>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.GetGroupModulePermissionsAsCarriers(System.Guid)">
            <summary>
            Gets all group module permissions.
            </summary>
            <param name="moduleID">Module ID.</param>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.GetGroupModulePermissionsAsCarriers(System.Guid,System.Guid)">
            <summary>
            Gets all module permissions for a group.
            </summary>
            <param name="groupID">Group ID.</param>        
            <param name="moduleID">Module ID.</param>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.GetGroupModulePermissionsAsCarriers(System.Guid,System.Int32)">
            <summary>
            Gets all group module permissions for a permission type.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.GetGroupSolutionPermissionsAsCarriers">
            <summary>
            Gets all group solution permissions.
            </summary>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.GetGroupSolutionPermissionsAsCarriers(System.Guid)">
            <summary>
            Gets all solution permissions for a group.
            </summary>
            <param name="groupID">Group ID.</param>     
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.GetGroupSolutionPermissionsAsCarriers(System.Int32)">
            <summary>
            Gets all group solution permissions for a permission type.
            </summary>
            <param name="permissionType">Permission type.</param>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.GetUserCustomPermissionsAsCarriers(System.Guid)">
            <summary>
            Gets all user custom permissions for a module.
            </summary>
            <param name="moduleID">Module ID.</param>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.GetUserCustomPermissionsAsCarriers(System.Guid,System.Guid)">
            <summary>
            Gets all custom permissions for a user.
            </summary>
            <param name="userID">User ID.</param>        
            <param name="moduleID">Module ID.</param>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.GetUserCustomPermissionsAsCarriers(System.Guid,System.Guid,System.Int32)">
            <summary>
            Gets all custom permissions for a user.
            </summary>
            <param name="userID">User ID.</param>        
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.GetUserCustomPermissionsAsCarriers(System.Guid,System.Int32,System.Guid)">
            <summary>
            Gets all user custom permissions for a entityID.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="entityID">entityID.</param>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.GetUserModulePermissionsAsCarriers(System.Guid)">
            <summary>
            Gets all user module permissions.
            </summary>
            <param name="moduleID">Module ID.</param>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.GetUserModulePermissionsAsCarriers(System.Guid,System.Guid)">
            <summary>
            Gets all module permissions for a user.
            </summary>
            <param name="userID">User ID.</param>        
            <param name="moduleID">Module ID.</param>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.GetUserModulePermissionsAsCarriers(System.Guid,System.Int32)">
            <summary>
            Gets all user module permissions.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.GetUserSolutionPermissionsAsCarriers">
            <summary>
            Gets all user solution permissions.
            </summary>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.GetUserSolutionPermissionsAsCarriers(System.Int32)">
            <summary>
            Gets all user solution permissions for a permission type.
            </summary>
            <param name="permissionType">Permission type.</param>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.GetUserSolutionPermissionsAsCarriers(System.Guid)">
            <summary>
            Gets all solution permissions for a user.
            </summary>
            <param name="userID">User ID.</param>        
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.GetCustomPermissionTypesAsCarriers(System.Guid)">
            <summary>
            Gets all custom permission types.
            </summary>
            <param name="moduleID">Module ID.</param>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.GetModulePermissionTypesAsCarriers(System.Guid)">
            <summary>
            Gets all module permission types.
            </summary>
            <param name="moduleID">Module ID.</param>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.GetSolutionPermissionTypesAsCarriers">
            <summary>
            Gets all solution permission types.
            </summary>
            <returns>An array of permissions.</returns>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.GroupHasAccountAllPermission(System.Guid)">
            <summary>
            Returns whether the group has the account permission
            </summary>
            <param name="groupID">Group ID.</param>
            <returns>Wheter the group has the account permission.</returns>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.GroupHasAccountAllPermission(System.Guid,System.Boolean)">
            <summary>
            Returns whether the group has the account permission
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="includeHigherLevelPermissions">Whether to include higher level permissions or not (Solution All level).</param>
            <returns>Wheter the group has the account permission.</returns>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.GroupHasCustomPermission(System.Guid,System.Guid,System.Int32,System.Guid)">
            <summary>
            Returns whether the group has the requested custom permission
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="entityID">Permission entityID.</param>
            <returns>True if permission exists, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.GroupHasCustomPermission(System.Guid,System.Guid,System.Int32,System.Guid,System.Boolean)">
            <summary>
            Returns whether the group has the requested custom permission
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="entityID">Permission entityID.</param>
            <param name="includeHigherLevelPermissions">Whether to include higher level permissions or not (module and solution level).</param>
            <returns>True if permission exists, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.GroupHasCustomPermission(System.Guid,System.Guid,System.Int32,System.Guid,System.Boolean,Litium.Foundation.Security.PermissionManager.PermissionEntity@)">
            <summary>
            Returns whether the group has the requested custom permission
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="entityID">Permission entityID.</param>
            <param name="includeHigherLevelPermissions">Whether to include higher level permissions or not (module and solution level).</param>
            <param name="permissionEntity">The permission entity.</param>
            <returns>
            True if permission exists, otherwise false.
            </returns>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.GroupHasLanguageAllPermission(System.Guid)">
            <summary>
            Returns whether the group has the language permission
            </summary>
            <param name="groupID">Group ID.</param>
            <returns>Wheter the group has the language permission.</returns>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.GroupHasLanguageAllPermission(System.Guid,System.Boolean)">
            <summary>
            Returns whether the group has the language permission
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="includeHigherLevelPermissions">Whether to include higher level permissions or not (Solution All level).</param>
            <returns>Wheter the group has the language permission.</returns>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.GroupHasModulePermission(System.Guid,System.Guid,System.Int32)">
            <summary>
            Returns whether the group has the requested module permission
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <returns>True if permission exists, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.GroupHasModulePermission(System.Guid,System.Guid,System.Int32,System.Boolean)">
            <summary>
            Returns whether the group has the requested module permission
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="includeHigherLevelPermissions">Whether to include higher level permissions or not (module and solution level).</param>
            <returns>True if permission exists, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.GroupHasModulePermission(System.Guid,System.Guid,System.Int32,System.Boolean,Litium.Foundation.Security.PermissionManager.PermissionEntity@)">
            <summary>
            Returns whether the group has the requested module permission
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="includeHigherLevelPermissions">Whether to include higher level permissions or not (module and solution level).</param>
            <param name="permissionEntity">The permission entity.</param>
            <returns>
            True if permission exists, otherwise false.
            </returns>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.GroupHasSolutionPermission(System.Guid,System.Int32)">
            <summary>
            Returns whether the group has the requested solution permission
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="permissionType">Permission type.</param>
            <returns>True if permission exists, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.GroupHasSolutionPermission(System.Guid,System.Int32,System.Boolean)">
            <summary>
            Returns whether the group has the requested solution permission
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="includeHigherLevelPermissions">Whether to include higher level permissions or not (Solution All permission).</param>
            <returns>True if permission exists, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.GroupHasSolutionPermission(System.Guid,System.Int32,System.Boolean,Litium.Foundation.Security.PermissionManager.PermissionEntity@)">
            <summary>
            Returns whether the group has the requested solution permission
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="includeHigherLevelPermissions">Whether to include higher level permissions or not (Solution All permission).</param>
            <param name="permissionEntity">The permission entity.</param>
            <returns>
            True if permission exists, otherwise false.
            </returns>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.GroupHasSystemAllPermission(System.Guid)">
            <summary>
            Returns whether the group has the System All permission
            </summary>
            <param name="groupID">Group ID.</param>
            <returns>Wheter the group has the System All permission.</returns>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.UserHasAccountAllPermission(System.Guid)">
            <summary>
            Returns whether the user has the account permission
            </summary>
            <param name="userID">User ID.</param>
            <returns>Wheter the user has the account permission.</returns>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.UserHasAccountAllPermission(System.Guid,System.Boolean,System.Boolean)">
            <summary>
            Returns whether the user has the account permission
            </summary>
            <param name="userID">User ID.</param>
            <param name="includeHigherLevelPermissions">Whether to include higher level permissions or not (Solution All level).</param>
            <param name="includeGroups">Wheter to include the permissions of the groups which the user belongs to.</param>
            <returns>Wheter the user has the account permission.</returns>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.UserHasLanguageAllPermission(System.Guid)">
            <summary>
            Returns whether the user has the language permission
            </summary>
            <param name="userID">User ID.</param>
            <returns>Wheter the user has the language permission.</returns>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.UserHasLanguageAllPermission(System.Guid,System.Boolean,System.Boolean)">
            <summary>
            Returns whether the user has the language permission
            </summary>
            <param name="userID">User ID.</param>
            <param name="includeHigherLevelPermissions">Whether to include higher level permissions or not (Solution All level).</param>
            <param name="includeGroups">Wheter to include the permissions of the groups which the user belongs to.</param>
            <returns>Wheter the user has the language permission.</returns>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.UserHasCustomPermission(System.Guid,System.Guid,System.Int32,System.Guid)">
            <summary>
            Returns whether the user has the requested custom permission
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="entityID">Permission entityID.</param>
            <returns>True if permission exists, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.UserHasCustomPermission(System.Guid,System.Guid,System.Int32,System.Guid,System.Boolean,System.Boolean)">
            <summary>
            Returns whether the user has the requested custom permission
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="entityID">Permission entityID.</param>
            <param name="includeHigherLevelPermissions">Whether to include higher level permissions or not (module and solution level).</param>
            <param name="includeGroups">Wheter to include the permissions of the groups which the user belongs to.</param>
            <returns>True if permission exists, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.UserHasCustomPermission(System.Guid,System.Guid,System.Int32,System.Guid,System.Boolean,System.Boolean,Litium.Foundation.Security.PermissionManager.PermissionEntity@)">
            <summary>
            Returns whether the user has the requested custom permission
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="entityID">Permission entityID.</param>
            <param name="includeHigherLevelPermissions">Whether to include higher level permissions or not (module and solution level).</param>
            <param name="includeGroups">Wheter to include the permissions of the groups which the user belongs to.</param>
            <param name="permissionEntity">The permission entity.</param>
            <returns>
            True if permission exists, otherwise false.
            </returns>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.UserHasModulePermission(System.Guid,System.Guid,System.Int32)">
            <summary>
            Returns whether the user has the requested module permission
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <returns>True if permission exists, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.UserHasModulePermission(System.Guid,System.Guid,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Returns whether the user has the requested module permission
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="includeHigherLevelPermissions">Whether to include higher level permissions or not (module and solution level).</param>
            <param name="includeGroups">Wheter to include the permissions of the groups which the user belongs to.</param>
            <returns>True if permission exists, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.UserHasModulePermission(System.Guid,System.Guid,System.Int32,System.Boolean,System.Boolean,Litium.Foundation.Security.PermissionManager.PermissionEntity@)">
            <summary>
            Returns whether the user has the requested module permission
            </summary>
            <param name="userID">User ID.</param>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="includeHigherLevelPermissions">Whether to include higher level permissions or not (module and solution level).</param>
            <param name="includeGroups">Wheter to include the permissions of the groups which the user belongs to.</param>
            <param name="permissionEntity">The permission entity.</param>
            <returns>
            True if permission exists, otherwise false.
            </returns>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.UserHasSolutionPermission(System.Guid,System.Int32)">
            <summary>
            Returns whether the user has the requested solution permission
            </summary>
            <param name="userID">User ID.</param>
            <param name="permissionType">Permission type.</param>
            <returns>True if permission exists, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.UserHasSolutionPermission(System.Guid,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Returns whether the user has the requested solution permission
            </summary>
            <param name="userID">User ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="includeHigherLevelPermissions">Whether to include higher level permissions or not (module and solution level).</param>
            <param name="includeGroups">Wheter to include the permissions of the groups which the user belongs to.</param>
            <returns>True if permission exists, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.UserHasSolutionPermission(System.Guid,System.Int32,System.Boolean,System.Boolean,Litium.Foundation.Security.PermissionManager.PermissionEntity@)">
            <summary>
            Returns whether the user has the requested solution permission
            </summary>
            <param name="userID">User ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="includeHigherLevelPermissions">Whether to include higher level permissions or not (module and solution level).</param>
            <param name="includeGroups">Wheter to include the permissions of the groups which the user belongs to.</param>
            <param name="permissionEntity">The permission entity.</param>
            <returns>
            True if permission exists, otherwise false.
            </returns>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.UserHasSystemAllPermission(System.Guid)">
            <summary>
            Returns whether the user has the System All permission
            </summary>
            <param name="userID">User ID.</param>
            <returns>Wheter the user has the System All permission.</returns>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.UserHasSystemAllPermission(System.Guid,System.Boolean)">
            <summary>
            Returns whether the user has the System All permission
            </summary>
            <param name="userID">User ID.</param>
            <param name="includeGroups">Wheter to include the permissions of the groups which the user belongs to.</param>
            <returns>Wheter the user has the System All permission.</returns>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.LoadCustomPermissionsTable">
            <summary>
            Loads custom permission hashtable to memory.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.LoadModulePermissionsTable">
            <summary>
            Loads module permission hashtable to memory.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.LoadSolutionPermissionsTable">
            <summary>
            Loads solution permission hashtable to memory.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.GeneratePasswordSalt">
            <summary>
            Generates the password salt.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.CompareEncryptedPassword(System.String,System.String,System.String)">
            <summary>
            Compares the encrypted password.
            </summary>
            <param name="encryptedPassword">The encrypted password.</param>
            <param name="passwordSalt">The password salt.</param>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.EncryptPassword(System.String,System.String)">
            <summary>
            Returns the password as an encrypted password
            </summary>
            <param name="password">Password to encrypt.</param>
            <param name="salt">Salt to use in encryption</param>
            <returns>The encrypted password.</returns>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.UserModulePermissionChanged(System.Guid)">
            <summary>
            Users the module permission changed.
            </summary>
            <param name="userID">The user ID.</param>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.GroupMembershipChange(System.Guid)">
            <summary>
            Groups the membership change.
            </summary>
            <param name="userID">The user ID.</param>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.GroupModulePermissionChanged(System.Guid)">
            <summary>
            Groups the module permission changed.
            </summary>
            <param name="groupID">The group ID.</param>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.GetUsersSearchPermissions(System.Guid)">
            <summary>
            Gets the membership ids for the user that might give read permissions. UserID, GroupIDs and ModuleIDs (for which the user got ContentAll/All permissions)
            </summary>
            <value>The permissions.</value>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.UpdateCustomPermissionType(Litium.Foundation.Carriers.CustomPermissionTypeCarrier,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Updates a custom permission type.
            </summary>
            <param name="carrier">Custom permission type carrier.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.UpdateModulePermissionType(Litium.Foundation.Carriers.ModulePermissionTypeCarrier,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Updates a module permission type.
            </summary>
            <param name="carrier">Module permission type carrier.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.UpdateSolutionPermissionType(Litium.Foundation.Carriers.SolutionPermissionTypeCarrier,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Updates a solution permission type.
            </summary>
            <param name="carrier">Module permission type carrier.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.FoundationException"><c>FoundationException</c>.</exception>
        </member>
        <member name="T:Litium.Foundation.Security.PermissionManager.PermissionEntity">
            <summary>
            Permission Entity, holds reference to inherited permissions.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.PermissionEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.PermissionManager.PermissionEntity"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.PermissionEntity.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
            <exception cref="T:System.NullReferenceException">Object is null</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.PermissionEntity.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.PermissionEntity.Revoke(Litium.Foundation.Security.PermissionManager.PermissionKey,System.Collections.Generic.Dictionary{Litium.Foundation.Security.PermissionManager.PermissionKey,Litium.Foundation.Security.PermissionManager.PermissionEntity})">
            <summary>
            Revokes the referers of this permssion from the specified cache.
            </summary>
            <param name="permissionKey">The permission key.</param>
            <param name="cache">The cache.</param>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.PermissionEntity.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Litium.Foundation.Security.PermissionManager.PermissionEntity.PermissionOwnerID">
            <summary>
            Gets or sets the orginal permission owner ID.
            </summary>
            <value>The permission owner ID.</value>
        </member>
        <member name="P:Litium.Foundation.Security.PermissionManager.PermissionEntity.PermissionType">
            <summary>
            Gets or sets the orginal permission type.
            </summary>
            <value>The type of the permission.</value>
        </member>
        <member name="P:Litium.Foundation.Security.PermissionManager.PermissionEntity.Referers">
            <summary>
            Referes of this permission through inherited permission type or group membership.
            </summary>
            <value>The referers.</value>
        </member>
        <member name="T:Litium.Foundation.Security.PermissionManager.PermissionKey">
            <summary>
            Permission key.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.PermissionKey.GetHashCodeValue(System.Guid)">
            <summary>
            Convert the hash of the Guid to a possive long value used internally.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.PermissionKey.#ctor(System.Guid,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.PermissionManager.PermissionKey"/> class.
            </summary>
            <param name="ownerID">The user/group ID that is connected with the permission.</param>
            <param name="permissionType">Type of the permission.</param>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.PermissionKey.#ctor(System.Guid,System.Guid,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.PermissionManager.PermissionKey"/> class.
            </summary>
            <param name="ownerID">The user/group ID that is connected with the permission.</param>
            <param name="moduleID">The module ID.</param>
            <param name="permissionType">Type of the permission.</param>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.PermissionKey.#ctor(System.Guid,System.Guid,System.Guid,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.PermissionManager.PermissionKey"/> class.
            </summary>
            <param name="ownerID">The user/group ID that is connected with the permission.</param>
            <param name="moduleID">The module ID.</param>
            <param name="entityID">The instance ID.</param>
            <param name="permissionType">Type of the permission.</param>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.PermissionKey.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.PermissionKey.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
            <exception cref="T:System.NullReferenceException">Object is null</exception>
        </member>
        <member name="M:Litium.Foundation.Security.PermissionManager.PermissionKey.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Litium.Foundation.Security.CustomUserPermissionExistsException">
            <summary>
            Thrown when the custom user permission already exists.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.CustomUserPermissionExistsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.CustomUserPermissionExistsException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.CustomUserPermissionExistsException.#ctor(System.Guid,System.Int32,System.Guid)">
            <summary>
            Constructor.
            </summary>
            <param name="userID">User ID.</param>
            <param name="permissionTypeID">Permission type ID.</param>
            <param name="key">Permission key.</param>
        </member>
        <member name="M:Litium.Foundation.Security.CustomUserPermissionExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.CustomUserPermissionExistsException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Litium.Foundation.Security.CustomUserPermissionExistsException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="P:Litium.Foundation.Security.CustomUserPermissionExistsException.Key">
            <summary>
            Key.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Security.CustomUserPermissionExistsException.UserID">
            <summary>
            User ID.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Security.CustomGroupPermissionExistsException">
            <summary>
            Thrown when the custom group permission already exists.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.CustomGroupPermissionExistsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.CustomGroupPermissionExistsException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.CustomGroupPermissionExistsException.#ctor(System.Guid,System.Int32,System.Guid)">
            <summary>
            Constructor.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="permissionTypeID">Permission type ID.</param>
            <param name="key">Permission key.</param>
        </member>
        <member name="M:Litium.Foundation.Security.CustomGroupPermissionExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.CustomGroupPermissionExistsException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Litium.Foundation.Security.CustomGroupPermissionExistsException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="P:Litium.Foundation.Security.CustomGroupPermissionExistsException.GroupID">
            <summary>
            Group ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Security.CustomGroupPermissionExistsException.Key">
            <summary>
            Key.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Security.CustomUserPermissionDoesNotExistException">
            <summary>
            Thrown when a custom user permission does not exist or has been deleted.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.CustomUserPermissionDoesNotExistException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.CustomUserPermissionDoesNotExistException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.CustomUserPermissionDoesNotExistException.#ctor(System.Guid,System.Int32,System.Guid)">
            <summary>
            Constructor.
            </summary>
            <param name="userID">User ID.</param>
            <param name="permissionTypeID">Permission type ID.</param>
            <param name="key">Permission key.</param>
        </member>
        <member name="M:Litium.Foundation.Security.CustomUserPermissionDoesNotExistException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.CustomUserPermissionDoesNotExistException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Litium.Foundation.Security.CustomUserPermissionDoesNotExistException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="P:Litium.Foundation.Security.CustomUserPermissionDoesNotExistException.Key">
            <summary>
            Key.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Security.CustomUserPermissionDoesNotExistException.UserID">
            <summary>
            User ID.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Security.CustomGroupPermissionDoesNotExistException">
            <summary>
            Thrown when a custom group permission does not exist or has been deleted.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.CustomGroupPermissionDoesNotExistException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.CustomGroupPermissionDoesNotExistException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.CustomGroupPermissionDoesNotExistException.#ctor(System.Guid,System.Int32,System.Guid)">
            <summary>
            Constructor.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="permissionTypeID">Permission type ID.</param>
            <param name="key">Permission key.</param>
        </member>
        <member name="M:Litium.Foundation.Security.CustomGroupPermissionDoesNotExistException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.CustomGroupPermissionDoesNotExistException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Litium.Foundation.Security.CustomGroupPermissionDoesNotExistException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="P:Litium.Foundation.Security.CustomGroupPermissionDoesNotExistException.GroupID">
            <summary>
            Group ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Security.CustomGroupPermissionDoesNotExistException.Key">
            <summary>
            Key.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Security.CustomPermissionTypeDoesNotExistException">
            <summary>
            Thrown when a custom permission type does not exist or has been deleted.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.CustomPermissionTypeDoesNotExistException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.CustomPermissionTypeDoesNotExistException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.CustomPermissionTypeDoesNotExistException.#ctor(System.Int32,System.Guid)">
            <summary>
            Constructor.
            </summary>
            <param name="permissionTypeID">Permission type ID.</param>
            <param name="moduleID">Module ID.</param>
        </member>
        <member name="M:Litium.Foundation.Security.CustomPermissionTypeDoesNotExistException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.CustomPermissionTypeDoesNotExistException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Litium.Foundation.Security.CustomPermissionTypeDoesNotExistException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="P:Litium.Foundation.Security.CustomPermissionTypeDoesNotExistException.ModuleID">
            <summary>
            Module ID.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Security.CustomPermissionTypeExistsException">
            <summary>
            Thrown when the custom permission type already exists.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.CustomPermissionTypeExistsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.CustomPermissionTypeExistsException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.CustomPermissionTypeExistsException.#ctor(System.Guid,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionTypeID">Permission type ID.</param>
        </member>
        <member name="M:Litium.Foundation.Security.CustomPermissionTypeExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.CustomPermissionTypeExistsException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Litium.Foundation.Security.CustomPermissionTypeExistsException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="P:Litium.Foundation.Security.CustomPermissionTypeExistsException.ModuleID">
            <summary>
            Module ID.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Security.SecurityToken">
            <summary>
            A SecurityToken is used to authorize against the Litium Foundation API.
            Use Solution.Instance.AuthenticationManager or Solution.Instance.LoginManager to get a SecurityToken.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.SecurityToken.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.SecurityToken"/> class.
            </summary>
            <param name="userID">The user ID.</param>
        </member>
        <member name="M:Litium.Foundation.Security.SecurityToken.#ctor(System.Security.Principal.IPrincipal)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.SecurityToken"/> class.
            </summary>
            <param name="principal">The principal.</param>
        </member>
        <member name="M:Litium.Foundation.Security.SecurityToken.HasCustomPermission(System.Guid,System.Int32,System.Guid,System.Boolean,System.Boolean)">
            <summary>
            Returns whether the user has the requested custom permission.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="key">Permission key.</param>
            <param name="includeHigherLevelPermissions">Whether to include higher level permissions or not (module and solution level).</param>
            <param name="includeGroups">Wheter to include the permissions of the groups which the user belongs to.</param>
            <returns>True if permission exists, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Security.SecurityToken.HasModulePermission(System.Guid,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Returns whether the user has the requested module permission.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="permissionType">Permission type.</param>
            <param name="includeHigherLevelPermissions">Whether to include higher level permissions or not (module and solution level).</param>
            <param name="includeGroups">Wheter to include the permissions of the groups which the user belongs to.</param>
            <returns>True if permission exists, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Security.SecurityToken.HasSolutionPermission(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Returns whether the user has the requested solution permission.
            </summary>
            <param name="permissionType">Permission type.</param>
            <param name="includeHigherLevelPermissions">Whether to include higher level permissions or not (module and solution level).</param>
            <param name="includeGroups">Wheter to include the permissions of the groups which the user belongs to.</param>
            <returns>True if permission exists, otherwise false.</returns>
        </member>
        <member name="M:Litium.Foundation.Security.SecurityToken.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. 
                            </param><exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Litium.Foundation.Security.SecurityToken.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Litium.Foundation.Security.SecurityToken.op_Equality(Litium.Foundation.Security.SecurityToken,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="token1">The token1.</param>
            <param name="token2">The token2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Litium.Foundation.Security.SecurityToken.op_Inequality(Litium.Foundation.Security.SecurityToken,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="token1">The token1.</param>
            <param name="token2">The token2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Litium.Foundation.Security.SecurityToken.GetSecurityToken(System.Web.Security.FormsAuthenticationTicket)">
            <summary>
            Gets the security token.
            </summary>
            <param name="ticket">The ticket.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Security.SecurityToken.GetFormsAuthenticationTicket(Litium.Foundation.Security.SecurityToken)">
            <summary>
            Gets the forms authentication ticket.
            </summary>
            <param name="securityToken">The security token.</param>
            <returns></returns>
        </member>
        <member name="P:Litium.Foundation.Security.SecurityToken.AnonymousToken">
            <summary>
            Gets the anonymous token.
            </summary>
            <value>The anonymous token.</value>
        </member>
        <member name="P:Litium.Foundation.Security.SecurityToken.IsAnonymousUser">
            <summary>
            Returns whether the token belongs to the anonymous user.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Security.SecurityToken.IsSystemUser">
            <summary>
            Returns whether the token belongs to the anonymous user.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Security.SecurityToken.User">
            <summary>
            Returns the user.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Security.SecurityToken.UserID">
            <summary>
            Returns the user ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Security.SecurityToken.SearchPermissionIDs">
            <summary>
            Gets the membership ids for the user that might give read permissions. UserID, GroupIDs and ModuleIDs (for which the user got ContentAll/All permissions)
            </summary>
            <value>The permissions.</value>
        </member>
        <member name="T:Litium.Foundation.Security.BuiltInSolutionPermissionTypeNames">
            <summary>
            Built in solution permission type names.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Security.BuiltInSolutionPermissionTypeNames.PERMISSION_NAME_ACCOUNT_ALL">
            <summary>
            Permission to Accounts.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Security.BuiltInSolutionPermissionTypeNames.PERMISSION_NAME_ALL">
            <summary>
            All permission.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Security.BuiltInSolutionPermissionTypeNames.PERMISSION_NAME_LANGUAGE_ALL">
            <summary>
            Permission to Languages
            </summary>
        </member>
        <member name="F:Litium.Foundation.Security.BuiltInSolutionPermissionTypeNames.PERMISSION_NAME_UNDEFINED">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Security.BuiltInSolutionPermissionTypes">
            <summary>
            Built in solution permission types.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Security.BuiltInSolutionPermissionTypes.PERMISSION_ID_ACCOUNT_ALL">
            <summary>
            Permission to Accounts.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Security.BuiltInSolutionPermissionTypes.PERMISSION_ID_ALL">
            <summary>
            All permission.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Security.BuiltInSolutionPermissionTypes.PERMISSION_ID_LANGUAGE_ALL">
            <summary>
            Permission to Languages
            </summary>
        </member>
        <member name="F:Litium.Foundation.Security.BuiltInSolutionPermissionTypes.PERMISSION_ID_UNDEFINED">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Solution">
            <summary>
            The solution (one instance per server).
            </summary>
        </member>
        <member name="M:Litium.Foundation.Solution.#ctor(Litium.Foundation.Data.DataSettings,Litium.Foundation.Accounts.AccountSettings,System.String,Litium.Foundation.Security.SecurityToken@)">
            <summary>
            Constructor.
            </summary>
            <param name="dataSettings">Data settings.</param>
            <param name="accountSettings">Account settings.</param>
            <param name="systemUserPassword">System user password.</param>
            <param name="systemToken">System user token.</param>
            <exception cref="T:Litium.Foundation.Data.DatabaseConnectionFailureException">Thrown when connecting to the database failed.</exception>
            <exception cref="T:Litium.Foundation.Data.FileWriteFailureException">Thrown when the writing to the Files-folder failed.</exception>
            <exception cref="T:Litium.Foundation.Data.LoadDALFailureException">Thrown when the data access layer could not be loaded.</exception>
            <exception cref="T:Litium.Foundation.Security.WrongSystemUserPasswordException">Thrown on wrong system user password.</exception>
        </member>
        <member name="M:Litium.Foundation.Solution.#ctor(Litium.Foundation.Data.DataSettings,Litium.Foundation.Accounts.AccountSettings,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="dataSettings">Data settings.</param>
            <param name="accountSettings">Account settings.</param>
            <param name="systemUserPassword">System user password.</param>
            <exception cref="T:Litium.Foundation.Data.DatabaseConnectionFailureException">Thrown when connecting to the database failed.</exception>
            <exception cref="T:Litium.Foundation.Data.FileWriteFailureException">Thrown when the writing to the Files-folder failed.</exception>
            <exception cref="T:Litium.Foundation.Data.LoadDALFailureException">Thrown when the data access layer could not be loaded.</exception>
            <exception cref="T:Litium.Foundation.Security.WrongSystemUserPasswordException">Thrown on wrong system user password.</exception>
        </member>
        <member name="M:Litium.Foundation.Solution.Stop">
            <summary>
            Stops the solution on the current server.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Solution.AccountDirectorySyncEvent(System.Object)">
            <summary>
            Executes the account directory sync timer event.
            </summary>
            <param name="state">State.</param>
        </member>
        <member name="M:Litium.Foundation.Solution.DeleteEventsAndLogoutUsersEvent(System.Object)">
            <summary>
            Executes the delete event and logout users timer event.
            </summary>
            <param name="state">State.</param>
        </member>
        <member name="M:Litium.Foundation.Solution.RaiseUnhandledEventsEvent(System.Object)">
            <summary>
            Executes the raise unhandled events timer event.
            </summary>
            <param name="state">State.</param>
        </member>
        <member name="M:Litium.Foundation.Solution.AssertWriteToDisc(System.String)">
            <summary>
            Throws an exception if the application cannot write a test file to disc.
            </summary>
            <param name="filesDirectory">Full path to directory folder.</param>
            <exception cref="T:Litium.Foundation.Data.FileWriteFailureException">Thrown when the writing to the Files-folder failed.</exception>
        </member>
        <member name="M:Litium.Foundation.Solution.CreateSolutionPermissionTypes">
            <summary>
            Creates solution permission types if they are missing.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Solution.DeleteOldEventsAndLogoutUsers">
            <summary>
            Deletes old events and log out users who's session is more than five hours old.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Solution.LoadDAL">
            <summary>
            Loads and inits the DAL.
            </summary>
            <returns>An instance of the DAL, or null if DAL could not be loaded.</returns>
            <exception cref="T:Litium.Foundation.Data.DatabaseConnectionFailureException">Thrown when connecting to the database failed.</exception>
            <exception cref="T:Litium.Foundation.Data.LoadDALFailureException">Thrown when the data access layer could not be loaded.</exception>
        </member>
        <member name="M:Litium.Foundation.Solution.RaiseUnhandledEvents">
            <summary>
            Raises unhandled events.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Solution.SyncDirectory">
            <summary>
            Executes the directory sync.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Solution.SolutionInstance">
            <summary>
            Get / set the Solution instance for the application domain.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Solution.Instance">
            <summary>
            Gets the Solution instance for the application domain.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Solution.AccountSettings">
            <summary>
            Account settings.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Solution.AccountTypes">
            <summary>
            Returns the account types used.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Solution.AuthenticationManager">
            <summary>
            Returns the authentication manager.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Solution.Currencies">
            <summary>
            All currencies.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Solution.EventManager">
            <summary>
            Returns the event manager.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Solution.Groups">
            <summary>
            All groups.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Solution.Languages">
            <summary>
            All languages.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Solution.Log">
            <summary>
            Returns the solutions log.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Solution.LoginManager">
            <summary>
            Returns the login manager.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Solution.Modules">
            <summary>
             Returns all modules in the solution.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Solution.PermissionManager">
            <summary>
            Permission manager.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Solution.ScheduledTaskManager">
            <summary>
            Get Scheduled task manager for the solution.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Solution.SessionIDs">
            <summary>
             Returns all session ids saved with a user.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Solution.SpellingDictionarys">
            <summary>
            Gets the spelling dictionarys.
            </summary>
            <value>The spelling dictionarys.</value>
        </member>
        <member name="P:Litium.Foundation.Solution.SystemStrings">
            <summary>
             Returns a collection of the system strings in the solution.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Solution.Users">
            <summary>
            All users in the solutions.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Solution.SearchService">
            <summary>
            The solution search facility.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Solution.DAL">
            <summary>
            Returns the Data Access Layer.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Solution.DataSettings">
            <summary>
            Data settings.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Solution.EventDispatcher">
            <summary>
            Returns the event dispatcher.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Solution.SystemToken">
            <summary>
            The solutions system token.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Solution.SystemUserPassword">
            <summary>
            The solutions system user password.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Solution.ExistsInstance">
            <summary>
            Gets a value indicating whether [exists instance].
            </summary>
            <value><c>true</c> if [exists instance]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Litium.Foundation.Security.SolutionGroupPermissionDoesNotExistException">
            <summary>
            Thrown when an solution group permission does not exist or has been deleted.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.SolutionGroupPermissionDoesNotExistException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.SolutionGroupPermissionDoesNotExistException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.SolutionGroupPermissionDoesNotExistException.#ctor(System.Guid,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="permissionTypeID">Permission type ID.</param>
        </member>
        <member name="M:Litium.Foundation.Security.SolutionGroupPermissionDoesNotExistException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.SolutionGroupPermissionDoesNotExistException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Litium.Foundation.Security.SolutionGroupPermissionDoesNotExistException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the object data.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Litium.Foundation.Security.SolutionGroupPermissionDoesNotExistException.GroupID">
            <summary>
            Group ID.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Security.SolutionGroupPermissionExistsException">
            <summary>
            Thrown when the solution group permission already exists.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.SolutionGroupPermissionExistsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.SolutionGroupPermissionExistsException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.SolutionGroupPermissionExistsException.#ctor(System.Guid,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="groupID">Group ID.</param>
            <param name="permissionTypeID">Permission type ID.</param>
        </member>
        <member name="M:Litium.Foundation.Security.SolutionGroupPermissionExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.SolutionGroupPermissionExistsException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Litium.Foundation.Security.SolutionGroupPermissionExistsException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the object data.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Litium.Foundation.Security.SolutionGroupPermissionExistsException.GroupID">
            <summary>
            Group ID.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Security.SolutionPermissionRequiredException">
            <summary>
            SolutionPermissionRequiredException is thrown when a solution permission is required.
            </summary>
        </member>
        <member name="F:Litium.Foundation.Security.SolutionPermissionRequiredException.m_permissionTypeID">
            <summary>
            Permission type ID
            </summary>
        </member>
        <member name="F:Litium.Foundation.Security.SolutionPermissionRequiredException.m_userID">
            <summary>
            User ID
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.SolutionPermissionRequiredException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.SolutionPermissionRequiredException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.SolutionPermissionRequiredException.#ctor(System.Guid,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="userID">User ID.</param>
            <param name="permissionTypeID">Permission type ID.</param>
        </member>
        <member name="M:Litium.Foundation.Security.SolutionPermissionRequiredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.SolutionPermissionRequiredException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Litium.Foundation.Security.SolutionPermissionRequiredException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="P:Litium.Foundation.Security.SolutionPermissionRequiredException.PermissionTypeID">
            <summary>
            Permission type ID.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Security.SolutionPermissionRequiredException.UserID">
            <summary>
            User ID.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Security.SolutionPermissionTypeDoesNotExistException">
            <summary>
            Thrown when a solution permission type does not exist or has been deleted.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.SolutionPermissionTypeDoesNotExistException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.SolutionPermissionTypeDoesNotExistException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.SolutionPermissionTypeDoesNotExistException.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="permissionTypeID">Permission type ID.</param>
        </member>
        <member name="M:Litium.Foundation.Security.SolutionPermissionTypeDoesNotExistException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.SolutionPermissionTypeDoesNotExistException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Litium.Foundation.Security.SolutionPermissionTypeExistsException">
            <summary>
            Thrown when the solution permission type already exists.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.SolutionPermissionTypeExistsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.SolutionPermissionTypeExistsException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.SolutionPermissionTypeExistsException.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="permissionTypeID">Permission type ID.</param>
        </member>
        <member name="M:Litium.Foundation.Security.SolutionPermissionTypeExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.SolutionPermissionTypeExistsException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Litium.Foundation.Security.SolutionUserPermissionDoesNotExistException">
            <summary>
            Thrown when an solution user permission does not exist or has been deleted.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.SolutionUserPermissionDoesNotExistException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.SolutionUserPermissionDoesNotExistException"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.SolutionUserPermissionDoesNotExistException.#ctor(System.Guid,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="userID">User ID.</param>
            <param name="permissionTypeID">Permission type ID.</param>
        </member>
        <member name="M:Litium.Foundation.Security.SolutionUserPermissionDoesNotExistException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.SolutionUserPermissionDoesNotExistException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Litium.Foundation.Security.SolutionUserPermissionDoesNotExistException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the object data.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Litium.Foundation.Security.SolutionUserPermissionDoesNotExistException.UserID">
            <summary>
            User ID.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Security.SolutionUserPermissionExistsException">
            <summary>
            Thrown when the solution user permission already exists.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.SolutionUserPermissionExistsException.#ctor">
            <summary>
            Solutions the group permission exists exception.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.SolutionUserPermissionExistsException.#ctor(System.Guid,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="userID">User ID.</param>
            <param name="permissionTypeID">Permission type ID.</param>
        </member>
        <member name="M:Litium.Foundation.Security.SolutionUserPermissionExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.SolutionUserPermissionExistsException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Litium.Foundation.Security.SolutionUserPermissionExistsException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the object data.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Litium.Foundation.Security.SolutionUserPermissionExistsException.UserID">
            <summary>
            User ID.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Security.WrongSystemUserPasswordException">
            <summary>
            Thrown when the System user password supplied in Web.Config does not match the password in the database.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.WrongSystemUserPasswordException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Security.WrongSystemUserPasswordException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Security.WrongSystemUserPasswordException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Litium.Foundation.Languages.Spelling.SpellingBaseDictionary">
            <summary>
            Base class for spelling dictionary
            </summary>
        </member>
        <member name="M:Litium.Foundation.Languages.Spelling.SpellingBaseDictionary.#ctor(Litium.Foundation.Carriers.SpellingDictionaryCarrier)">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Languages.Spelling.SpellingBaseDictionary"/> class.
            </summary>
            <param name="dictionaryCarrier">The dictionary carrier.</param>
        </member>
        <member name="M:Litium.Foundation.Languages.Spelling.SpellingBaseDictionary.GetAsCarrier">
            <summary>
            Gets as carrier.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Languages.Spelling.SpellingBaseDictionary.GetUserWordCollection(System.Guid)">
            <summary>
            Gets the user word collection.
            </summary>
            <param name="userID">The user ID.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Languages.Spelling.SpellingBaseDictionary.GetStringLineByLine(System.String)">
            <summary>
            Gets the string line by line.
            </summary>
            <param name="stringToSplit">The string to split.</param>
            <returns>List collection with strings</returns>
        </member>
        <member name="M:Litium.Foundation.Languages.Spelling.SpellingBaseDictionary.GetStringLineByLine(System.String,System.Boolean)">
            <summary>
            Gets the string line by line.
            </summary>
            <param name="stringToSplit">The string to split.</param>
            <param name="trimAndRemoveEmtyLines">if set to <c>true</c> [trim and remove emty lines].</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Languages.Spelling.SpellingBaseDictionary.LoadDictionary(Litium.Foundation.Carriers.SpellingDictionaryCarrier)">
            <summary>
            Loads the dictionary.
            </summary>
            <param name="dictionaryCarrier">The dictionary carrier.</param>
        </member>
        <member name="M:Litium.Foundation.Languages.Spelling.SpellingBaseDictionary.UnloadUserWords(System.Guid)">
            <summary>
            Unloads the user words.
            </summary>
            <param name="userID">The user ID.</param>
        </member>
        <member name="M:Litium.Foundation.Languages.Spelling.SpellingBaseDictionary.UpdatePhonetic">
            <summary>
            Updates the phonetic.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Languages.Spelling.SpellingBaseDictionary.BaseWords">
            <summary>
            Gets the base words.
            </summary>
            <value>The base words.</value>
        </member>
        <member name="P:Litium.Foundation.Languages.Spelling.SpellingBaseDictionary.PhoneticRules">
            <summary>
            Gets the phonetic rules.
            </summary>
            <value>The phonetic rules.</value>
        </member>
        <member name="P:Litium.Foundation.Languages.Spelling.SpellingBaseDictionary.PrefixRules">
            <summary>
            Gets the prefix rules.
            </summary>
            <value>The prefix rules.</value>
        </member>
        <member name="P:Litium.Foundation.Languages.Spelling.SpellingBaseDictionary.ReplaceCharacters">
            <summary>
            Gets the replace characters.
            </summary>
            <value>The replace characters.</value>
        </member>
        <member name="P:Litium.Foundation.Languages.Spelling.SpellingBaseDictionary.SuffixRules">
            <summary>
            Gets the suffix rules.
            </summary>
            <value>The suffix rules.</value>
        </member>
        <member name="P:Litium.Foundation.Languages.Spelling.SpellingBaseDictionary.TryCharacters">
            <summary>
            Gets or sets the try characters.
            </summary>
            <value>The try characters.</value>
        </member>
        <member name="P:Litium.Foundation.Languages.Spelling.SpellingBaseDictionary.UserWords">
            <summary>
            Gets the user words.
            </summary>
            <value>The user words.</value>
        </member>
        <member name="T:Litium.Foundation.Languages.Spelling.SpellingDictionaryCollections">
            <summary>
            Spelling dictionary collection
            </summary>
        </member>
        <member name="M:Litium.Foundation.Languages.Spelling.SpellingDictionaryCollections.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Litium.Foundation.Languages.Spelling.SpellingDictionaryCollections"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Languages.Spelling.SpellingDictionaryCollections.CreateSpellingDictionary(Litium.Foundation.Carriers.SpellingDictionaryCarrier,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates the spelling dictionary.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="token">The token.</param>
        </member>
        <member name="M:Litium.Foundation.Languages.Spelling.SpellingDictionaryCollections.DeleteSpellingDictionary(System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes the spelling dictionary.
            </summary>
            <param name="language">The language.</param>
            <param name="token">The token.</param>
        </member>
        <member name="M:Litium.Foundation.Languages.Spelling.SpellingDictionaryCollections.GetSpellingDictionary(System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Gets the spelling dictionary.
            </summary>
            <param name="languages">The languages.</param>
            <param name="token">The token.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Languages.Spelling.SpellingDictionaryCollections.GetSpellingBaseDictionary(System.String)">
            <summary>
            Gets the spelling base dictionary.
            </summary>
            <param name="language">The language.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Languages.Spelling.SpellingDictionaryCollections.GetUserSpellingDictionaryCarrier(System.Guid,System.String)">
            <summary>
            Gets the user spelling dictionary carrier.
            </summary>
            <param name="userID">The user ID.</param>
            <param name="language">The language.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Languages.Spelling.SpellingDictionaryCollections.SaveUserDictionary(System.Guid,System.String,System.String)">
            <summary>
            Saves the user dictionary.
            </summary>
            <param name="userID">The user ID.</param>
            <param name="language">The language.</param>
            <param name="words">The words.</param>
        </member>
        <member name="M:Litium.Foundation.Languages.Spelling.SpellingDictionaryCollections.UpdateSpellingDictionary(Litium.Foundation.Carriers.SpellingDictionaryCarrier)">
            <summary>
            Updates the spelling dictionary.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:Litium.Foundation.Languages.Spelling.SpellingDictionaryCollections.SpellingDictionaryEvent(System.String,System.Guid)">
            <summary>
            Eventhandler for spelling dictionary.
            </summary>
            <param name="language">The language.</param>
            <param name="userID">The user ID.</param>
        </member>
        <member name="P:Litium.Foundation.Languages.Spelling.SpellingDictionaryCollections.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Litium.Foundation.Languages.Spelling.SpellingDictionaryCollections.InstalledSpellingDictionaryCultures">
            <summary>
            Gets the installed spelling dictionary cultures.
            </summary>
            <value>The installed spelling dictionary cultures.</value>
        </member>
        <member name="T:Litium.Foundation.Storage.StorageUtilities">
            <summary>
            File helper.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Storage.StorageUtilities.#cctor">
            <summary>
            Initializes the <see cref="T:Litium.Foundation.Storage.StorageUtilities"/> class.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Storage.StorageUtilities.Delete(System.String)">
            <summary>
            Deletes the file from disc. No error if file already deleted.
            </summary>
            <param name="storagePath">Storage path.</param>
        </member>
        <member name="M:Litium.Foundation.Storage.StorageUtilities.DeleteFile(System.String)">
            <summary>
            Deletes the file from disc. No error if file already deleted.
            </summary>
            <param name="storagePath">Storage path.</param>
        </member>
        <member name="M:Litium.Foundation.Storage.StorageUtilities.GetPhysicalStoragePath(System.String)">
            <summary>
            Get path to file on server. Eg "c:\inetpub\upload\Storage\CMS\37\1D\371D19D2-FC13-4d19-A2D7-459C94E1F366.pdf"
            </summary>
            <param name="storagePath">Storage path.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Storage.StorageUtilities.GetStoragePath(System.Guid,System.String,System.String)">
            <summary>
            Get path to file in storage. Eg "37\1D\371D19D2-FC13-4d19-A2D7-459C94E1F366.pdf"
            </summary>
            <param name="storageID">Id.</param>
            <param name="prefix">The prefix.</param>
            <param name="fileName">FileName.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Storage.StorageUtilities.MakeValidFileName(System.String)">
            <summary>
            Makes the name of the valid file.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Storage.StorageUtilities.GetFile(System.String)">
            <summary>
            Return a stream from disc, null if file doesnt exists.
            </summary>
            <param name="storagePath">Storage path.</param>
            <returns>
            Return a stream from disc, null if file doesnt exists.
            </returns>
        </member>
        <member name="M:Litium.Foundation.Storage.StorageUtilities.GetFile(System.String,System.Int64@)">
            <summary>
            Return a stream from disc, null if file doesnt exists.
            </summary>
            <param name="storagePath">Storage path.</param>
            <param name="fileLength">Length of the file.</param>
            <returns>
            Return a stream from disc, null if file doesnt exists.
            </returns>
        </member>
        <member name="M:Litium.Foundation.Storage.StorageUtilities.ExistsFile(System.String)">
            <summary>
            Exists the file.
            </summary>
            <param name="storagePath">The storage path.</param>
            <returns>True if file exists in storage, physically on disc.</returns>
        </member>
        <member name="M:Litium.Foundation.Storage.StorageUtilities.GetFileLastWriteDate(System.String)">
            <summary>
            Gets the file last write date.
            </summary>
            <param name="storagePath">The storage path.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Storage.StorageUtilities.GetFileLength(System.String)">
            <summary>
            Gets the length of the file.
            </summary>
            <param name="storagePath">The storage path.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Storage.StorageUtilities.CopyFile(System.String,System.String,System.Int64@)">
            <summary>
            Copy item on disc.
            </summary>
            <param name="newStoragePath">The new storage path.</param>
            <param name="orgStoragePath">The orginal file storage path.</param>
            <param name="fileSize">Size of the file written in storage.</param>
        </member>
        <member name="M:Litium.Foundation.Storage.StorageUtilities.SaveFile(System.String,System.String,System.IO.Stream,System.Int64@)">
            <summary>
            Save the stream to disc.
            </summary>
            <param name="prefix">Module prefix.</param>
            <param name="fileName">Filename.</param>
            <param name="stream">The stream.</param>
            <param name="fileSize">Size of the file written in storage.</param>
            <returns>Path to file in storage.</returns>
        </member>
        <member name="M:Litium.Foundation.Storage.StorageUtilities.SaveFile(System.String,System.IO.Stream)">
            <summary>
            Saves the file to the storage.
            </summary>
            <param name="storagePath">The storage path.</param>
            <param name="stream">The stream.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Storage.StorageUtilities.GetFolderPhysicalPath(System.String,System.Guid)">
            <summary>
            Get path to file. Eg "c:\inetpub\upload\Storage\37\1D\"
            </summary>
            <param name="prefix">The prefix.</param>
            <param name="storageID">id.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Storage.StorageUtilities.GetFolder(System.String,System.Guid)">
            <summary>
            Get folder path from id, eg. {371D19D2-FC13-4d19-A2D7-459C94E1F366} returns "37\1D\".
            </summary>
            <param name="prefix">The prefix.</param>
            <param name="storageID">ID.</param>
            <returns>
            Get folder path from id, eg. Guid {371D19D2-FC13-4d19-A2D7-459C94E1F366} returns "37\1d".
            </returns>
        </member>
        <member name="M:Litium.Foundation.Storage.StorageUtilities.CopyStream(System.IO.Stream)">
            <summary>
            Copies the stream to a seekable memorystream.
            </summary>
            <param name="inputStream">The stream to copy.</param>
            <returns></returns>
        </member>
        <member name="T:Litium.Foundation.Strings.ModuleStringCollection">
            <summary>
            Module string collection.
            Enumerates over keys.
            String = a key and all values for different languages.
            Module all permission required to write/delete module strings.
            </summary>
            <remarks>Cached collection.</remarks>
        </member>
        <member name="M:Litium.Foundation.Strings.ModuleStringCollection.#ctor(System.Guid)">
            <summary>
            Contructor.
            </summary>
            <param name="moduleID">Module ID.</param>
        </member>
        <member name="M:Litium.Foundation.Strings.ModuleStringCollection.DeleteAllStrings(Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes all module strings and values for all languages.
            </summary>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Strings.ModuleStringCollection.DeleteString(System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes a module string and all it's values.
            </summary>
            <param name="key">Key.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Strings.ModuleStringCollection.DeleteValue(System.String,System.Globalization.CultureInfo,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Delete a value (for a specific culture).
            </summary>
            <param name="key">Key.</param>
            <param name="culture">Language culture.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.Languages.LanguageDoesNotExistException">Thrown when a language does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Strings.ModuleStringCollection.DeleteValue(System.String,System.Guid,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Delete a value (for a specific language).
            </summary>
            <param name="key">Key.</param>
            <param name="languageID">Language ID.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Strings.ModuleStringCollection.GetAllStringsAsCarrier">
            <summary>
            Returns the strings as a carrier.
            </summary>
            <returns>A module string collection carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Strings.ModuleStringCollection.GetAllStringsAsCarrier(System.Globalization.CultureInfo)">
            <summary>
            Returns the strings of a language as a carrier.
            </summary>
            <param name="culture">Language culture.</param>
            <returns>A system string collection carrier.</returns>
            <exception cref="T:Litium.Foundation.Languages.LanguageDoesNotExistException">Thrown when a language does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Strings.ModuleStringCollection.GetAllStringsAsCarrier(System.Guid)">
            <summary>
            Returns the strings of a language as a carrier.
            </summary>
            <param name="languageID">Language ID.</param>
            <returns>A module string collection carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Strings.ModuleStringCollection.GetEnumerator">
            <summary>
            Returns an Enumerator of all the keys in the collection.
            </summary>
            <returns>The Enumerator of the collection.</returns>
        </member>
        <member name="M:Litium.Foundation.Strings.ModuleStringCollection.GetValue(System.String,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Returns a value for a key (for a specific language).
            </summary>
            <param name="key">Key.</param>
            <param name="culture">Language culture.</param>
            <param name="fallbackToDefaultLanguage">Whether to fallback to value with default language if the value does not exist for the specified language.</param>
            <returns>The requested string value or string.Empty if no value exists.</returns>
            <exception cref="T:Litium.Foundation.Languages.LanguageDoesNotExistException">Thrown when a language does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Strings.ModuleStringCollection.GetValue(System.String,System.Globalization.CultureInfo,System.Boolean,System.String)">
            <summary>
            Gets the translated value for the culture info. If not found, returns the default message.
            </summary>
            <param name="key">The key.</param>
            <param name="culture">The culture. If null, or language not found in foundation languages, default message will be returned.</param>
            <param name="fallbackToDefaultLanguage">if set to <c>true</c> [fallback to default language].</param>
            <param name="defaultMessage">The default message.</param>
            <returns></returns>
        </member>
        <member name="M:Litium.Foundation.Strings.ModuleStringCollection.GetValue(System.String,System.Guid,System.Boolean)">
            <summary>
            Returns a value for a key (for a specific language).
            </summary>
            <param name="key">Key.</param>
            <param name="languageID">Language ID.</param>
            <param name="fallbackToDefaultLanguage">Whether to fallback to value with default language if the value does not exist for the specified language.</param>
            <returns>The requested string value or string.Empty if no value exists.</returns>
        </member>
        <member name="M:Litium.Foundation.Strings.ModuleStringCollection.Refresh">
            <summary>
            Refresh the collection.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Strings.ModuleStringCollection.SetString(System.String,System.String,System.Globalization.CultureInfo,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates or updates value for a system string.
            If module string does not exist it is created.
            </summary>
            <param name="key">Key.</param>
            <param name="value">Value.</param>
            <param name="culture">Language culture.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.Languages.LanguageDoesNotExistException">Thrown when a language does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Strings.ModuleStringCollection.SetString(System.String,System.String,System.Guid,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates or updates a value for a module string.
            If the module string does not exist it is created.
            </summary>
            <param name="key">Key.</param>
            <param name="value">Value.</param>
            <param name="languageID">Language ID.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Strings.ModuleStringCollection.SetStringsFromCarrier(Litium.Foundation.Carriers.ModuleStringCollectionCarrier,System.Boolean,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates or updates module strings from carrier.
            If module strings do not exist they are created.
            </summary>
            <param name="carrier">A module string collection carrier.</param>
            <param name="replaceExistingValues">Whether to replace existing values or not.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Strings.ModuleStringCollection.StringExists(System.String)">
            <summary>
            Returns whether a string exists or not.
            </summary>
            <param name="key">Key name.</param>
            <returns>Whether a key exists or not.</returns>
        </member>
        <member name="M:Litium.Foundation.Strings.ModuleStringCollection.EventManager_ModuleStringCreated(System.Guid,System.String,System.Guid,System.String)">
            <summary>
            Called when a module string has been updated.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="key">String key.</param>
            <param name="languageID">Language ID.</param>
            <param name="value">String value.</param>
        </member>
        <member name="M:Litium.Foundation.Strings.ModuleStringCollection.EventManager_ModuleStringDeleted(System.Guid,System.String,System.Guid,System.String)">
            <summary>
            Called when a module string has been deleted.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="key">String key.</param>
            <param name="languageID">Language ID.</param>
            <param name="value">String value.</param>
        </member>
        <member name="M:Litium.Foundation.Strings.ModuleStringCollection.EventManager_ModuleStringUpdated(System.Guid,System.String,System.Guid,System.String)">
            <summary>
            Called when a module string has been created.
            </summary>
            <param name="moduleID">Module ID.</param>
            <param name="key">String key.</param>
            <param name="languageID">Language ID.</param>
            <param name="value">String value.</param>
        </member>
        <member name="M:Litium.Foundation.Strings.ModuleStringCollection.LoadStringsForKey(System.String)">
            <summary>
            Load strings for a key to the hashtable.
            </summary>
            <param name="key">Key.</param>
        </member>
        <member name="P:Litium.Foundation.Strings.ModuleStringCollection.Item(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns a string (fallbacks to value with default language if it does not exist for the specified language).
            </summary>
            <returns>The requested string or null if it does not exist.</returns>
            <exception cref="T:Litium.Foundation.Languages.LanguageDoesNotExistException">Thrown when a language does not exist or has been deleted.</exception>
        </member>
        <member name="P:Litium.Foundation.Strings.ModuleStringCollection.Item(System.String,System.Guid)">
            <summary>
            Returns a string (fallbacks to value with default language if it does not exist for the specified language).
            </summary>
            <returns>The requested string or null if it does not exist.</returns>
        </member>
        <member name="P:Litium.Foundation.Strings.ModuleStringCollection.Count">
            <summary>
            Returns the number of keys in the collection.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Strings.ModuleStringCollection.Keys">
            <summary>
            Returns a collection of all keys.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Strings.SystemStringCollection">
            <summary>
            System string collection.
            Enumerates over keys.
            String = a key and all values for different languages.
            System all permission required to write/delete system strings.
            </summary>
            <remarks>Cached collection.</remarks>
        </member>
        <member name="M:Litium.Foundation.Strings.SystemStringCollection.#ctor">
            <summary>
            Contructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Strings.SystemStringCollection.DeleteAllStrings(Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes all system strings and values for all languages.
            </summary>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Strings.SystemStringCollection.DeleteString(System.String,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Deletes a system string and all it's values.
            </summary>
            <param name="key">Key.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Strings.SystemStringCollection.DeleteValue(System.String,System.Globalization.CultureInfo,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Delete a value (for a specific culture).
            </summary>
            <param name="key">Key.</param>
            <param name="culture">Language culture.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.Languages.LanguageDoesNotExistException">Thrown when a language does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Strings.SystemStringCollection.DeleteValue(System.String,System.Guid,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Delete a value (for a specific language).
            </summary>
            <param name="key">Key.</param>
            <param name="languageID">Language ID.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Strings.SystemStringCollection.GetAllStringsAsCarrier">
            <summary>
            Returns the strings as a carrier.
            </summary>
            <returns>A system string collection carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Strings.SystemStringCollection.GetAllStringsAsCarrier(System.Globalization.CultureInfo)">
            <summary>
            Returns the strings of a language as a carrier.
            </summary>
            <param name="culture">Language culture.</param>
            <returns>A system string collection carrier.</returns>
            <exception cref="T:Litium.Foundation.Languages.LanguageDoesNotExistException">Thrown when a language does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Strings.SystemStringCollection.GetAllStringsAsCarrier(System.Guid)">
            <summary>
            Returns the strings of a language as a carrier.
            </summary>
            <param name="languageID">Language ID</param>
            <returns>A system string collection carrier.</returns>
        </member>
        <member name="M:Litium.Foundation.Strings.SystemStringCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an Enumerator of all the keys in the collection.
            </summary>
            <returns>The Enumerator of the collection.</returns>
        </member>
        <member name="M:Litium.Foundation.Strings.SystemStringCollection.GetValue(System.String,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Returns a value for a key (for a specific language).
            </summary>
            <param name="key">Key.</param>
            <param name="culture">Language culture.</param>
            <param name="fallbackToDefaultLanguage">Whether to fallback to value with default language if the value does not exist for the specified language.</param>
            <returns>The requested string value or string.Empty if no value exists.</returns>
            <exception cref="T:Litium.Foundation.Languages.LanguageDoesNotExistException">Thrown when a language does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Strings.SystemStringCollection.GetValue(System.String,System.Guid,System.Boolean)">
            <summary>
            Returns a value for a key (for a specific language).
            </summary>
            <param name="key">Key.</param>
            <param name="languageID">Language ID.</param>
            <param name="fallbackToDefaultLanguage">Whether to fallback to value with default language if the value does not exist for the specified language.</param>
            <returns>The requested string value or string.Empty if no value exists.</returns>
        </member>
        <member name="M:Litium.Foundation.Strings.SystemStringCollection.Refresh">
            <summary>
            Refresh the collection.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Strings.SystemStringCollection.SetString(System.String,System.String,System.Globalization.CultureInfo,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates or updates value for a system string.
            If module string does not exist it is created.
            </summary>
            <param name="key">Key.</param>
            <param name="value">Value.</param>
            <param name="culture">Language culture.</param>
            <param name="token">Security token.</param>
            <exception cref="T:Litium.Foundation.Languages.LanguageDoesNotExistException">Thrown when a language does not exist or has been deleted.</exception>
        </member>
        <member name="M:Litium.Foundation.Strings.SystemStringCollection.SetString(System.String,System.String,System.Guid,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates or updates value for a system string.
            If module string does not exist it is created.
            </summary>
            <param name="key">Key.</param>
            <param name="value">Value.</param>
            <param name="languageID">Language ID.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Strings.SystemStringCollection.SetStringsFromCarrier(Litium.Foundation.Carriers.SystemStringCollectionCarrier,System.Boolean,Litium.Foundation.Security.SecurityToken)">
            <summary>
            Creates or updates system strings from carrier.
            If system strings do not exist they are created.
            </summary>
            <param name="carrier">A system string collection carrier.</param>
            <param name="replaceExistingValues">Whether to eplace existing values or not.</param>
            <param name="token">Security token.</param>
        </member>
        <member name="M:Litium.Foundation.Strings.SystemStringCollection.StringExists(System.String)">
            <summary>
            Returns whether a string exists or not.
            </summary>
            <param name="key">Key name.</param>
            <returns>Whether a key exists or not.</returns>
        </member>
        <member name="M:Litium.Foundation.Strings.SystemStringCollection.EventManager_SystemStringCreated(System.String,System.Guid,System.String)">
            <summary>
            Called when a system string has been updated.
            </summary>
            <param name="key">String key.</param>
            <param name="languageID">Language ID.</param>
            <param name="value">String value.</param>
        </member>
        <member name="M:Litium.Foundation.Strings.SystemStringCollection.EventManager_SystemStringDeleted(System.String,System.Guid,System.String)">
            <summary>
            Called when a system string has been deleted.
            </summary>
            <param name="key">String key.</param>
            <param name="languageID">Language ID.</param>
            <param name="value">String value.</param>
        </member>
        <member name="M:Litium.Foundation.Strings.SystemStringCollection.EventManager_SystemStringUpdated(System.String,System.Guid,System.String)">
            <summary>
            Called when a system string has been created.
            </summary>
            <param name="key">String key.</param>
            <param name="languageID">Language ID.</param>
            <param name="value">String value.</param>
        </member>
        <member name="M:Litium.Foundation.Strings.SystemStringCollection.LoadStringsForKey(System.String)">
            <summary>
            Load strings for a key to the hashtable.
            </summary>
            <param name="key">Key.</param>
        </member>
        <member name="P:Litium.Foundation.Strings.SystemStringCollection.Item(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns a string (fallbacks to value with default language if it does not exist for the specified culture).
            </summary>
            <returns>The requested string or null if it does not exist.</returns>
            <exception cref="T:Litium.Foundation.Languages.LanguageDoesNotExistException">Thrown when a language does not exist or has been deleted.</exception>
        </member>
        <member name="P:Litium.Foundation.Strings.SystemStringCollection.Item(System.String,System.Guid)">
            <summary>
            Returns a string (fallbacks to value with default language if it does not exist for the specified language).
            </summary>
            <returns>The requested string or null if it does not exist.</returns>
        </member>
        <member name="P:Litium.Foundation.Strings.SystemStringCollection.Count">
            <summary>
            Returns the number of keys in the collection.
            </summary>
        </member>
        <member name="P:Litium.Foundation.Strings.SystemStringCollection.Keys">
            <summary>
            Returns a collection of all keys.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Tasks.ITask">
            <summary>
            Interface for task (scheduled or startup).
            </summary>
        </member>
        <member name="M:Litium.Foundation.Tasks.ITask.ExecuteTask(Litium.Foundation.Security.SecurityToken,System.String)">
            <summary>
            Invoked on a timer event (scheduled tasks) or on startup.
            </summary>
            <param name="token">Security token.</param>
            <param name="parameters">Parameters or null.</param>
        </member>
        <member name="T:Litium.Foundation.Log.ScheduledTasks.LogTruncateScheduler">
            <summary>
            Handle the background process to update the pageinformation and get new statistics
            </summary>
        </member>
        <member name="M:Litium.Foundation.Log.ScheduledTasks.LogTruncateScheduler.ExecuteTask(Litium.Foundation.Security.SecurityToken,System.String)">
            <summary>
            Invoked on a timer event (scheduled tasks) or on startup. 
            Sample:
            "Litium.Foundation.Log.ScheduledTasks.LogTruncateScheduler;00:00;1h;Debug=0&amp;Info=1&amp;Warn=10&amp;Error=10&amp;Fatal=-1&amp;MaxCount=50000"
            Run the truncate every hour, removing all DEBUG entries, keeping 1 day of INFO, 10 days of WARN and ERROR and unlimited old FATAL items, but maximum of 50000 log entries.
            </summary>
            <param name="token">Security token.</param>
            <param name="parameters">Parameters or null.</param>
        </member>
        <member name="T:Litium.Foundation.Tasks.ScheduledTaskManager">
            <summary>
            The ScheduledTaskManager handles scheduled tasks in Litium Foundation.
            Timers must be restared when the web application restarts (timers are not stored in the database).
            </summary>
            <example>
            Solution.Instance.ScheduledTaskManager.RegisterScheduledTask(new ScheduledTaskManager.TaskDelegate(CallbackFunction), new TimeSpan(0,0,0,1,0), new TimeSpan(0,0,0,1,0), parameters);
            </example>
        </member>
        <member name="M:Litium.Foundation.Tasks.ScheduledTaskManager.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Tasks.ScheduledTaskManager.Clear">
            <summary>
            Remove all tasks and stop all timers.
            </summary>
        </member>
        <member name="M:Litium.Foundation.Tasks.ScheduledTaskManager.RegisterScheduledTask(System.Reflection.AssemblyName,System.String,System.TimeSpan,System.TimeSpan,System.String)">
            <summary>
            Registers a scheduled task.
            </summary>
            <param name="assemblyName">Assembly name.</param>
            <param name="className">Name of class (must implement IScheduledTask).</param>
            <param name="dueTime">Time until start.</param>
            <param name="interval">Interval.</param>
            <param name="parameters">Parameters (or null).</param>
        </member>
        <member name="M:Litium.Foundation.Tasks.ScheduledTaskManager.RegisterScheduledTask(Litium.Foundation.Tasks.ScheduledTaskManager.TaskDelegate,System.TimeSpan,System.TimeSpan,System.String)">
            <summary>
            Registers a scheduled task.
            </summary>
            <param name="taskDelegate">Method to call.</param>
            <param name="dueTime">Time until start.</param>
            <param name="interval">Interval.</param>
            <param name="parameters">Parameters (or null).</param>
            <example>RegisterScheduledTask(new ScheduledTaskManager.TaskDelegate(CallbackFunction), new TimeSpan(0,0,0,1,0), new TimeSpan(0,0,0,1,0), parameters);</example>
        </member>
        <member name="M:Litium.Foundation.Tasks.ScheduledTaskManager.RemoveScheduledTask(Litium.Foundation.Tasks.ScheduledTaskManager.TaskDelegate)">
            <summary>
            Removes a registred task.
            </summary>
            <param name="taskDelegate">Task delegate to remove.</param>
        </member>
        <member name="M:Litium.Foundation.Tasks.ScheduledTaskManager.TimerEvent(System.Object)">
            <summary>
            Executes the timer event.
            </summary>
            <param name="state">.</param>
        </member>
        <member name="P:Litium.Foundation.Tasks.ScheduledTaskManager.Count">
            <summary>
            Returns the number of currently running scheduled tasks.
            </summary>
        </member>
        <member name="T:Litium.Foundation.Tasks.ScheduledTaskManager.TaskDelegate">
            <summary>
            Delegate for all tasks
            </summary>
        </member>
    </members>
</doc>
