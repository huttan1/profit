//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.3038.
// 
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Configuration;
using System.Diagnostics;
using System.Threading;
using System.Web.Services;
using System.Web.Services.Description;
using System.Web.Services.Protocols;
using System.Xml;

namespace ECommerce.Web.PacSoft
{
    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [WebServiceBinding(Name = "IntegrationServiceSoap", Namespace = "http://www.litium.se/ECommerce/WebServices")]
    public class IntegrationService : SoapHttpClientProtocol
    {
        private SendOrPostCallback m_transferXmlOperationCompleted;

        /// <remarks/>
        public IntegrationService()
        {
            string urlSetting = ConfigurationManager.AppSettings["PacSoftIntegrationService"];
            Url = urlSetting ?? "http://localhost:7419/IntegrationService.asmx";
        }

        /// <remarks/>
        public event TransferXmlCompletedEventHandler TransferXmlCompleted;

        /// <remarks/>
        [SoapDocumentMethod("http://www.litium.se/ECommerce/WebServices/TransferXml", RequestNamespace = "http://www.litium.se/ECommerce/WebServices", ResponseNamespace = "http://www.litium.se/ECommerce/WebServices", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public void TransferXml(string username, string password, XmlNode data)
        {
            Invoke("TransferXml", new object[]
                                      {
                                          username,
                                          password,
                                          data
                                      });
        }

        /// <remarks/>
        public IAsyncResult BeginTransferXml(string username, string password, XmlNode data, AsyncCallback callback, object asyncState)
        {
            return BeginInvoke("TransferXml", new object[]
                                                  {
                                                      username,
                                                      password,
                                                      data
                                                  }, callback, asyncState);
        }

        /// <remarks/>
        public void EndTransferXml(IAsyncResult asyncResult)
        {
            EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void TransferXmlAsync(string username, string password, XmlNode data)
        {
            TransferXmlAsync(username, password, data, null);
        }

        /// <remarks/>
        public void TransferXmlAsync(string username, string password, XmlNode data, object userState)
        {
            if ((m_transferXmlOperationCompleted == null))
            {
                m_transferXmlOperationCompleted = new SendOrPostCallback(OnTransferXmlOperationCompleted);
            }
            InvokeAsync("TransferXml", new object[]
                                           {
                                               username,
                                               password,
                                               data
                                           }, m_transferXmlOperationCompleted, userState);
        }

        private void OnTransferXmlOperationCompleted(object arg)
        {
            if ((TransferXmlCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs) (arg));
                TransferXmlCompleted(this, new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [GeneratedCode("wsdl", "2.0.50727.3038")]
    public delegate void TransferXmlCompletedEventHandler(object sender, AsyncCompletedEventArgs e);
}